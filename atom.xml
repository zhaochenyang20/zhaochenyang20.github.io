<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>仿生模语言型会生成赛博博客吗？</title>
  
  <subtitle>求道之人，不问寒暑</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-30T12:53:29.756Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Chenytang Zhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rcommondation</title>
    <link href="http://example.com/2022/11/27/%E5%87%BA%E5%9B%BD/recommend/"/>
    <id>http://example.com/2022/11/27/%E5%87%BA%E5%9B%BD/recommend/</id>
    <published>2022-11-27T02:20:34.982Z</published>
    <updated>2022-12-30T12:53:29.756Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="参考资料">参考资料</h1><p>最近自己写推，四处搜资料，写到我语言模块要过载了。刚写完一封，于是来这里发一个整理贴，希望能帮到大家。</p><p>写了几封感觉推荐信，最大的感觉就是要围绕你自己的某些点去讲述，用一些小事情什么的来证明你的某些闪光点，最好是量化的（前百分之几的学生）或者是事实阐述</p><ol type="1"><li><ahref="https://gsi.berkeley.edu/media/sample-recommendation-letter.pdf">课程推</a></li><li><ahref="https://www.ccny.cuny.edu/sites/default/files/2021-02/CSOM%20Sample-Letters-of-Recommendation.pdf">强推与弱推对比</a></li><li><ahref="https://mitadmissions.org/apply/parents-educators/writingrecs/">MIT的官方指导</a></li><li><ahref="https://templatearchive.com/letter-of-recommendation-for-graduate-school/">模板网站</a></li><li><a href="https://cs.brown.edu/~sk/Memos/Grad-School-Recos/">Adviceto Letter Writers</a></li><li><ahref="https://homes.cs.washington.edu/~mernst/advice/write-recommendation.html">Washington</a>,<ahref="https://www.writeexpress.com/How-to-write-a-recommendation-letter.html">WriteExpress</a>,<ahref="http://writing2.richmond.edu/writing/wweb/trans1.html">Richmond</a></li></ol><h2 id="advice-to-letter-writers"><ahref="https://cs.brown.edu/~sk/Memos/Grad-School-Recos/">Advice toLetter Writers</a></h2><p>这些都是给为学生写信的老师的建议。</p><p>This document is about: Writing effective recommendation letters forPhD students applying to computer science PhD programs in the US.</p><p>Whom this is for: Letter-writers who are unsure of what makes for agood letter. This may also help students prepare better dossiers to givetheir letter writers. (A brave student might even point herletter-writer to this article.)</p><p>committee 只有 1分钟决定一个申请的初印象，因此开头一定要有冲击力，抓住重点。</p><p><strong>Call this the One-Minute Rule and write, read, and re-readyour letter against this rule before sending it in.</strong></p><ol type="1"><li>Be Concrete</li><li>Credibility</li><li>Reporting on Research<ul><li>describe their work in your own words</li><li>tell us what the student's contribution was</li><li>tell us whether it succeeded or failed</li><li>if it's ongoing, tell us why you think it will succeed</li></ul></li><li>Reporting on Courses<ul><li>Don't just report the grade; put it in perspective.</li><li>How many students got that grade or better?</li><li>Did they do an exceptional job at something?</li><li>Were they biased towards some aspect of your class?</li></ul></li><li>Reporting on Personality</li><li>Corporate Letters<ul><li>Tell us if they learned something remarkably quickly, mastered acomplex technology, or solved a problem others were stuck on. Pleasegive us a paragraph of details.</li><li>If you have a concrete reason to evaluate research potential, do soconcretely. Otherwise, don't bother.</li><li>Please give us a brief bio-sketch, including educationalqualifications.</li><li>Put the applicant in context, and tell us the context. It's OK torelate it to your student days or your experience hiring students.</li></ul></li><li>Don't Personalize<ul><li>Absolutely nobody cares that you don't list Brown's postal addressat the top of the letter.</li><li>Of course, you could personalise a letter by writing a paragraphspecific to an institution. But only do this if you have something tosay. (Hey folks—Eva Echidna is more dedicated than Jonas Jackaroo andevery bit as brilliant as Walter Wallaby, both of whom are past studentsof mine who appear to be thriving in your program.)</li></ul></li><li>Ask Your Student for Help<ul><li>Asking students to write even a draft of their letter is one of theshabbiest practices I can imagine.</li><li>I <a href="https://cs.brown.edu/~sk/Memos/Reco-From-Me/">tell mystudents</a> to give me a list of everything about them that they thinkis relevant. I explicitly tell them to brag (some students are shy andmay not give themselves enough credit otherwise): filtering their inputis my job, not theirs, and I say so.</li></ul></li><li>Help Your Students Form a Strategy<ul><li>Take a little time to help students plan out their applicationstrategy. Ask them who their other writers are, help them find writerswho can highlight all their strengths, and identify pointlessoverlap.</li></ul></li></ol>]]></content>
    
    
    <summary type="html">最近自己写推，四处搜资料，写到我语言模块要过载了...</summary>
    
    
    
    <category term="写作" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/"/>
    
    <category term="出国心路" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/%E5%87%BA%E5%9B%BD%E5%BF%83%E8%B7%AF/"/>
    
    
    <category term="申请" scheme="http://example.com/tags/%E7%94%B3%E8%AF%B7/"/>
    
    <category term="2022秋季" scheme="http://example.com/tags/2022%E7%A7%8B%E5%AD%A3/"/>
    
  </entry>
  
  <entry>
    <title>Chain of Thought Working Notes</title>
    <link href="http://example.com/2022/08/20/CS/%E7%A7%91%E7%A0%94/chain_of_thought/"/>
    <id>http://example.com/2022/08/20/CS/%E7%A7%91%E7%A0%94/chain_of_thought/</id>
    <published>2022-08-20T08:10:55.655Z</published>
    <updated>2022-12-30T04:09:27.589Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d73f45856187f296dbdd6bdf0b6d0a6d7b30bc4a2ea9589de38d0e7d061afb78"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">My research concerning CoT and in-context learning at SenseTime during Fall 2022, which is a fairly new start!</summary>
    
    
    
    <category term="科研" scheme="http://example.com/categories/%E7%A7%91%E7%A0%94/"/>
    
    <category term="NLP" scheme="http://example.com/categories/%E7%A7%91%E7%A0%94/NLP/"/>
    
    
    <category term="科研" scheme="http://example.com/tags/%E7%A7%91%E7%A0%94/"/>
    
    <category term="暑研" scheme="http://example.com/tags/%E6%9A%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>大二学年的科研心路</title>
    <link href="http://example.com/2022/08/16/CS/%E7%A7%91%E7%A0%94/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/08/16/CS/%E7%A7%91%E7%A0%94/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/</id>
    <published>2022-08-16T08:41:41.456Z</published>
    <updated>2022-11-13T04:25:44.997Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="83119d71ac85fceecc0f1b315c25c10dbbfe6bcf92f293c8f89a81799631103a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">说来惭愧，分明什么也没做，却厚颜无耻在此写总结...</summary>
    
    
    
    <category term="写作" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/"/>
    
    <category term="总结" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="科研" scheme="http://example.com/tags/%E7%A7%91%E7%A0%94/"/>
    
    <category term="暑研" scheme="http://example.com/tags/%E6%9A%91%E7%A0%94/"/>
    
    <category term="人生规划" scheme="http://example.com/tags/%E4%BA%BA%E7%94%9F%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>PhD -1.5 学年总结</title>
    <link href="http://example.com/2022/08/15/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/PhD-1.5/"/>
    <id>http://example.com/2022/08/15/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/PhD-1.5/</id>
    <published>2022-08-15T11:10:47.776Z</published>
    <updated>2022-12-30T13:24:18.679Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4b73ffb7beb9d591980bc307e53f1e488bd0b86b3fe872308688bed71cf85e98">9a7a9da8f63f89cee94f2133b47575ff4580888e2aaa8c7d72671e4e89aa40f35be21b99556505aa3087f6fe1051ecf13276ce7b8518caf60795c1e59113452c5111d3e85fa5a9c203a97271b75c1264da7c1161ea355faa632140ec021e6dec6bba05f9dbbb0faa8aa97e08460ebd270eaa2a5af04ec34cbd9631af4a3ac097c504e3bdd0ca30d2146ebaafedfa037667b7db8889d21d348417dc8867f13c48005beab7ae42b114ab9946175e59044a8d7ecbea8c8bde6d8b461b1bc65f84ae0346d0f4bf5bbe67d71c32bb5c3632d544fc57fa1dbdd75a430765a476039f6db6370a2369c9945aa19c803fadf6d8628f5f4d30c681ec90f443082ae02de3fe41fbaca3c5178c0d0d2c5f74a95745bdf477895b858d181ff2cd42f0ff79cb5a4dedce5f7721941445d2df4d56c911d08a6cf660c778311669efee4e5c016533276c451dc9cf99aa9a15d6ba732dfd65216844790238399724e84ce68cc8923e64f48d3d798f0cbd4d81da3565ffac7773b77dbcbe772cf56884a1cc2369f0923c4e839a6b40a8247379bc7686ac49ba7280acb3c9d4d4892461dbe479374e5558ee173e305e5bfbe23a8091a6b639fc3579f5557ddf576ced1be8365d8a745caf716af114963b5d417f2260912a5bf3e0be385d51beeb6ba00f60f3865d2f82de78c2bea7d3e7105e744fdedf9d2683b5867f608ec3cf58fce7a9f1ce0984bf373a444b5857efd672a84deb97e751954049bde7c133201755dea6ccf92420027416cb9f3b03739d0f1e1d0b9e64b27063382ed01b412b58c239777d849cc4dc61a2f0958b8131565d0d0cc21144348af5218f82256adb7675d1d9a67a3fd5941ad7bdaf6572129da18c2d7ca4cae801004d5084af5f8d436e380cac13aebe5e3398446df02ae6d6552de8fcff54392273a9e85db4a9d853fdde60e141ecfa172302f59848494ca217442da08564715e0a20de56e094ff73b61bbdf4574edb3c98bffc2d3212a66417a1b880a50c72b8bfa380eb554f34ccf885b194e1c9aa2f8db44b16280be65d6e91a9a40aa257fb646919a96a31d109fd76cdcd270d0dd8546b9e62753f953cff56c688deaaedccef3d0f7402027f3dbcc8125459e829f1046029a6ed1d05ad52e2e1e4d127dab29831abb341383685ec8d4f75a6d15a73ad01b554871405d7c0ea4f8dc1aa80a4ec64da44448c49396d685e08f99d270746eea8f5b16dbd45a880356349cf43871daaac1881562ad3efa61066bfa6f7eb846fe9d73dbec3069a673a50841cebd2f9c18cb74c840b37c02b8983e6a8730bb4686c4bf6a7271d7f8a8b8a440c6b48e2d9b312e11f996ea0261001b4d1f5996b760eee00d59f9d7cc52af36ffdddf2a2940f738ba3d1f35c2513938f0d0b4b728fa427a8a114b123683c400771c09733a7e0313fe2fdd1ebe189ef99f3ccd6561bf8b5569dee3650131ad87983e6d629c1e3d9a05c17d97345a5f67796b88938d260ce4c384e1d7fb82c6a3252d49f47a77b3e2d11eee861a0f57ef8e109ea058cb813e47409019a5b6d296341fc78da62ad73e65dde2bfe6d31bffdc711eae387ff24dfb0ffc1863b79a355b0b1023aaad719f3288c831737663a166adb30ed15230c56537ae140cceddd566b7be15c397b2e2123175bbe09e432dd438275152a53c308b9f8ae0c8b92c05f4fcd3b6765e912e0d317341b8393376d6ab1397df2a731786ac2561c379ffc3816e731d5bedbea190b84ceb1d222067109dc82722cce6c5dfabbc77bbb1f6640cc9de95aa6ba964bec7f8c47384fb75446f5014c8f6c7f4a0a8bdcb3229aafb313dd9f6c73edc38c3fd213cbf489c20c359a42c5c53dbe7b7df68b5980f9e7d77d9cf60fe1c6bd76fce9f332e1b4b3161afac32a190b2faab07e63353343e61d1142336d16ad622e4f9259d4f104c7b4433641c243ae1c488cbdd9039247eeb45a27f4f6df10c6e7752ee32265e029f888924861e0a09d848798a0c0c4a8c8a80fc94216999146ac32fdc46200cb52de2da04c45d759a4e1e4913e97c6ce7e8e8052d299d0ac0f1a82618a18d4425d4a77aba267dac2bc62da7104c2080e60812e444bde986fe7f8201a6b4d830357e4b1030f081d8d6113b86902e5c05e47966c367b796e35cc01d24bcf1b96d0a819ff30162948dc6c4518369bcdb3340c8eb59ca09176cc97d48424b7b023d370e88cce7afa36e853ea4a2b5f9f1cfeb2cc92e332232a09f0d37113023528703fe472e9830e63b8a64e7e3d8b0d94902f57a235df56dd07841cf18261debfbc0d0dad93f24634e93998c10f561ccd2f95ec9d552f42eca6c260130db00c66623f0ce13cdd56b7576f2f4d61f571d34de023e3410dfc2242a3eeaaf3bf6fa9ef6a3586c76c26f130658984f1026ea122392fe0e50e01abf95fb18724eb9eb12a8412dc37bf62370b283a5a0d22fef2ea726dd6342a866b112bada9cbc6d56bacccb70bbe78861cfcd3a6b24485b11a14c48ecb8870ec935854aba688a162c70e2ce8b3abb53429d936a89481b7f52c29ac015734a134d84eaa14072e538eac43a6db35263219519846a699f6208847928ede087bf2de65271e3aaf25166e02949d1963f0818ca2a7950598f9e3fcc85b1c04edec505f1ad3933907df714ab35b1da0b3293ff05928845f39ec25ac9f7d28ba7b0bf5700ceedae389274106a95628d1732a6d9243ce23d39927b73571c0114522ec459a0ccd27f56f77be2271d98e81f1e3be16a72dbf7e477ec275802618150635e93391a3a23e403a5abe64d2697dfe599906e6b4c7891a1bb420d6a938bfe8471dd5a263ff7f1fd5bbc533f3ed2edd47720d21990ab9a3aa5aa90c3b37d129721255fd89e0d73caeef19359010dc328c3196c146bbced3fa81808d77a07d484b720f27fdea19ce72170cd517912b1e5641466c5ebfbd83f994ca5a3580777ea1ddb521b86534aa9e1dd023455d52290b601a1c28158cd41f4d3c7305fe8c42625f6bceb7bc3b39d702512d39e390f8ca86eee3950b604e464b624627da671dcf17055792bd0df16132c64c2dded4109a7b6a380eded77f1da5cabe0d0145f084d209000fc40f5465c5fccb5bdff858de8bd5197c117b5e5ed982f2f23972ada5a1ce260a7a3a2383be3c69a024b20a15900a18c5605dc37976931b28d9b12588778b40fb361aef5ef7a02c5b7fc8f5ff2968c59721bd127ec421eb8c9eb6dbc1be8d836a83b3be5202e45b1e026957cafe5958de862feba7464428ae91fec83a39de013e2292e97f9743d6ab7564ad39fe8298951a7652c5e89a0581a70c8e2840ca638e64eb2805a06fd6869ac38ac0402c06ddfcd92ad812fba1ec4dafb1c47dc1ae8ee07e99678ac691a84a9918d6c25487c367959fafe18854c89ba914426758f1cac791150741e4cb2b7ffc59c91c8bf56c91e82eaa92072472651bbffdf2d5d4e71de31c3b9a482ee7ca9b5e77c2658b5afc00e01ccc16a3d3a52d977ef759a0735c44d5ff31b84646384070970580fb86c794fc6b38af4aeaf69377d80646419453a178edb2f6fcc6121c9650f31c7f2ed436c7a6047e61fe77ff9fdc1110ff52e18b5cee9257a678551f9b6bee00f0dcc1088916f2477ecd1610302f6af9fc6205a2cbde0ea83c00f90b1d2b38ae80c83f97d9d4bd0be16336fb8562173734e939c236906947f1257f77e92b6388be150d1c351c88b2e84f5fa2b47b5d611f801c4d18266c202e47af234edc1ae00a274710165813424b989941e87ac124af8d2c9dd3e00ffbeb05c7ab9f8c1980620366af23bbb7df402bb7f6e43b89e73207810f13f0a03aa63aaa67b46c6ff10394991ac06dafb9e7f194a516641703d9f706f5e720ff41bd09dbe200eddcf2328e0b18de45a237d01b90c7a9eaf509f2cfc8d63da804acdffd19450e15c1549935ae8b1f5e91c3e2850f61933bd058e92ba19045eaca27cff0421bedc9a3a5b2d134ff358660ea8d214a80707109efcebcf3b0fa5ec216ac3b7b07f1ad53ad3f956a3f318110d2812f89552b7e1888d96b11810d06f3a4c5afd9da261dfd5e61cc7701e4275cc7984881aae51b1052be86e9861ba9a03f383a40fe152b31c4b1b26db920676975a12d48f7b207b9dce57c83488afb7d67a874c95a99a59c0bf579a255811a7fa5682f24656eacb28f1a522875bf9cfdbb04917e90609c5249e7bb9f5175c026866be00df234aa523c55a7f7da513479e0c839ddaf7744a86023e7fc3335e5c9655d9618449118f7969bede698b70ee8d765400f2f35776f018863684555ea8a1d44b1713cfcd9575710550c41a012891454cd55c433d580246a1ac4e9189c78b6927c99f272d814d8e69db08082bef737c26e95f9accb79c2a095f9423e9715c84ef111b2de43da79c880eeb454d7c632bd358eeaec69b1624bf455804b45308e54e93f98a7c6c107ea045ffa1cfe3a6d7c719962280248c488dd2e0b635cc785c4e4a8acb741030fcab55edae5ad66298baf88e01426f1186f2b7e3d4ab28d3d30a8bfa4461f56befb9b508dfecec47788ab7e81d4990e7363735e6e88446d0f09e5f51cd471c68c7b8da87c79634b33d1808314c8275dc984545128e955d5ebe0424f02c91682b3d555165f8f128aab1cda9d9cd7fd6ec51ace146f4a24c26d45abe73666c50f5f022284fbf84de8db103dd0c7b08497a8d523b6040fa3a8cfd0e55b011e7f6e1271a0b7edc6477ccd3287446579587490827b643a106b990c879c004a3abe18ad7eab89c9fdaabba26492fc29eae734edcf3368196ebc16ae64065e16865db52ecc948e56342ad894dc21d2fb279d8be89e59f1f62036a7c7dc21a468041f520349e34d8457ff4500eda99bf0ef045eff9609a5b7eadebd3721d0cb4576928d944bfc32ea7c6e2c7cd9832bdece6d38740d100d3b27d006ab06383e399d69f3753de997894ea5729e7d7d5929f6ecb5f06ba3f4b1f6969a8a0351bca3f7f12e7796202d52e690fc3415bdce4442a0e497f7c72f0349777c3c939ab50c8769d6104bfa5982210d81335580fb0b9028c7c894402062bf97596d2732e782b42c2b08e4bbb2d90bc1b20f7a3525ddfa7041be3d05af42c0d8913c7715627a8fc77aa763dc1abd76bf1ddffdf456e2e17054766e8fd1f0b0f2cb51ee79389db371d5a30eec52182da0b3910c5cb8851b95461e10153faa2e35d73723da6150211088609ae1a32ae0a85c93caee4eb1fc59426d2591eedcb33f8e3543ba39723178f45766c62b3eec7cd4fcb46e42e3c502cd5cf4b9fb8c58747941a08c570fc8f9865c2a0995dd48dfa9f733a209eb4b849aa54b116f7834c544d2bf31285f054b3c0ffd17e875ee3330a7e72a86a0877757</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这番动荡，又是为何，又将去何？</summary>
    
    
    
    <category term="写作" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/"/>
    
    <category term="总结" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="人类社会观察" scheme="http://example.com/tags/%E4%BA%BA%E7%B1%BB%E7%A4%BE%E4%BC%9A%E8%A7%82%E5%AF%9F/"/>
    
    <category term="2022秋季" scheme="http://example.com/tags/2022%E7%A7%8B%E5%AD%A3/"/>
    
  </entry>
  
  <entry>
    <title>英年</title>
    <link href="http://example.com/2022/08/15/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%B8%89%E5%AD%A6%E5%B9%B4%E5%B1%95%E6%9C%9B/"/>
    <id>http://example.com/2022/08/15/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%B8%89%E5%AD%A6%E5%B9%B4%E5%B1%95%E6%9C%9B/</id>
    <published>2022-08-15T11:10:47.776Z</published>
    <updated>2022-09-12T12:04:17.936Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b99d04c93d88370c9856d9d8b3b15c06b86610c6e2b4542e62dd2021dd39c08d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">如果真的存在所谓的命运，我也只能对他的反复无常报以一笑了</summary>
    
    
    
    <category term="写作" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/"/>
    
    <category term="总结" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="人类社会观察" scheme="http://example.com/tags/%E4%BA%BA%E7%B1%BB%E7%A4%BE%E4%BC%9A%E8%A7%82%E5%AF%9F/"/>
    
    <category term="2022夏季" scheme="http://example.com/tags/2022%E5%A4%8F%E5%AD%A3/"/>
    
  </entry>
  
  <entry>
    <title>托福抢救计划</title>
    <link href="http://example.com/2022/07/25/Lecture/English/TOEFL_life_savior/"/>
    <id>http://example.com/2022/07/25/Lecture/English/TOEFL_life_savior/</id>
    <published>2022-07-25T11:41:13.226Z</published>
    <updated>2022-12-30T13:12:47.103Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本人参考一亩三分地上的攻略，试图自行还原一次速成托福的方法，否则托福一直拖下去，对研究影响极为不利。</p><h1 id="第一周-阅读">第一周 阅读</h1><p>每天一套 TPO + 中介的讲课，然后总结了笔记。目前 TPO 前 10 套 27+水平。之后做的题应该集中在 TPO 55 左右，然后整理错题。</p><h1 id="第二周-写作">第二周 写作</h1><h2 id="前人经验">前人经验</h2><h3 id="概谈">概谈</h3><p>事实上，ETS更在意的是你是否能在短时间内针对一个特定话题写出一篇逻辑清晰，结构调理的文章。基于此分析，笔者认为，攻克托福写作要点有二：</p><ol type="1"><li><p>模板</p></li><li><p>字数</p></li></ol><p>首先来谈模板，<strong>我们心里要有一套对付写作的模板。当然，听说 ETS会对文章进行查重，所以我自己会综合多个模板并且自我改写。不过，在考场遇到任何题目，我们都要按照自己心里设定好的那个模板去发展，或者说是一个写作套路。</strong></p><p>其次是字数。在写作部分给定的时间里，大家一般都会仔细思考，边想边写，力求句子结构的多样，词汇的高级，这样一来，在给定时间内一篇独立写作就只能打到350-450词。当然不是说这个字数就一定没有高分，但一般人，尤其是我，写作能力没有这么高，怎么办呢？就靠字数多。</p><p>我托福写作全程就是疯狂打字，不浪费一分一秒的时间停顿，思考怎么写得更高端。即使写的语句字词相对大神来说比较普通，只要字数够多，仍然可以高分。不要理会有些攻略或者老师说的，什么综合写作字数不能太多，要简练，什么不能照抄听力，要用自己的话复述。听到什么就写什么，听到的全写到作文里，能多细节多细节，能写多少写多少。我大概第一篇综合写作可以打400 字，第二篇独立写作都能打 600 字以上，常常到 700字。<strong>美国人有一种奇妙的逻辑，“只有达到了一定字数才可能说清楚一件事”。</strong></p><h3 id="具体细节">具体细节</h3><p><strong>综合写作</strong></p><p>综合写作不想说太多，大家要知道的是，综合写作是整个 writing部分的提分项，拿到 good很容易。关键就是有一套自己的模板，并且平时把它练熟，等上了开场再根据阅读和听力添砖加瓦。</p><p>有些老师说阅读部分可以不用读那么细，甚至有人说只要读一下每段首尾句了解一下段落大意即可。而在这里，笔者想说，阅读一定要仔细读，不要担心时间不够，这部分的阅读要比前面的reading 简单得多，不存在读不懂的问题。</p><p>仔细读文章的目的在于，我们是可以利用阅读部分去理解听力内容的。因为听力部分一般来讲都是在反驳阅读，那么如果我们能对阅读有一个很清晰的理解，就可以轻松地对应上听力的反驳内容。至于听力内容，我们一定要尽己所能去还原，能听多少写多少，一来向阅卷人证明自己确实听懂了听力，二来也为自己尽可能多地增加字数。</p><p>再强调一次，一定要准备好自己的模板，模板不分好坏，只要能套上的模板都是好模板。至于高级句式，高级词汇，这些都是锦上添花的东西，有了当然好，写不出来也丝毫不影响你得高分。笔者很多写作22 分的小伙伴都嘲笑我的作文是 bullshit，然而我就是得分高。</p><p><strong>独立写作</strong></p><p>关于独立写作，笔者想说，有没有按照套路去写作真的是天壤之别。相信大家在最开始的练习时都会经历一段无话可说的尴尬境地，这个问题完全可以用笔者之前所说的模板去解决。这个模板特别指我们的写作思路，也就是我们在写作文时会按照什么样的顺序什么样的方向去写。每次遇到作文都去东平西凑肯定是不行的，一定要形成自己的一种思维方式。一旦形成这种固定的思维，我们就可以在看到题目后不慌不忙，按部就班的完成一篇独立写作。笔者总结了一下自己的写作的套路，自认为是比较便于思考的一种。</p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>参考框架</span></div>    <div class="hide-content"><div class="note primary modern"><ol type="1"><li>开头：引入问题 + 简单分析利弊 + 自己的观点 （100词左右，可背诵开头模板）</li><li>主体段一：主旨句（点明问题之利，15 词）+一两句话解释为什么会有利（30词）+ 例证（100词）+ 一句话总结（10词）</li><li>主体段二：主旨句（点明问题之利，15词）+ 一两句话解释为什么会有利（30词）+例证 （100 词）+一句话总结（10 词） 主体段三：问题之弊（即让步段）+转折 + 分析弊 &lt; 利 （70词左右，时间允许的话最好加例证）结尾:总结全文之利（即主体段一和主体段二）+ 小小展望一下未来（30词，可背诵模板）</li></ol></div></div></div><p>以上是笔者在写作时的大致思路，不管遇到什么题目，笔者都会先想两个正向的角度加一个反向的角度，然后立马开始背写开头段。可能还有人会说例证写100 词太难了，其实我们要知道，托福作文的例子是可以编的。ETS允许考生通过虚构一个场景来证明自己的立场。笔者看完老友记后，举例子永远都是my nephew Ross怎么怎么样，在编故事时绘声绘色，添油加醋，不断地填充细节，这样下来，100词都不够写，根本不必担心没得写。</p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>参考文段</span></div>    <div class="hide-content"><p>The world has witnessed a tremendous difference in the past severaldecades; ground-breaking technology replaced old clumsy tools, and thedevelopment of the economy is at a speed beyond an average person'simagination. <strong>Coming along with these phenomena is a heateddebate</strong> as to whether young people are better able to makedecisions on their own; people's opinions differ from person to person.Someone believes that with the help of new technology, children can makewell-considered decisions independently. In contrast, others imply thatparents still have an essential say in their children's decisions.However, in the ultimate analysis, I contend that young people now canbetter make decisions for these reasons elaborated below.（第一段几乎全是模板）</p><p>First, modern technology enables young people to make well-considereddecisions. （主旨句） To put it another way, with the internet, socialmedia, and all kinds of newspapers and magazines, children now are muchmore well-informed than they were in the past. Thus, with the assistanceof this modern technology, it is not necessary to ask parents for advicewhen children are making decisions. （两句话解释主旨句） Take my ownexperience, for instance. When choosing which college to attend afterhigh school graduation, I conducted in-depth research on the internet.Surfing colleges' official websites, I learned about their majors andthe internship opportunities they can provide; by sending e-mails toprofessors, I better understood their specialty; talking to currentstudents via social media, I got lots of helpful advice. With the helpof modern technology, I chose a college I will never regret. （例证）However, if I had lived in the past without this technology, I mighthave gone to a college that my parents suggested going.（一句话总结）</p><p>Moreover, young people are now more financially independent than theywere in the past, giving them opportunities to make decisionsindependently. （主旨句） On the contrary, teenagers usually had lesschance to gain money in the past. Therefore, they had to get theirparents' permission when they wanted to make decisions.（两句话解释主旨句）Take my friend, Bob, as an example. Bob had gone todozens of countries with the money he made from playing video games.Thus, when deciding which country to go to for this summer holiday, hedid not have to get his parents' permission because he could afford iton his own. （例证） However, for young people in the past, theycouldn't make money so easily. （一句话总结）</p><p>Indeed, parents always have a meaningful say when we are makingdecisions. We may listen to their suggestions considering that they havemore experience. Thus, some people may think that children now stilldepend on their parents to make decisions. （让步）However, nowadays,the culture has changed a lot. Teenagers now focus more on freedom andare willing to decide independently. In addition, parents now also wantto let their children make decisions so that they can grow up during theprocess of making decisions. （分析利大于弊）In this case, young peopleare becoming better and better at making decisions on their own.（一句话总结）</p><p>All in all, from what has been discussed above, we can safelyconclude that young people now are better able to make decisions abouttheir own lives, especially with the help of modern technology and thedevelopment of the economy. （总结全文继续套模板）</p></div></div><p>按照这样的固定思维去写，一篇 500+的文章简直是信手拈来。刚开始练可能会超时，这都不要紧，只要坚持按一种思路练下去，逐渐形成一种固化思维，写作会越来越容易越来越快。练到最后，你会感觉到，如果不是时间的限制，我可以永远写下去。</p><p>最后再简单总结下独立写作：编，可劲儿编。</p><p>另外，据知情人士报道，托福写作已经全面取消了人工阅卷部分，完全依靠机判。那么我们就更可以肆无忌惮地虚构了，机器又不知道你写的是真的还是假的。注意，一定要减少拼写和语法错误，机器判卷很严格，不要因为这些小错误失分，当然这都是可以通过大量练习改进的。</p><p>希望本篇文章能对大家的写作有所帮助。最后，祝大家早日杀 T。</p><h3 id="练习">练习</h3><p>想要提高分数，光是看别人写是肯定不行的，一定要亲自练习写作。我在考试前大概写过15 篇左右的作文，考试前几天自己模拟了几个 TPO作文，刚开始我写作文也很慢很慢，但是练习次数多了，速度就上去了，就开始掐时间练习了，严格模拟考试的时间。</p><p>我每次写完作文，都会用考满分的 <ahref="https://toefl.kmf.com/mock/27/0">E-Rater</a> 评分，号称是 ETS官方提供的，用它可以检测出自己的小毛病，比如格式呀，标点的运用呀，语法问题呀等等，还可以了解ETS 写作的判分标准。</p><p>托福写作里面，很重要的一点就是横向扩写，比如，我们想表达“做运动可以保持身体健康”，我会扩成”做运动，比如打篮球，游泳，慢跑，学瑜伽和太极，可以保持身体健康“。再比如，在一次考试里，我想表达“现在的年轻人有压力”，我写的是“现在的年轻人，被各种各样的工作任务充斥着生活，期待着找到满意有前景的工作，赚大钱，overshadow同龄人等等，有着很大的压力。”</p><p>通过考了几次托福考试以及用 E-Rater检测的经验来看，在水平没什么变化的前提下，扩写句子，小例子写的多的时候得的分就高。</p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>样例</span></div>    <div class="hide-content"><p>题目：You are helping to select a leader for a student organizationor a group. Do you think a person's honesty is the most crucialcharacteristic of being a leader?</p><p>In the past several decades, tremendous progress has taken placeworldwide. For example, the continuous development of the economycoupled with burgeoning technology is always in the fast lane, leadingto a massive gap between how people interact and cooperate several yearsbefore and nowadays, which has thoroughly changed the landscape ofteamwork and leadership. Coming along with this phenomenon is a heateddebate on the most critical characteristic of being a leader. Ask theman on the street, and the chances are that he main say something like,"I believe that profound knowledge or decision-making capability shouldbe attached to the most significant importance," or "deep learning ordecision-making capability should be connected to the most criticalmatter when selecting a team leader." But these formulae may lose their'magic nowadays. Undoubtedly, successful leaders may have various kindsof characteristics, such as sincerity and loyalty. However, after anin-depth analysis of this debate, contrary to mentioned opinions, Icontend that honesty is superior to other underlying qualities for thesereasons elaborated below as the foundation of developing an organizationor a group.</p><p>What should be prioritized is that leader's honesty is conducive tothe whole team to complete the work efficiently by increasing theefficiency of mutual communication between each team member. To beginwith, if the team leader is always honest, the team members willprobably be more open with other team members. Thus, they don't need topretend that they are capable of conducting a hard job beyond theircompetence to let other team members approve of their ability andstrength. They don't need to pretend or even lie about this competence,so the team leader can quickly know each member's capability andallocate everyone with their most suitable work. In contrast, if theteam leader is not always honest and lies about his competence, sayinghe can handle a difficult circumstance far beyond his capacity, teammembers will get overwhelmed and stressed, thus leading everyone to lieabout his competence. Consequently, the leader may be misled by teammembers' words and allocate them with difficult jobs over theircompetence. Hence, they may fail to fulfill their work before thedeadline, decreasing the efficiency of the whole team.</p><p>What should be equally worth discussing is that having an honestleader facilitates a strong connection between the superior and thesubordinates and a harmonious relationship between the team and itsclients. It is widely recognized that all employees love leaders whokeep real. To explain it further, honest leaders usually analyze andaddress problems impartially and objectively, which would win themrespect from their subordinates, so that it is much easier to create apleasant working environment; contrarily, leaders' dishonesty wouldleave a distorted impression on the employees, let alone hoping toreceive esteem from them. Moreover, not only do employees prefer anhonest leader but so do the clients the organization serves. Take mynephew David as an example. He works in a startup information technologycompany named Pony, where his fourteen cooperators in his team are ledby Ms. Yang, a young and promising leader who is always honest to allhis subordinates, leading to a harmonious working environment. Eventhough Ms. Yang only got his bachelor's degree in a regular university,everyone appreciates his honesty and sincerity and works hard for theirteam under his leadership.</p><p>Specifically, integrity makes it possible for leaders to attractclients since frank leaders punctiliously fulfill the commitment andaccomplish tasks correctly and punctually. When involved ininsurmountable problems, these leaders still actively confrontembarrassing situations and give feedback to their clients in case ofmore trouble. However, how could leaders who lack honesty, who seemprone to deceive or even hurts clients, could win popularity andsatisfaction from their clients? Efficiency, the crucial element ofpeople's work, will be improved by a leader with sincerity.Interpersonal relationship relationships, the critical component ofpersonal development, will be strengthened by a frank leader.</p><p>To conclude, only by keeping honest can a leader guide anorganization or a group to maximize their benefits.</p></div></div><p>那该怎么用这个框架呢，我用一道题目题再举个栗子，说一下我的思考过程，题目是Do you agree or disagree, playing video games has more negativeinfluence than positive ones on children .我选择同意，负面影响更多。我会想出为什么玩游戏对孩子负面影响更大的四个理由，比如，玩游戏会使得孩子久坐不运动，有害身体健康；在玩电子游戏的时候，孩子长时间看电子屏幕，导致眼睛疲倦干涩，甚至近视，损害视力；长时间沉迷于电子游戏会使得孩子们变得懒惰、注意力下降、抗拒上学，学习成绩下降等；电子游戏中经常包含一些暴力影像，孩子容易受其影响产生暴力倾向。然后把这四个理由归结成两大类，前两个理由可以归结为电子游戏对孩子们的身体健康有更多的负面影响，这个便是第一个分论点；后两个理由可以归结为电子游戏对青年人的心理健康有更多的负面影响，这个是第二个分论点。这样，一篇文章总体结构就确定下来了。然后我们就需要安排中间段了，以其中一个中间段为例：电子游戏对孩子们的心理健康有更多的负面影响（中间段首句必须是分论点）。</p><p>To begin with, we can never ignore the terrible impact of viewingsome information about violence when playing video games on increasingchildren’s potential for aggression. (玩电子游戏会导致violence.) Indetail, video games, imparting children with wrong values that cruelbehaviors are recommended, always attract and invite children to play,desensitizing them toward savagery. With distorted perspectivesencouraged and tendencies toward violence increased, the younggeneration is more likely to commit violent crimes, such as robberies ormurders, putting society into a precarious and jeopardizing situation.(展开讲为什么玩游戏会导致violence）In contrast, access to brutality willbe denied when children seldom watch movies and television programs.（对比，不玩游戏则不会使孩子产生暴力倾向.) 接下来写，“玩电子游戏会导致laziness，“与前面“玩电子游戏会导致violence”结构相同。</p><p>刚开始写作文的时候，自己写的很慢，所以会严格依据框架的格式来写，慢慢的，我的速度快起来后，写的字数也多了，那我就会在展开的部分（上段中解释为什么玩游戏会导致violence的部分）多写一些内容。比如这样：</p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>参考范文</span></div>    <div class="hide-content"><p>题目， Do you agree or disagree, getting advice from older friends ismore valuable than from friends of the same age as yours.我选择同意,因为it is much more advantageous and essential for bothstudents and adults to receive advice from older friends.</p><p>What must be prioritized is that asking older friends for suggestionsinstead of friends of the same age is conducive to students’ academicwork and mental health.</p><p>（分论点1，对于学生好）To begin with, it is taking older friends’opinions that helps students to deal with problems effectively andefficiently. In detail, students, occupied with many courses andassignments, are inevitably confronted with enigmas and difficulties intheir studies, which could not be solved with their superficialperceptions and limited capability of logical thinking. Older friends,who have already had a thorough mastery of the knowledge that studentsare studying and gotten through the same process of being in theconfrontation of adversities and addressing the problems successfully,are competent and proficient in giving the most productive way to getquestions solved according to their own experience.（这里的展开部分写了两句话）Otherwise, friends of students’ age may beas confused as students themselves, let alone presenting rationalsolutions to the questions.</p><p>（对比）Additionally, we should never ignore the significance oflistening to older friends’ ideas to build a stable mental condition.More specifically, in the hustle and bustle of modern-daily life,overwhelmed by the astronomical burden of parents and teachers, studentsare always concerned with different pressure levels. Older friends, whoare sophisticated in combating mental health problems, can offerstudents the most potent stress-shrinking strategies and encourage themto face the pressure bravely so that students are more likely to copewith their stress and keep a good mood. （这里的展开部分也写了两句话）However, sensible advice is unavailable from friends of the same age,who are also struggling with the astronomical pressure and sufferingfrom foul mood, with whom students may trigger more negative feelingsthrough talking. （对比） what should be equally worth discussing isthat adults, by taking advice from older friends, other than friends ofthe same age, can harvest and reap lots of benefits due to thecontributions to securing jobs and getting promoted.</p><p>（分论点2，对于成年人好） Initially, the older a person’s friend is,the more skills and experience of locating a satisfactory job they canaccumulate, so that they are more capable of bringing up helpfulinformation that is not on the person’s radar before. To be morespecific, an older friend may teach a person a way to win competitiveedges, such as attending professional training before graduation,developing time management skills, teamwork spirits, interpersonalskills, and practicing interview techniques, all of which make aconcerted effort to prepare the person for a bright career prospect. Incontrast, such a plethora of knowledge and skills, indispensableelements toward a rewarding job, cannot be provided by friends of thesame age with full and wholehearted support, who are afraid of beingovershadowed by their peers in the fierce competition in the workplace.Moreover, not only can listening to old friends help adults seekgratifying jobs, but it also motivates adults to climb the careerladders. To explain it further, older friends, with the great benefitsof hindsight, have a more thorough and intelligent understanding ofevents happening in professional life. Hence, they draw lessons fromexperiences they came to grief and summarize ways to get along withco-workers well, satisfy clients and impress their superiors. Directedby the old friends in detail, adults discard the dross and select theessence to try their best in the work field, bringing them speedypromotion. （这里的展开部分写了2句话） Contrarily, even worldly friendsof the same age cannot comprehend how to get promoted personally, not tomention help others. （对比）</p></div></div><p>托福考试大作文的时间只有三十分钟，并且最好把作文写到 500字以上，所以考场上的时间不容许我们浪费。我们平时最好有一个固定的结构框架，就像上面这样，考试的时候按部就班的按照这个思路拆解题目就好啦。</p><p>我在链接的资料包里面放了黎老师写作的所有资料，其中有一个资料叫做信手拈词，非常推荐大家背下来，它是按照教育、工作、生活、品质、社会、友谊、政府、环境、媒体等话题分为9类，每一类都是这一话题下最好背下来提升写作水平的单词和短语，还有一篇叫做万金油，里面是可以用在各种话题内的短语和单词。语法突破、两分钟破题、点句成金、2014- 2019 真题破题思路都是超级棒的文件。</p>]]></content>
    
    
    <summary type="html">别无他法，只得如此...</summary>
    
    
    
    <category term="课程" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="2022夏季" scheme="http://example.com/tags/2022%E5%A4%8F%E5%AD%A3/"/>
    
  </entry>
  
  <entry>
    <title>交流琐记——邓俊辉老师（二）</title>
    <link href="http://example.com/2022/07/23/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/talk_with_dg/"/>
    <id>http://example.com/2022/07/23/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/talk_with_dg/</id>
    <published>2022-07-23T06:29:28.830Z</published>
    <updated>2022-11-17T08:27:58.478Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="readme">Readme</h1><p>前几天看文琦的期中总结不免焦虑，感觉他人的生活在步入正轨，而我的生活在节节败退。我顺着n+e 的博客的这几段：</p><blockquote><h3 id="毕业">毕业</h3><p>没啥感觉，和 THU 一样</p><p>就随便拍了几张毕业照，穿着袍子，聚了个餐。回想起来当初自己的<ahref="https://trinkle23897.github.io/posts/thu-4th-year#未来">目标</a>是“更主要的是增长见识，看看有没有什么有趣的事情可以做，顺便结交一些有趣的人”，现在看来见识没怎么增长，有趣的事情也没怎么做，有趣的人也没怎么结交。真羡慕自己大四毕业那段时间的<ahref="https://trinkle23897.github.io/posts/thu-4th-year#以及一些杂七杂八的看法">想法</a>（这是我第一次羡慕过去的自己）。</p></blockquote><p>顺着博客的链接，追溯到了他大四所写的毕业纪念，而后找到了张明瑞学长的经典博文——<ahref="https://zhang-ming-rui.gitbook.io/when-rocket-launches/er-da-xue-chu-qi/jiao_liu_suo_ji_er_2014_2014_deng_jun_hui_lao_shi"><strong>交流琐记二——邓俊辉老师</strong></a></p><blockquote><p>“我们前后找了几十年以来的毕业生，在十六万人中分析了五百人，得到了结论。结果发现很多结果出乎清华校方的意料。</p><p>比如，我们分析了成绩因素，按理说成绩好应该更成功吧？但结果是，成绩对以后的发展并没有影响，就是说，成绩好并不代表发展好，当然也不可能发展差对吧。这是很出乎校方意料的一点。</p><p>那社工呢？大家都认为如果做了什么学生会主席、社会工作可能对未来发展有所帮助，结果还是没有关系。没有关系意思是有没有这些优势都不影响以后发展。</p><p>那么家庭影响应该足够重要了吧，比如有的家长眼界很高，有先进的观念，培养孩子很有方法，这是个影响因素吗？不是。</p><p>地域呢？比如有的同学来自偏远地区，有的在大城市，这是影响因素吗？不是。这些都不是，那我们发现了什么呢？</p><p><strong>我们在二十多个因素里，唯一发现很多人都具有的一个共同点就是，他们都很早地开始思考自己的未来并且着手做准备。</strong></p></blockquote><p>看完了之后，我似乎没那么焦虑了。实际上，在 n+e的博客里，读到这些话是在去年夏天（一系列崩溃事件开始前的几天），然而那时这几句话我印象极其深刻，却不知道是邓公所言。一年后再读，才发现竟是邓公的教诲，顿时感觉一切世界线居然连接了起来，甚是巧妙。</p><p>上次和邓老师交流，已是半年之前，相关的<ahref="https://zhaochenyang20.github.io/2022/01/08/%E5%87%BA%E5%9B%BD/%E8%A7%84%E5%88%99%E4%B8%8E%E6%B0%94%E8%B4%A8/">文档在此</a>。出于对邓老师的尊重，这份文档不宜公开，如若你有兴趣，可以联系我索要密码。总之，我已有半年未与邓老师交流，半年来自己的变化不可谓不大，所以这次下定决心，再与邓老师交流一番，主要讨论的问题集中在科研的困惑上。</p><h1 id="开端">开端</h1><p>每次写谈话内容前，我认为有必要对交流对象作简要介绍：</p><div class="note success modern"><p>邓俊辉老师，何许人也？</p><p>邓俊辉老师，计算机系 2018 级系主任，86班班主任，数据结构课程教师，是全校最受学生欢迎的课程老师之一，在学堂在线（MOOC）上开授数据结构课程，超过5 万人次选修。</p><p>邓老师的课堂幽默风趣，讲解鞭辟入里，深受学生敬爱。对于计算机系同学，邓老师令人闻风丧胆的DSA 课堂声名赫赫，然而除开邓老师面向系内的 DSA课程，邓老师还开设过写作与沟通、面向未央书院的<strong>数据结构与算法</strong>课程。</p></div><p>这次交流主要是围绕着我对科研的困惑展开。于是我去除掉了开头关于疫情等等事宜的杂谈。</p><h1 id="对于-cv-的困惑">对于 CV 的困惑</h1><p>我向邓老师概述了我在实验室的工作困惑，感觉在计算机视觉一年参与研究并没有很能够把握这个领域的研究全貌，我自己理解的研究应该和多年前看的一幅经典照片类似。</p><ol type="1"><li>Imagine a circle that contains all of human knowledge:</li></ol><p><img src="https://matt.might.net/articles/phd-school-in-pictures/images/PhDKnowledge.001.jpg" style="zoom: 33%;" /></p><ol start="2" type="1"><li>By the time you finish elementary school, you know a little:</li></ol><p><img src="https://matt.might.net/articles/phd-school-in-pictures/images/PhDKnowledge.002.jpg" style="zoom: 33%;" /></p><ol start="3" type="1"><li>By the time you finish high school, you know a bit more:</li></ol><p><img src="https://matt.might.net/articles/phd-school-in-pictures/images/PhDKnowledge.003.jpg" style="zoom: 33%;" /></p><ol start="4" type="1"><li>With a bachelor's degree, you gain a specialty:</li></ol><p><img src="https://matt.might.net/articles/phd-school-in-pictures/images/PhDKnowledge.004.jpg" style="zoom: 33%;" /></p><ol start="5" type="1"><li>A master's degree deepens that specialty:</li></ol><p><img src="https://matt.might.net/articles/phd-school-in-pictures/images/PhDKnowledge.005.jpg" style="zoom: 33%;" /></p><ol start="6" type="1"><li>Reading research papers takes you to the edge of humanknowledge:</li></ol><p><img src="https://matt.might.net/articles/phd-school-in-pictures/images/PhDKnowledge.006.jpg" style="zoom: 33%;" /></p><ol start="7" type="1"><li>Once you're at the boundary, you focus:</li></ol><p><img src="https://matt.might.net/articles/phd-school-in-pictures/images/PhDKnowledge.007.jpg" style="zoom: 33%;" /></p><ol start="8" type="1"><li>You push at the boundary for a few years:</li></ol><p><img src="https://matt.might.net/articles/phd-school-in-pictures/images/PhDKnowledge.008.jpg" style="zoom: 33%;" /></p><ol start="9" type="1"><li>Until one day, the boundary gives way:</li></ol><p><img src="https://matt.might.net/articles/phd-school-in-pictures/images/PhDKnowledge.009.jpg" style="zoom: 33%;" /></p><ol start="10" type="1"><li>And, that dent you've made is called a Ph.D.:</li></ol><p><img src="https://matt.might.net/articles/phd-school-in-pictures/images/PhDKnowledge.010.jpg" style="zoom: 33%;" /></p><ol start="11" type="1"><li>Of course, the world looks different to you now:</li></ol><p><img src="https://matt.might.net/articles/phd-school-in-pictures/images/PhDKnowledge.011.jpg" style="zoom: 33%;" /></p><ol start="12" type="1"><li>So, don't forget the bigger picture:</li></ol><p><img src="https://matt.might.net/articles/phd-school-in-pictures/images/PhDKnowledge.012.jpg" style="zoom: 33%;" /></p><p>而在 AIR一年的工作，让我感到非常困惑，我并没有完成对于一个领域的鸟瞰，就在参与前沿的工作。我还对这个领域的boundary知之甚少，就作为螺丝钉被拧了上去。我做了个比喻，这就好比我去名匠制作宝刀。我以为会从整体的大致流程开始，没想到一上手的任务就是学会在刀鞘上刻字，然后再学会在刀把上镌刻龙纹…这似乎与我想象的研究不太一样。</p><p>参与工作一年，我不能说我是在研究计算机视觉，我只有些非常粗浅的深度学习知识，能够似是而非地把transformer 的 Q，K，V矩阵含义说出来，然而我却不能理解其后的想法。何况我的深度学习基础本就不够扎实，然而实验室的研究早已超脱了这些最基础的知识，除了术语之外几乎没什么相似的。</p><p>我说完了我的困惑，邓老师开始谈起了他的想法。</p><p>首先是做研究，这个问题应该并不是实验室的问题，而是领域的共性，计算机视觉和图形学这两个方向本身就是应用性胜过科学性，我感觉大多数时候我们都是在做应用而非科学是领域现状。而且有时我感到研究不够本质并非是自己的问题，只能说是本质的研究的确是很难，若非天才，则需要非常深厚的学识功底才能有所作为。另一方面，自己在实验室感觉并没有一种很明确的指导性，并不像是在学习，更多是在应用，可能也与接触的学长学姐有关系。</p><p>其次，邓老师肯定了我的改变，他指出我已经不再像以往那般专注于事物的细枝末节，而是在为着很长远的研究做考虑，这是好事。</p><p>我之前挺怀疑，我在实验室的体验究竟是实验室的问题，还是我的问题，还是领域就是这样。听闻邓老师的话，可能我对视觉领域的认知并不到位，心中不免解了许多心结。</p><h1 id="同侪压力">同侪压力</h1><p>我接着谈到，可能我一个人静心思考，其实对于先出国念硕士，而后工作，接着再考虑是否读博这件事情还是蛮坚定的，想来这是很适合我的选择。我也并不希望自己仓促之间决定读博，这点阐述过很久了。以往我是认为大多人都不适合本科毕业直博，现在我不想叙述大多人了。</p><p>不想讨论大多人的原因有两点。一方面，我给邓老师讲，看了周围的同龄人，我不免觉得自己研究能力不佳，心生畏惧。邓公开导我，实际上大多科研工作也是一波三折，大器晚成，陶哲轩之类的年少有为实属不易。另一方面，邓老师认为，我应该积极地去做到洒扫，看看自己真正的需求是什么。</p><h2 id="一曰洒扫">一曰洒扫</h2><p>邓老师给我讲述了他在<ahref="https://www.tsinghua.edu.cn/info/2061/61450.htm">七字班开学典礼的发言</a>。他鼓励七字班同学们积极做到“洒扫”与“事长”。</p><blockquote><p>所谓“洒扫”，字面上无非是洒洒水、扫扫地，鸡毛蒜皮的小事而已，为何要强调呢？因为照顾好自己的身体，是自立的第一步。如果你身上还或多或少地留有些许“娇”气，那么从今天开始就来扫除它们吧：把叠被子、洗茶杯、扫宿舍、理书案变成日常习惯；学会理剪梳洗，以及根据时令、场合恰当地着装。还有更重要地，学会合理而规律地作息起居。</p><p>　　推而广之，“洒扫”又何尝不是对我们的内心而言呢？在纷扰、诱惑四布的当下，要想有一份踏实淡定的心境来念书，必须学会<strong>过滤杂音、摒弃杂念</strong>。所谓“吐故纳新”，减法做好了，才能更好地做加法。那么，具体要从哪些方面来做减法呢？</p><p>　　首先要扫除“傲”气。成绩、荣誉和光环只属于过去，不应成为你继续前行的羁绊。只有做好重新再来、再接再厉的心理准备，正心诚意，才能轻装上阵。</p><p>　　要扫除“习”气。大学阶段学习的内容、形式及要求都有了深刻变化，你要更加兼顾学习的效果和效率，懂得为自己确定目标、制定计划，学会自主学习。针对过度碎片化的思维和交流方式，请学会合理有度地使用现代化信息工具：不要为了在虚拟世界中苦刷“存在感”，而忘却自我的真实存在；更不要因为担忧于种种网络“盛宴”的缺席而终日惶惶，以致为其所累、所困、所误。给自己留出足够的时间和空间吧，去阅读、沉思、咀嚼、畅想，去神聊、质疑、争论抑或发呆。</p><p>　　要扫除“躁”气。大学的课程给你的第一感觉未必是快乐，艰辛与苦涩往往是必经的味道，不能急于求成，请学会透过这些味道体会乐趣、享受过程。所谓“举一反三”，别在乎学得多少，而要看是否学得透彻、融会贯通；所谓“先传后倦”，别在乎学得迟早，而要看能否保持那种“饥渴”状态，持续成长。</p><p>　　最重要的，是扫除“俗”气。如果将读书局限于知识与技能，降格为个人谋生、发达的工具，就会功利而短视地对所读之书妄加取舍。陈寅恪先生说“士之读书治学，盖将以脱心志于俗谛之桎梏”，是的，读书的目的毕竟在于完善自身、提升心志，最终使你成为能够自觉肩负时代使命之“士”。大学的意义，正在于使你从这种使命的层面去重新认识自己。</p><p>　　还要扫除“乖”气。当下的另一“俗谛”，是片面夸大技术进步之于人类社会发展的作用。实际上，人类社会的发展既非有公式可循的推导，亦非有方程可依的反应，更不是凭借机器的计算，需要综合哲学文化、人文艺术、科学技术等各个方面的最新成果。面对人类文明的每一部分，都请保持应有的敬畏；面对每一轮的流行热潮，也请保持一定的清醒。比如，去年作此发言的是茅盾文学奖得主格非（刘勇）教授，千万别因为看到今年换成了一个计算机系人工智能实验室的老师，就以为AI 已经替代了文学艺术。</p></blockquote><p>邓老师自然没有复述这段讲话，只是例举了简单的道理。按照资本主义的消费现状，我们大多数需求都是被刺激而产生的。实际上人本质的需求无非就是生老病死有所养，那么除此之外呢，思索下还有什么是必须的。转念一想，你会发现实际上大部分需求都是不必要的。邓老师谈到他最近在读亚当斯密传记，亚当斯密在牛津念书时，生活清闲，课程很少，也并不与同学比较什么，也并不急着少年有成。虽然那是十八世纪的事情，但是我们现在又能否在清华园找到自己的本质需求，不被太多外界的信息而干扰呢？</p><p>我这就想了想，我所渴求的根本需求有什么？</p><ol type="1"><li>我想做一个作家，学会与人沟通，记录人世间的事情。</li><li>我想做一个计算机科学家，能够掌握先进的生产力，实现我的社会主张。</li><li>我还渴求着感情，我以前认为这并非必须，然而我的确想见，这是刻入基因的需求，只是并非任何一个阶段的必须。</li></ol><p>如此想来，我更想去乘着大学的时间，学习写作，学习计算机科学的知识，学习一些技术，供我将来工作谋生，乃至于攻读博士学位。我仔细想了想，掌握技术是做出成果的充分条件，然而我并不认为挂名了一些成果等同于掌握了技术。我也时常见到朋友圈有朋友秀出了他们在实验室挂名蹭到的三作+，然而我们彼此都清楚并没有什么本质的能力提升。</p><p>想到这里，我在研究上的焦虑感少了很多。谁真正掌握了技术和能力我自然心里清楚。而在计算机领域工作，虚名只是浮尘，核心的能力还是技术水平。</p><p>我更是想想，我做的事情其实并没有违背我的根本需求。我想要与人沟通，想要当一个作家，于是参与了一些社工工作，我想要学习我感兴趣的技术，哪怕没有功利的产出，也不觉得遗憾。</p><p>也许我也该时时想想，拂去身上的尘土，涤洗心中的焦虑与不安，回看自身真正的需求。</p><h2 id="其二曰事长">其二曰事长</h2><blockquote><p>再来说“事长”，善待父母、长辈，如今则更多地体现为精神上的理解和尊重。每一次毕业之后，我们都会不自觉地经历一段心理膨胀期。现在的你，或许正开始发现父母这里不科学、不卫生，那里不经济、不大器，这很危险。请记住，父母不仅曾经养育过你，现在仍是你最坚强的后盾，将来更是你精神上终极的维系、永远的依恋！</p><p>　　广而言之，“事长”也包括厚待他人，以及将自己置于团队和集体当中。给老师写的email有无文采并不重要，但别忘了称呼与落款。开班会时谁先发言无所谓，但要记着相互递茶倒水、彼此让座。同学聚会时谁来埋单无所谓，但要晓得如何点菜更能兼顾大家的口味。运动会上是不是体能之星无所谓，但加油鼓劲、送水递毛巾却要人人争先。组队参赛、做大实验时，学霸、学渣不论，但陷入困境时一定要抢着背锅、迎难而上。</p><p>　　进一步引申开来，“事长”也涵盖对传统的认同与继承。厚古薄今固然不必，但数典忘祖却万万不能。人类文明发展进程的主旋律毕竟是传承，从牛顿力学到相对论，从图灵机到冯·诺依曼架构，创新总是以前人的经验为参考，以前人的成就为基础。年轻人应该首先了解自己的民族，并从她的历史、文化中汲取智慧与力量。作为中国人，英文要念，中文更要学，经典也不妨多读。</p></blockquote><p>邓老师接着讨论了事长的话题。首先是要积极与人交流，与前人交流能够收获众多的跳脱当前处境的见识。他还鼓励了我经常与MashPlant n+e此类上古学长交流的习惯。再者，与人沟通还有更多层面，譬如和其他学科的人沟通，与其他领域的人沟通。不要因为你在研究计算机视觉，你的视野也塌缩到了计算机视觉这个角落。多与人沟通，但是不必焦虑于他人所成，这些都是好事。</p><h1 id="尾声">尾声</h1><p>邓老师最后给我讲了讲我喜提 3.3的原因，其一是考试成绩不佳，其二是我的参与分在尹老师课堂被记为了 0分。虽然之前有学长给我说，我能够严格按照邓老师课堂的评分标准来评分，然而似乎的确不太能这么做。我感到心里一时很爽然，又觉得解脱了一些心结。</p><p>我给邓老师说，其实的确影响不大，我感觉在成绩上与人内卷的边际递减效应太过严重，我大二学年的成绩不如大一，然而我的确感觉有了前所未有的成长。</p><p>虽然把 DSA 从 3.3 抬到3.6，我几乎能够让我两年在班级的排名和年级的排名除二，然而这会对我有什么很本质的改变吗？我还是我，我的能力是我的，我的未来是我的，我的故事是我的，我将会继续前进下去。DSA这门课的成绩就这样吧，我已经感觉无所谓了。一方面，我的绩点焦虑已经被治好了。另一方面，除了绩点的条条框框，这世界还有千千万万。</p>]]></content>
    
    
    <summary type="html">一曰洒扫，二曰事长...</summary>
    
    
    
    <category term="写作" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/"/>
    
    <category term="交流" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/%E4%BA%A4%E6%B5%81/"/>
    
    
    <category term="人类社会观察" scheme="http://example.com/tags/%E4%BA%BA%E7%B1%BB%E7%A4%BE%E4%BC%9A%E8%A7%82%E5%AF%9F/"/>
    
    <category term="2022夏季" scheme="http://example.com/tags/2022%E5%A4%8F%E5%AD%A3/"/>
    
    <category term="科研" scheme="http://example.com/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>交流琐记——黄明烈老师</title>
    <link href="http://example.com/2022/07/23/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/talk_with_hml/"/>
    <id>http://example.com/2022/07/23/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/talk_with_hml/</id>
    <published>2022-07-23T06:29:28.830Z</published>
    <updated>2022-11-15T14:32:13.484Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="readme">Readme</h1><p>在每次 talk 之前，我照例简单介绍 talk 的背景和 talk的对象。这次我找黄明烈老师沟通了一小时，有了新的挑战和启发。首先介绍<ahref="http://coai.cs.tsinghua.edu.cn/hml">黄明烈老师</a>：</p><div class="note info modern"><p>黄明烈老师是贵系博导，研究方向涵盖广义自然语言处理的各个方面，如语言理解、语言生成、语言匹配与推理，具体应用包括自动问答、阅读理解、对话系统、情感分析。</p><p>其卓越的研究工作有目共睹，与此同时，黄老师还讲授大一学年必修课《面向对象程序设计基础》与专业选修课程《人工神经网络》。两门课程工作量较大，然而对我而言的确很有启发。</p></div><p>这次找他沟通的起因说来惭愧，11 月底大概率会开始 UGVR的申请，而我希望能够从黄老师那儿得到一封课程推荐信。不过 Nauy 给我说明了UGVR 的 match 程度堪忧，最后我们实际上交流了很多我对目前（12 月份ACL）工作的想法，希望得到黄老师的启发。虽然黄老师对于目前工作没有多加讨论，然而给我了些有趣的机会。</p><h1 id="开端">开端</h1><p>我一番折腾，在 8 点前 10 分钟叩开了黄老师工位的门。</p><p>黄老师见了我的打扮，估计是感到了诧异——的确我的穿着和发型非常 out ofthe distribution of typical CS departmentstudents。然而，我说了自己的考虑，人生本来就没有所谓的大多数，我希望追求自己的理想，做自己想做的事情。</p><p>我接着讲到去年的研究，在 CV 上遇到的困扰和阻碍，而后是对于量子和 HCI方向的体验，虽然最终都无所世俗的收获，然而他说——也是经历和锻炼。</p><h1 id="目前的工作">目前的工作</h1><p>我向黄老师概述了我在商汤的工作，讲到了工作的两个创新点——更低 level 的instruction 以及 opensourceaugmentation，黄老师听了表示赞同；不过他也指出在数学原理上差了些味道。当然，NLP研究的数学原理不够深刻一直为人诟病，这他也认可。接着他讲了组里博士生的一些工作，比如一篇他们组PhD 做的 citation 2k 的文章，关于 object oriented attention的想法，虽然方法很简单，然而启发了之后一些 attention 的设计，属于是insightful 且 impartful的工作。而后，黄老师问了我组组里的卡的规模，具体的数字不便展开细说，然而我们的研究的确黄老师很快就能够get到全貌，并且问出了一些细节工作，毕竟也是职业科学家的火眼金睛，容不得弄虚作假。</p><p>更让我惊讶的是，我提出了一个模型细节——类似 GAN的训练思路，黄老师即刻指出了他读过这个工作；而我甚至认为这个工作其实相对很小众了，不愧是久负盛名的NLP 大师。</p><h1 id="黄老师组里的工作">黄老师组里的工作</h1><p>黄老师给我介绍了他们组的工作情况，组里的 PhD 也在做 instruction方向的工作，和 instruction tuning的方向不同，主要是做对话系统。我认为对话系统和 few shot本质上是相似的，然而黄老师指出他们组的工作主要处理 open domain，和先前Siri等等指令机器人完全不是一个量级。此外，他介绍了自己组里的其他研究，具体细节我已不太清楚，当然，和我早些知道的一样，的确称得上是fundamental 且 basic，容不得浮夸与灌水。</p><p>谈完了他们的对话机器人，黄老师指出了其难点与挑战，并邀请我参与他们组的研究。</p><p>我感谢他的邀请，然而我深知自己的玩心早已收敛，在商汤的工作让我感到幸福而满足，我不希望辜负目前詹老师对我的好意。然而，我提出想要来听一听组会，sync一些他们的工作。黄老师欣然接受，并且介绍了他们组两场组会。第一场在周四下午，主要是应用落地；第二场在周五下午，关于更加basic 的 paper reading，主要是 senior PhD领读，也有优秀的本科生进行分享。</p><div class="note info modern"><p>本科生不容易，课程那么多，时间不多的情况下，很多人就是来玩玩。不来玩的，认真做事情，实际上时间也很有限。时间充足，放养也能有所成果；然而时间有限，那就必须有人带着学习了….</p></div><p>所言极是，虽然我很认可商汤的工作，然而在读 paper上，我还是缺少了很多交流，还是希望广泛学习。</p><h1 id="黄老师组的规模">黄老师组的规模</h1><p>我问了问黄老师组里的规模，主要是关于本科生的数量，其实我心里是有底的，不过系里广泛消耗耗材的风气还是不免让我担心。</p><p>黄老师组里的 PhD 和访问学者有 20 人，而本科生很少——只有 5人。实际上，这几年黄老师组里不参加学术新星，对于本科生的要求也很高。虽然如此，黄老师之前组里也带过很多本科生，也有很优秀的前辈，不过这几年没有大量的本科生了——具体原因我不得而知，然而我赞同这样的风气。</p><p>关于本科生研究，黄老师建议我去参考这篇文章：</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Johannes%20Plenio%20(E-Zuyev2XWo).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">本科生如何做出好的科研</div>  <p>凡事有交代，件件有着落，事事有回音。</p>  <a href='http://coai.cs.tsinghua.edu.cn/hml/media/files/undergraduate-res.pdf'></a>  </figcaption>  </figure>  </div><p>此外，黄老师把我拉进了他们组的本科生群，每周的组会信息会在群里及时通告。我大多不太熟悉，然而只有赵光宇我比较熟悉，不好评价…<!--他玩心太大了，没有什么 focus，毕竟他还学术新星去了王运涛那儿…-->此外，我还看到了三月，世界很小。之前三月也给我说过他申请过黄老师组和刘知远组的PhD，最后还是去了 Harvard / MIT。</p><h1 id="尾声">尾声</h1><p>和黄老师的交流让我看到了新的挑战和机遇，我知道自己的时间不足，且没什么玩心，可预见的将来不可能参与他们组的工作，然而我希望能够听一听组会，sync更多 NLP 的文章，也多和 senior PhD 有更多探讨。</p><p>在我们谈话的过程中，黄老师的孩子全程在一旁写数学作业——小孩五年级，看上去非常乖，估计是经常和黄老师待在一起，见了很多奇怪的人和事情。最后，我问黄老师，他写的《现代自然语言生成》这本书如何，他当即说送我一本，我还讨要了签名。</p><div class="fj-gallery"><p><img src="https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/pic_embed/22_11_15_1.jpg" style="zoom:30%;" /><img src="https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/pic_embed/22_11_15_2.jpg" style="zoom:30%;" /></p>          </div>]]></content>
    
    
    <summary type="html">要做基础的，有影响力的研究...</summary>
    
    
    
    <category term="写作" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/"/>
    
    <category term="交流" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/%E4%BA%A4%E6%B5%81/"/>
    
    
    <category term="人类社会观察" scheme="http://example.com/tags/%E4%BA%BA%E7%B1%BB%E7%A4%BE%E4%BC%9A%E8%A7%82%E5%AF%9F/"/>
    
    <category term="2022秋季" scheme="http://example.com/tags/2022%E7%A7%8B%E5%AD%A3/"/>
    
    <category term="科研" scheme="http://example.com/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>Python 进阶话题</title>
    <link href="http://example.com/2022/07/17/CS/others/Python%20%E8%BF%9B%E9%98%B6%E8%AF%9D%E9%A2%98/"/>
    <id>http://example.com/2022/07/17/CS/others/Python%20%E8%BF%9B%E9%98%B6%E8%AF%9D%E9%A2%98/</id>
    <published>2022-07-17T10:20:06.000Z</published>
    <updated>2022-08-26T15:29:16.297Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="https://raw.githubusercontent.com/zhaochenyang20/zhaochenyang20.github.io/master/img/profile_7.jpg" style="zoom:23%;" /></p><h1 id="python-more-than-python">Python, More than Python</h1><p><strong>By <a href="https://zhaochenyang20.github.io/">Eren Zhao</a>,credited to SAST 2022 Summer Tutorial</strong></p><p><strong>THUCST Class 06</strong></p><p>大家好，这篇文档主要来分享下一些 Python的进阶内容，介绍一些实用技能栈。</p><p>Python有很多开发环境可供选择，我也常常被问起在工作中使用哪一种开发环境。我的答案有时会让人惊讶：我偏爱的开发环境是<a href="http://ipython.org/">IPython</a>加上一个文本编辑器（VSCode）。</p><p>IPython（interactive Python 的简称，即交互式Python）致力于提供“科学计算的全生命周期开发工具”。</p><p>如果将 Python 看作数据科学任务的引擎，那么 IPython就是一个交互式控制面板。除了作为 Python 的一个交互式接口，IPython还提供了一些有用的 Python语法附加功能，本讲义就将介绍其中最有用的一些。</p><p>另外， IPython 被紧密地连接在 <a href="http://jupyter.org">Jupyter项目</a>中。Jupyter Notebook的格式与你此刻正在阅读的页面看起来其实没什么两样，这一章的全部稿件就是用一组IPython Notebook 写成的。</p><p>IPython 就是用 Python进行有效的交互式科学计算和数据密集型计算。我们将会介绍 IPython 对 Python数据科学非常优雅的功能，尤其关注它在语法上超越了 Python 的特性。</p><p>接下来将深入介绍一些更有用的“魔法命令”，这些命令可以为与创建和使用数据科学代码相关的常规任务提高速度。最后将介绍IPython Notebook的一些特性，这些特性对于理解数据和分享结果非常有用。</p><h1 id="help-and-documentation-in-ipython">Help and Documentation inIPython</h1><p>当一个技术型思维的人要帮助他的朋友、家人或同事解决计算机方面的问题时，大多数时候，重要的不是知道答案，而是知道如何快速找到答案，因此，我认为本节中讨论的工具对我的日常工作流程的贡献是最大的。</p><p>在数据科学领域也一样，通过搜索在线文档、邮件列表、Stack Overflow等网络资源都可以获得丰富的信息，即使（尤其是）你曾经搜索过这个主题。要想成为一名高效的数据科学实践者，重要的不是记住针对每个场景应该使用的工具或命令，而是学习如何有效地找到未知信息，无论是通过搜索引擎还是其他方式。</p><p>IPython 和 Jupyter最大的用处之一就是能缩短用户与帮助文档和搜索间的距离，帮助用户高效完成工作。虽然网络搜索在解答复杂问题时非常有用，但是仅仅使用IPython 就能找到大量的信息了。以下是仅通过几次按键，IPython就可以帮你解答的一些问题。</p><p>• 我如何调用这个函数？这个函数有哪些参数和选项？ • 这个 Python对象的源代码是怎样的？ •我导入的包中有什么？这个对象有哪些属性和方法？</p><p>接下来将介绍如何通过 IPython 工具来快速获取这些信息。符号<code>?</code> 用于浏览文档，符号 <code>??</code> 用于浏览源代码，而 Tab键可以用于自动补全。</p><h2 id="accessing-documentation-with">Accessing Documentation with<code>?</code></h2><p>Python语言和其数据科学生态系统是应用户需求而创建的，而用户的很大一部分需求就是获取文档。</p><p>每一个 Python 对象都有一个字符串的引用，该字符串即 docstring。</p><p>大多数情况下，该字符串包含对象的简要介绍和使用方法。Python 内置的help() 函数可以获取这些信息，并且能打印输出结果。</p><p>例如，如果要查看内置的 len 函数的文档，可以按照以下步骤操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [1]: help(len)</span><br><span class="line">Help on built-in function len in module builtins:</span><br><span class="line"></span><br><span class="line">len(...)</span><br><span class="line">    len(object) -&gt; integer</span><br><span class="line"></span><br><span class="line">    Return the number of items of a sequence or mapping.</span><br></pre></td></tr></table></figure><p>根据不同的解释器，这条信息可能会展示为内嵌文本，或者出现在单独的弹出窗口中。</p><p>获取关于一个对象的帮助非常常见，也非常有用，所以 IPython 引入了<code>?</code> 符号作为获取这个文档和其他相关信息的缩写：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [2]: len?</span><br><span class="line">Type:        builtin_function_or_method</span><br><span class="line">String form: &lt;built-in function len&gt;</span><br><span class="line">Namespace:   Python builtin</span><br><span class="line">Docstring:</span><br><span class="line">len(object) -&gt; integer</span><br><span class="line"></span><br><span class="line">Return the number of items of a sequence or mapping.</span><br></pre></td></tr></table></figure><p>这种表示方式几乎适用于一切，包括对象方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [3]: L = [1, 2, 3]</span><br><span class="line">In [4]: L.insert?</span><br><span class="line">Type:        builtin_function_or_method</span><br><span class="line">String form: &lt;built-in method insert of list object at 0x1024b8ea8&gt;</span><br><span class="line">Docstring:   L.insert(index, object) -- insert object before index</span><br></pre></td></tr></table></figure><p>甚至对于对象本身以及相关类型的文档也适用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [5]: L?</span><br><span class="line">Type:        list</span><br><span class="line">String form: [1, 2, 3]</span><br><span class="line">Length:      3</span><br><span class="line">Docstring:</span><br><span class="line">list() -&gt; new empty list</span><br><span class="line">list(iterable) -&gt; new list initialized from iterable&#x27;s items</span><br></pre></td></tr></table></figure><p>重要的是，这种方法也适用于你自己创建的函数或者其他对象！下面定义一个带有docstring 的小函数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [6]: def square(a):</span><br><span class="line">  ....:     &quot;&quot;&quot;Return the square of a.&quot;&quot;&quot;</span><br><span class="line">  ....:     return a ** 2</span><br><span class="line">  ....:</span><br></pre></td></tr></table></figure><p>请注意，为了给函数创建一个docstring，仅仅在第一行放置了一个字符串字面量。由于 docstring通常是多行的，因此按照惯例，用 Python 的三个引号表示多行字符串。</p><p>接下来用 <code>?</code> 符号来找到这个 docstring：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [7]: square?</span><br><span class="line">Type:        function</span><br><span class="line">String form: &lt;function square at 0x103713cb0&gt;</span><br><span class="line">Definition:  square(a)</span><br><span class="line">Docstring:   Return the square of a.</span><br></pre></td></tr></table></figure><p>你应该养成在你写的代码中添加这样的内嵌文档的习惯，这样就可以通过docstring 快速获取文档。</p><h2 id="accessing-source-code-with">Accessing Source Code with<code>??</code></h2><p>由于 Python非常易读，所以你可以通过阅读你感兴趣的对象的源代码得到更高层次的理解。IPython提供了获取源代码的快捷方式（使用两个问号 ??）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [8]: square??</span><br><span class="line">Type:        function</span><br><span class="line">String form: &lt;function square at 0x103713cb0&gt;</span><br><span class="line">Definition:  square(a)</span><br><span class="line">Source:</span><br><span class="line">def square(a):</span><br><span class="line">    &quot;Return the square of a&quot;</span><br><span class="line">    return a ** 2</span><br></pre></td></tr></table></figure><p>对于这样的简单函数，两个问号就可以帮助你深入理解隐含在表面之下的实现细节。</p><p>如果你经常使用 ??后缀，就会发现它有时不能显示源代码。这是因为你查询的对象并不是用 Python实现的，而是用 C 语言或其他编译扩展语言实现的。在这种情况下，??后缀将等同于 ? 后缀。你将会在很多 Python内置对象和类型中发现这样的情况，例如上面示例中提到的 len 函数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [9]: len??</span><br><span class="line">Type:        builtin_function_or_method</span><br><span class="line">String form: &lt;built-in function len&gt;</span><br><span class="line">Namespace:   Python builtin</span><br><span class="line">Docstring:</span><br><span class="line">len(object) -&gt; integer</span><br><span class="line"></span><br><span class="line">Return the number of items of a sequence or mapping.</span><br></pre></td></tr></table></figure><p>? 和 ?? 提供了一个强大又快速的接口，可以查找任何 Python函数或模块的用途信息。</p><h2 id="exploring-modules-with-tab-completion">Exploring Modules withTab-Completion</h2><p>IPython 另一个有用的接口是用 Tab键自动补全和探索对象、模块及命名空间的内容。在接下来的示例中，我们将用&lt;TAB&gt; 来表示 Tab 键。</p><h3 id="tab-completion-of-object-contents">Tab-completion of objectcontents</h3><p>每一个 Python 对象都包含各种属性和方法。和此前讨论的 help函数类似，Python 有一个内置的 dir函数，可以返回一个属性和方法的列表。但是 Tab自动补全接口在实际的应用过程中更简便。要想看到对象所有可用属性的列表，可以输入这个对象的名称，再加上一个句点（.）和Tab 键：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [10]: L.&lt;TAB&gt;</span><br><span class="line">L.append   L.copy     L.extend   L.insert   L.remove   L.sort     </span><br><span class="line">L.clear    L.count    L.index    L.pop      L.reverse  </span><br></pre></td></tr></table></figure><p>为了进一步缩小整个列表，可以输入属性或方法名称的第一个或前几个字符，然后Tab 键将会查找匹配的属性或方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [10]: L.c&lt;TAB&gt;</span><br><span class="line">L.clear  L.copy   L.count  </span><br><span class="line"></span><br><span class="line">In [10]: L.co&lt;TAB&gt;</span><br><span class="line">L.copy   L.count </span><br></pre></td></tr></table></figure><p>如果只有一个选项，按下 Tab键将会把名称自动补全。例如，下面示例中的内容将会马上被 L.count替换：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [10]: L.cou&lt;TAB&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尽管 Python 没有严格区分公共 / 外部属性和私有 /内部属性，但是按照惯例，前面带有下划线表示私有属性或方法。为了清楚起见，这个列表中默认省略了这些私有方法和特殊方法。不过，你可以通过明确地输入一条下划线来把这些私有的属性或方法列出来：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [10]: L._&lt;TAB&gt;</span><br><span class="line">L.__add__           L.__gt__            L.__reduce__</span><br><span class="line">L.__class__         L.__hash__          L.__reduce_ex__</span><br></pre></td></tr></table></figure><p>为了简洁起见，这里只展示了输出的前两行，大部分是 Python特殊的双下划线方法（昵称叫作“dunder 方法”）。</p><h3 id="tab-completion-when-importing">Tab completion whenimporting</h3><p>Tab 自动补全在从包中导入对象时也非常有用。下面用这种方法来查找itertools 包中以 co 开头的所有可导入的对象： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [10]: from itertools import co&lt;TAB&gt;</span><br><span class="line">combinations                   compress</span><br><span class="line">combinations_with_replacement  count</span><br></pre></td></tr></table></figure></p><p>同样，你也可以用 Tab 自动补全来查看你系统中所有可导入的包（这将因你的Python 会话中有哪些第三方脚本和模块可见而不同）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [10]: import &lt;TAB&gt;</span><br><span class="line">Display all 399 possibilities? (y or n)</span><br><span class="line">Crypto              dis                 py_compile</span><br><span class="line">Cython              distutils           pyclbr</span><br><span class="line">...                 ...                 ...</span><br><span class="line">difflib             pwd                 zmq</span><br><span class="line"></span><br><span class="line">In [10]: import h&lt;TAB&gt;</span><br><span class="line">hashlib             hmac                http</span><br><span class="line">heapq               html                husl</span><br></pre></td></tr></table></figure><p>（为了简洁起见，并没有打印我的系统中所有可导入的 399个包和模块。）</p><h1 id="keyboard-shortcuts-in-the-ipython-shell">Keyboard Shortcuts inthe IPython Shell</h1><p>如果你常用计算机，你可能在工作流程中使用过快捷键。最熟悉的可能是 Cmd+ C 和 Cmd + V（或者是 Ctrl + C 和 Ctrl +V），它们在很多程序和系统中用于复制和粘贴。高级用户会将快捷键用得更加深入和广泛，流行的文本编辑器（如Emacs、Vim 等）通过复杂的按键组合为用户提供了很多快捷操作。</p><p>IPython并没有上述编辑器那么强大，但是它也提供了一些快捷方式，能帮你在录入命令的时候快速导航。我们会将这些快捷键分为几类：导航快捷键、文本输入快捷键、命令历史快捷键和其他快捷键。此处仅仅介绍历史快捷键和其他快捷键，完整的介绍见完整版讲义。</p><h2 id="command-history-shortcuts">Command History Shortcuts</h2><p>可能本章讨论的最有效的快捷方式是 IPython提供的导航命令历史的快捷方式。这个命令历史超越了你当前的 IPython会话——你所有的命令历史都会存储在一个 IPython 配置文件路径下的 SQLite数据库中。获取这些命令最直接的方式就是用上下箭头遍历历史，但是仍然还有些别的选项。</p><table><colgroup><col style="width: 45%" /><col style="width: 54%" /></colgroup><thead><tr class="header"><th>Keystroke</th><th>Action</th></tr></thead><tbody><tr class="odd"><td><code>Ctrl-p</code> (or the up arrow key)</td><td>Access previous command in history</td></tr><tr class="even"><td><code>Ctrl-n</code> (or the down arrow key)</td><td>Access next command in history</td></tr><tr class="odd"><td><code>Ctrl-r</code></td><td>Reverse-search through command history</td></tr></tbody></table><p>反向搜索特别有用。在前一节中，我们定义了一个叫作 square的函数。让我们从一个新的 IPython shell 中反向搜索 Python历史，重新找到这个函数的定义。当你在 IPython 终端按下 Ctrl + r键时，将看到如下提示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [1]:</span><br><span class="line">(reverse-i-search)`&#x27;:</span><br></pre></td></tr></table></figure><p>如果你在该提示后开始输入字符，IPython将自动填充时间最近的命令。如果有的话，将会匹配到如下字符：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [1]:</span><br><span class="line">(reverse-i-search)`sqa&#x27;: square??</span><br></pre></td></tr></table></figure><p>你可以随时添加更多的字符来重新定义搜索，或者再一次按下 Ctrl + r键来寻找另外一个匹配该查询的命令。如果你在前一节中照做了的话，按下 Ctrl+ r 键两次将可以看到：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [1]:</span><br><span class="line">(reverse-i-search)`sqa&#x27;: def square(a):</span><br><span class="line">    &quot;&quot;&quot;Return the square of a&quot;&quot;&quot;</span><br><span class="line">    return a ** 2</span><br></pre></td></tr></table></figure><p>找到你在寻找的命令后，按下 Return键将会终止查找。然后就可以利用查找到的命令，继续我们的会话：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [1]: def square(a):</span><br><span class="line">    &quot;&quot;&quot;Return the square of a&quot;&quot;&quot;</span><br><span class="line">    return a ** 2</span><br><span class="line"></span><br><span class="line">In [2]: square(2)</span><br><span class="line">Out[2]: 4</span><br></pre></td></tr></table></figure><p>请注意，你也可以用 Ctrl + p / Ctrl + n或者上下方向键查找历史，但是仅仅是匹配每行的前几个字符。也就是说，如果你输入def 然后按下 Ctrl + p，则会在你的命令历史中找到以def开头的最近的命令（如果有的话）。</p><h2 id="miscellaneous-shortcuts">Miscellaneous Shortcuts</h2><p>还有一些不能归纳在之前几个类别中的快捷键，但是它们也非常有用。</p><table><colgroup><col style="width: 41%" /><col style="width: 58%" /></colgroup><thead><tr class="header"><th>Keystroke</th><th>Action</th></tr></thead><tbody><tr class="odd"><td><code>Ctrl-l</code></td><td>Clear terminal screen</td></tr><tr class="even"><td><code>Ctrl-c</code></td><td>Interrupt current Python command</td></tr><tr class="odd"><td><code>Ctrl-d</code></td><td>Exit IPython session</td></tr></tbody></table><p>如果你无意间开启了一个运行时间非常长的程序，Ctrl + c快捷键就能派上大用场。这里讨论的一些快捷键可能乍看上去有些麻烦，但是经过实践你很快就会习惯它们。一旦你形成了这种肌肉记忆，甚至会希望将这些快捷方式应用到其他场景中。</p><h1 id="ipython-magic-commands">IPython Magic Commands</h1><p>前两节介绍了 IPython 如何让你以更有效且可交互的方式使用和探索Python。本节将介绍一些 IPython 在普通 Python语法基础之上的增强功能。这些功能被称作 IPython 魔法命令，并且都以 %符号作为前缀。这些魔法命令设计用于简洁地解决标准数据分析中的各种常见题。魔法命令有两种形式：行魔法（linemagic）和单元魔法（cell magic）。行魔法以单个 %字符作为前缀，作用于单行输入；单元魔法以两个 %%作为前缀，作用于多行输入。下面将展示和讨论一些简单的例子，本章后面会更详细地讨论一些有用的魔法命令。</p><h2 id="running-external-code-run">Running External Code:<code>%run</code></h2><p>当你开发更复杂的代码时，可能会发现自己在使用 IPython进行交互式探索的同时，还需要使用文本编辑器存储你希望重用的代码。</p><p>在 IPython会话中运行之前的代码非常方便，不用在另一个新窗口中运行这些程序代码。这个功能可以通过%run 魔法命令来实现。假设你创建了一个 myscript.py文件，该文件包含以下内容：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-------------------------------------</span></span><br><span class="line"><span class="comment"># file: myscript.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;square a number&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> N <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(N, <span class="string">&quot;squared is&quot;</span>, square(N))</span><br></pre></td></tr></table></figure><p>你可以在像下面这样在 IPython 会话中运行该程序：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [6]: %run myscript.py</span><br><span class="line">1 squared is 1</span><br><span class="line">2 squared is 4</span><br><span class="line">3 squared is 9</span><br></pre></td></tr></table></figure><p>请注意，当你运行了这段代码之后，该代码中包含的所有函数都可以在IPython 会话中使用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [7]: square(5)</span><br><span class="line">Out[7]: 25</span><br></pre></td></tr></table></figure><p>IPython 提供了几种方式来调整代码如何执行。你可以在 IPython解释器中输入 %run? 查看帮助文档。</p><h2 id="timing-code-execution-timeit">Timing Code Execution:<code>%timeit</code></h2><p>另一个非常有用的魔法函数是 %timeit，它会自动计算接下来一行的 Python语句的执行时间。例如，我们可能想了解列表综合的性能：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [8]: %timeit L = [n ** 2 for n in range(1000)]</span><br><span class="line">1000 loops, best of 3: 325 µs per loop</span><br></pre></td></tr></table></figure><p>%timeit的好处是，它会自动多次执行简短的命令，以获得更稳定的结果。对于多行语句，可以加入第二个% 符号将其转变成单元魔法，以处理多行输入。例如，下面是 for循环的同等结构：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [9]: %%timeit</span><br><span class="line">   ...: L = []</span><br><span class="line">   ...: for n in range(1000):</span><br><span class="line">   ...:     L.append(n ** 2)</span><br><span class="line">   ...:</span><br><span class="line">1000 loops, best of 3: 373 µs per loop</span><br></pre></td></tr></table></figure><p>从以上结果可以立刻看出，列表综合比同等的 for 循环结构快约10%。我们将在 1.9 节中进一步探索 %timeit和其他对代码进行计时和分析的方法。</p><h2 id="help-on-magic-functions-magic-and-lsmagic">Help on MagicFunctions: <code>?</code>, <code>%magic</code>, and<code>%lsmagic</code></h2><p>和普通的 Python 函数一样，IPython魔法函数也有文档字符串，并且可以通过标准的方式获取这些有用的文档注释。例如，为了读到%timeit 魔法函数的文档注释，可以简单地输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [10]: %timeit?</span><br></pre></td></tr></table></figure><p>其他函数的文档注释也可以通过类似方法获得。为了获得可用魔法函数的通用描述以及一些示例，可以输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [11]: %magic</span><br></pre></td></tr></table></figure><p>为了快速而简单地获得所有可用魔法函数的列表，可以输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [12]: %lsmagic</span><br></pre></td></tr></table></figure><p>最后我还想提醒你，更直接的方式是按照你的意愿定义你自己的魔法函数。这里不会具体介绍，但是如果你感兴趣，可以参考文末的参考资料。</p><h1 id="input-and-output-history">Input and Output History</h1><p>我们在前面看到，IPython shell 允许用上下方向键或 Ctrl + p / Ctrl + n快捷键获取历史命令。另外，IPython 在 shell 和 Notebook中都提供了几种获取历史命令的输出方式，以及这些命令本身的字符串形式。本节将会具体介绍。</p><h2 id="ipythons-in-and-out-objects">IPython's <code>In</code> and<code>Out</code> Objects</h2><p>到目前为止，我想你应该特别熟悉 IPython 用到的 In[1]:/Out[1]:形式的提示了。但实际上，它们并不仅仅是好看的装饰形式，还给出了在当前会话中如何获取输入和输出历史的线索。假设你用以下形式启动了一个会话：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [1]: import math</span><br><span class="line"></span><br><span class="line">In [2]: math.sin(2)</span><br><span class="line">Out[2]: 0.9092974268256817</span><br><span class="line"></span><br><span class="line">In [3]: math.cos(2)</span><br><span class="line">Out[3]: -0.4161468365471424</span><br></pre></td></tr></table></figure><p>我们导入了一个内置的 math 程序包，然后计算 2的正弦函数值和余弦函数值。这些输入和输出在 shell 中带有 In/Out标签，但是不仅如此——IPython 实际上创建了叫作 In 和 Out 的 Python变量，这些变量自动更新以反映命令历史：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [4]: print(In)</span><br><span class="line">[&#x27;&#x27;, &#x27;import math&#x27;, &#x27;math.sin(2)&#x27;, &#x27;math.cos(2)&#x27;, &#x27;print(In)&#x27;]</span><br><span class="line"></span><br><span class="line">In [5]: Out</span><br><span class="line">Out[5]: &#123;2: 0.9092974268256817, 3: -0.4161468365471424&#125;</span><br></pre></td></tr></table></figure><p>In对象是一个列表，按照顺序记录所有的命令（列表中的第一项是一个占位符，以便In[1]可以表示第一条命令）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [6]: print(In[1])</span><br><span class="line">import math</span><br></pre></td></tr></table></figure><p>Out对象不是一个列表，而是一个字典。它将输入数字映射到相应的输出（如果有的话）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [7]: print(Out[2])</span><br><span class="line">0.9092974268256817</span><br></pre></td></tr></table></figure><p>请注意，不是所有操作都有输出，例如 import 语句和 print语句就不影响输出。对于后者你可能会感到有点意外，但是仔细想想，print是一个函数，它的返回值是 None，这样就能说通了。总的来说，任何返回值是None 的命令都不会加到 Out 变量中。</p><p>如果想利用之前的结果，理解以上内容将大有用处。例如，利用之前的计算结果检查sin(2) ** 2 和 cos(2) ** 2 的和，结果如下：results:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [8]: Out[2] ** 2 + Out[3] ** 2</span><br><span class="line">Out[8]: 1.0</span><br></pre></td></tr></table></figure><p>输出结果是1.0，符合勾股定理。在这个例子中，可能不需要利用之前的结果，但是如果你执行一个非常复杂的计算并且希望重复利用运算结果，那么该方法就会非常有用。</p><h2 id="underscore-shortcuts-and-previous-outputs">Underscore Shortcutsand Previous Outputs</h2><p>标准的 Python shell 仅仅包括一个用于获取以前的输出的简单快捷键。变量_（单下划线）用于更新以前的输出，而这种方式在 IPython 中也适用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [9]: print(_)</span><br><span class="line">1.0</span><br></pre></td></tr></table></figure><p>但是 IPython更进了一步——你可以用两条下划线获得倒数第二个历史输出，用三条下划线获得倒数第三个历史输出（跳过任何没有输出的命令）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [10]: print(__)</span><br><span class="line">-0.4161468365471424</span><br><span class="line"></span><br><span class="line">In [11]: print(___)</span><br><span class="line">0.9092974268256817</span><br></pre></td></tr></table></figure><p>IPython的这一功能就此停止：超过三条下划线开始变得比较难计数，并且在这种情况下通过行号来指定输出更方便。</p><p>这里还要提到另外一个快捷键——Out[X] 的简写形式是_X（即一条下划线加行号）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [12]: Out[2]</span><br><span class="line">Out[12]: 0.9092974268256817</span><br><span class="line"></span><br><span class="line">In [13]: _2</span><br><span class="line">Out[13]: 0.9092974268256817</span><br></pre></td></tr></table></figure><h2 id="related-magic-commands">Related Magic Commands</h2><p>如果想一次性获取此前所有的输入历史，%history魔法命令会非常有用。在下面的示例中可以看到如何打印前 4 条输入命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [16]: %history -n 1-4</span><br><span class="line">   1: import math</span><br><span class="line">   2: math.sin(2)</span><br><span class="line">   3: math.cos(2)</span><br><span class="line">   4: print(In)</span><br></pre></td></tr></table></figure><p>按照惯例，可以输入 %history?来查看更多相关信息以及可用选项的详细描述。其他类似的魔法命令还有%rerun（该命令将重新执行部分历史命令）和%save（该命令将部分历史命令保存到一个文件中）。如果想获取更多相关信息，建议你使用? 帮助功能（详情请参见 1.2 节）。</p><h1 id="shell-commands-in-ipython">Shell Commands in IPython</h1><p>你可以通过将 ! 符号作为前缀在 IPython中执行任何命令行命令。例如，ls、pwd 和 echo命令可以按照以下方式运行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [1]: !ls</span><br><span class="line">myproject.txt</span><br><span class="line"></span><br><span class="line">In [2]: !pwd</span><br><span class="line">/home/jake/projects/myproject</span><br><span class="line"></span><br><span class="line">In [3]: !echo &quot;printing from the shell&quot;</span><br><span class="line">printing from the shell</span><br></pre></td></tr></table></figure><h2 id="passing-values-to-and-from-the-shell">Passing Values to and fromthe Shell</h2><p>shell 命令不仅可以从 IPython 中调用，还可以和 IPython命名空间进行交互。例如，你可以通过一个赋值操纵符将任何 shell命令的输出保存到一个 Python 列表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [4]: contents = !ls</span><br><span class="line"></span><br><span class="line">In [5]: print(contents)</span><br><span class="line">[&#x27;myproject.txt&#x27;]</span><br><span class="line"></span><br><span class="line">In [6]: directory = !pwd</span><br><span class="line"></span><br><span class="line">In [7]: print(directory)</span><br><span class="line">[&#x27;/Users/jakevdp/notebooks/tmp/myproject&#x27;]</span><br></pre></td></tr></table></figure><p>请注意，这些结果并不以列表的形式返回，而是以 IPython 中定义的一个特殊shell 返回类型的形式返回：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [8]: type(directory)</span><br><span class="line">IPython.utils.text.SList</span><br></pre></td></tr></table></figure><p>这看上去和 Python列表很像，并且可以像列表一样操作。但是这种类型还有其他功能，例如 grep 和fields 方法以及 s、n 和 p属性，允许你轻松地搜索、过滤和显示结果。你可以用 IPython内置的帮助来查看更多的详细信息。 另一个方向的交互，即将 Python 变量传入shell，可以通过 {varname} 语法实现：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [9]: message = &quot;hello from Python&quot;</span><br><span class="line"></span><br><span class="line">In [10]: !echo &#123;message&#125;</span><br><span class="line">hello from Python</span><br></pre></td></tr></table></figure><p>变量名包含在大括号内，在 shell 命令中用实际的变量替代。</p><h1 id="errors-and-debugging">Errors and Debugging</h1><p>代码开发和数据分析经常需要一些试错，而 IPython包含了一系列提高这一流程效率的工具。这一节将先简要探索调试代码中错误的工具。</p><h2 id="debugging-when-reading-tracebacks-is-not-enough">Debugging: WhenReading Tracebacks Is Not Enough</h2><p>标准的 Python 交互式调试工具是 pdb，它是 Python的调试器。这个调试器允许用户逐行运行代码，以便查看可能导致错误的原因。IPython增强版本的调试器是 ipdb，它是 IPython专用的调试器。启动和运行这两个调试器的方式有很多，这里不会一一介绍。你可以通过在线文档了解关于它们的更多信息。IPython 中最方便的调试界面可能就是 %debug魔法命令了。如果你在捕获异常后调用该调试器，它会在异常点自动打开一个交互式调试提示符。ipdb提示符让你可以探索栈空间的当前状态，探索可用变量，甚至运行 Python命令，来看看最近的异常，然后执行一些简单的任务，然后输入 quit来结束调试会话：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ErenFriendsList = [<span class="string">&quot;lambda&quot;</span>, <span class="string">&quot;c7w&quot;</span>, <span class="string">&quot;learningRate&quot;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ErenFriends</span>(<span class="params">friends</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(friends[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">ErenFriends(ErenFriendsList)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------IndexError                                Traceback (most recent call last)/Users/zhaochen20/Git/blog_zhaochen20/source/ipynb/Python 进阶话题.ipynb Cell 39 in &lt;cell line: 5&gt;()      &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Git/blog_zhaochen20/source/ipynb/Python%20%E8%BF%9B%E9%98%B6%E8%AF%9D%E9%A2%98.ipynb#ch0000038?line=1&#39;&gt;2&lt;/a&gt; def ErenFriends(friends):      &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Git/blog_zhaochen20/source/ipynb/Python%20%E8%BF%9B%E9%98%B6%E8%AF%9D%E9%A2%98.ipynb#ch0000038?line=2&#39;&gt;3&lt;/a&gt;     print(friends[3])----&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Git/blog_zhaochen20/source/ipynb/Python%20%E8%BF%9B%E9%98%B6%E8%AF%9D%E9%A2%98.ipynb#ch0000038?line=4&#39;&gt;5&lt;/a&gt; ErenFriends(ErenFriendsList)/Users/zhaochen20/Git/blog_zhaochen20/source/ipynb/Python 进阶话题.ipynb Cell 39 in ErenFriends(friends)      &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Git/blog_zhaochen20/source/ipynb/Python%20%E8%BF%9B%E9%98%B6%E8%AF%9D%E9%A2%98.ipynb#ch0000038?line=1&#39;&gt;2&lt;/a&gt; def ErenFriends(friends):----&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Git/blog_zhaochen20/source/ipynb/Python%20%E8%BF%9B%E9%98%B6%E8%AF%9D%E9%A2%98.ipynb#ch0000038?line=2&#39;&gt;3&lt;/a&gt;     print(friends[3])IndexError: list index out of range</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%debug</span><br></pre></td></tr></table></figure><p>这个交互式调试器的功能不止如此，我们甚至可以设置单步入栈和出栈来查看各变量的值：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%debug</span><br></pre></td></tr></table></figure><p>这让你可以快速找到导致错误的原因，并且知道是哪一个函数调用导致了错误。如果你希望在发生任何异常时都自动启动调试器，可以用 %pdb魔法函数来启动这个自动过程：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%xmode Plain</span><br><span class="line">%pdb on</span><br><span class="line">ErenFriends(ErenFriendsList)</span><br></pre></td></tr></table></figure><pre><code>Exception reporting mode: PlainAutomatic pdb calling has been turned ONTraceback (most recent call last):  Input In [9] in &lt;cell line: 3&gt;    ErenFriends(ErenFriendsList)  Input In [6] in ErenFriends    print(friends[3])IndexError: list index out of range</code></pre><p>最后，如果你有一个脚本，并且希望以交互式模式运行，则可以用 %run -d命令来运行，并利用 next 命令单步向下交互地运行代码。</p><h1 id="profiling-and-timing-code">Profiling and Timing Code</h1><p>在开发代码和创建数据处理管道的过程中，经常需要在各种实现方式之间取舍，但在开发算法的早期就考虑这些事情会适得其反。正如高德纳的名言所说：“大约97%的时间，我们应该忘记微小的效率差别；过早优化是一切罪恶的根源。”不过，一旦代码运行起来，提高代码的运行效率总是有用的。有时候查看给定命令或一组命令的的运行时间非常有用，有时候深入多行进程并确定一系列复杂操作的效率瓶颈也非常有用。IPython提供了很多执行这些代码计时和分析的操作函数。我们将讨论以下IPython魔法命令。</p><ul><li><code>%time</code>: Time the execution of a single statement</li><li><code>%timeit</code>: Time repeated execution of a single statementfor more accuracy</li></ul><h2 id="timing-code-snippets-timeit-and-time">Timing Code Snippets:<code>%timeit</code> and <code>%time</code></h2><p>之前对魔法函数进行了简单的介绍，我们了解了 %timeit 行魔法和 %%timeit单元魔法，其中 %%timeit 可以让代码段重复运行来计算代码的运行时间：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%timeit <span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">100</span>))</span><br></pre></td></tr></table></figure><pre><code>815 ns ± 12.4 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)</code></pre><p>请注意，因为这个操作很快，所以 %timeit自动让代码段重复运行很多次。对于较慢的命令，%timeit将自动调整并减少重复执行的次数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        total += i * (-<span class="number">1</span>) ** j</span><br></pre></td></tr></table></figure><p>有时候重复一个操作并不是最佳选择。例如，如果有一个列表需要排序，我们可能会被重复操作误导。对一个预先排好序的列表进行排序，比对一个无序的列表进行排序要快，所以重复运行将使结果出现偏差：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">L = [random.random() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>)]</span><br><span class="line">%timeit L.sort()</span><br></pre></td></tr></table></figure><pre><code>100 loops, best of 3: 1.9 ms per loop</code></pre><p>对于这种情况，%time魔法函数可能是更好的选择。对于运行时间较长的命令来说，如果较短的系统延迟不太可能影响结果，那么%time魔法函数也是一个不错的选择。下面对一个无序列表排序和一个已排序列表排序分别计时：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">L = [random.random() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sorting an unsorted list:&quot;</span>)</span><br><span class="line">%time L.sort()</span><br></pre></td></tr></table></figure><pre><code>sorting an unsorted list:CPU times: user 40.6 ms, sys: 896 µs, total: 41.5 msWall time: 41.5 ms</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sorting an already sorted list:&quot;</span>)</span><br><span class="line">%time L.sort()</span><br></pre></td></tr></table></figure><pre><code>sorting an already sorted list:CPU times: user 8.18 ms, sys: 10 µs, total: 8.19 msWall time: 8.24 ms</code></pre><p>可以看出，虽然对已排序的列表进行排序比对未排序的列表进行排序快很多，但是即使同样对已排序的列表进行排序，用%time 计时也比用 %timeit 计时花费的时间要长。这是由于 %timeit在底层做了一些很聪明的事情来阻止系统调用对计时过程的干扰。例如，%timeit会阻止清理未利用的 Python对象（即垃圾回收），该过程可能影响计时。因此，%timeit 通常比 %time更快得到结果。 和 %timeit 一样，%time魔法命令也可以通过双百分号语法实现多行代码的计时：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%time</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        total += i * (-<span class="number">1</span>) ** j</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 504 ms, sys: 979 µs, total: 505 msWall time: 505 ms</code></pre><p>关于 %time 和 %timeit 的更多信息以及它们可用的参数选项，可以通过IPython 的帮助功能（如在 IPython 提示符中输入 %time?）获取。</p><h1 id="python-进阶">Python 进阶</h1><h2 id="python-如何-debug">Python 如何 debug</h2><p>我们先从最原始的一个问题出发，Python 程序如何 debug。大家之前有学习过C++ 的话，debug 基本上依靠打断点加 print 的方法完成，Python同样如此，我们也可以基于主流 IDE 来打断点，或者输出调试。</p><p>然而我个人更倾向于将 IDE(pycharm)视为一个带有代码补全功能的文本编辑器，所有的程序运行全是通过命令行执行。<del>主要是我懒得操作GUI 来配环境。</del></p><p>我来解释下为什么我会喜欢纯粹用命令行而不是用 IDE 的 GUI。这当然是从python 的环境需要 conda 支持出发的，而 conda 的操作，IPython等等完全是在命令行进行的。为什么会使用conda，此处不再赘述，请查看讲义即可。此处展示下我电脑里的 conda环境：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!source activate</span><br><span class="line">!conda info -e</span><br></pre></td></tr></table></figure><pre><code># conda environments:#base                     /Users/zhaochen20/opt/anaconda3analysis              *  /Users/zhaochen20/opt/anaconda3/envs/analysistorch                    /Users/zhaochen20/opt/anaconda3/envs/torch</code></pre><p>主要是我的电脑里 conda 环境各不相同，而每次为新的工程配置好了 conda环境后，再配置到 IDE 里比较麻烦，所以我所有的代码都是 IDE 编辑 + shell执行。</p><p>我这么做就会遇到一个小问题，我该怎么打断点呢，听上比较麻烦，似乎没有像C艹 一样很方便的打断点的工具。这个时候，第一个库，IPython可以起到很大作用。</p><p>IPthon (注意大小写)不仅是一个基于 Python Shell的交互式解释器，同时，还是一个功能强大的 Python 库。IDE的断点功能就是依靠 IPython 的 embed 方法实现的，我这里演示下。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> embed</span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">embed(header = <span class="string">&quot;x&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>Python 3.8.12 (default, Oct 12 2021, 06:23:56) Type &#39;copyright&#39;, &#39;credits&#39; or &#39;license&#39; for more informationIPython 8.4.0 -- An enhanced Interactive Python. Type &#39;?&#39; for help.</code></pre><p>​<br />​x ​<br />​Out[1]: 1 ​<br />1</p><p>​</p><p>这里其实就是起到了打断点的作用，基于此，我们就可以来讨论 Python 工程debug 的问题。</p><p>最原始的办法当然是直接跑，然后全局跑，直到出 bug，然后对着行数去debug。关键是你一次不一定能对，这样子得反复折腾很久。甚至，你可能会跑一个特别大的程序，中途不序列化储存数据，每次重跑都会跑很久，这显然很brute 而且低效。</p><p>我自己的 debug 方法如下：</p><p>每当我对某段代码感到不确定，比如担心读取 json的时候出现解码错误，大概用这个流程：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> embed</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prettify</span>(<span class="params">file</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            meta_web = json.load(f)[<span class="string">&quot;html_content&quot;</span>]</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(file)</span><br><span class="line">            embed()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        soup = BeautifulSoup(meta_web, <span class="string">&quot;lxml&quot;</span>).prettify()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(test_txt, <span class="string">&quot;w&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> t:</span><br><span class="line">            t.write(soup)</span><br></pre></td></tr></table></figure><p>基于这部分代码，我们能够实现读取文件，倘若文件无法去按照 json格式读取，进入 exception 逻辑，打印出问题和出现问题的文件，进入 IPython交互界面，根据需求查看程序执行情况，选择退出或者返回。</p><p>接下来，讲述下 jupyter notebook 的使用。实际上，这个讲义就是按照jupyter notebook 写的，之前我一直对 jupyter不以为然，直到最近才发现他真香。</p><blockquote><p>Jupyter Notebook以网页的形式打开格式文件，可以在网页页面中直接编写代码和运行代码，代码的运行结果也会直接在代码块下显示的程序。如在编程过程中需要编写说明文档，可在同一个页面中直接编写，便于作及时的说明和解释。同时，jupyter 能够在远端服务器启动后，在本地的浏览器编写，相当于是在浏览器里的远端 IDE。 他还支持导出 tex, pdf, md等主流文件，非常方便。</p></blockquote><p>这里附带上一些我用 jupyter 写出的成果：</p><ul><li><p><ahref="https://zhaochenyang20.github.io/pdf/distribution.pdf">Distributionis all you need PDF</a></p></li><li><p><ahref="https://zhaochenyang20.github.io/ipynb/distribution.ipynb">Distributionis all you need IPYNB</a></p></li><li><p><ahref="https://zhaochenyang20.github.io/pdf/python_tutorial.pdf">PythonTutorial PDF</a></p></li><li><p><ahref="https://zhaochenyang20.github.io/ipynb/python_tutorial.ipynb">PythonTutorial IPYNB</a></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> operator <span class="keyword">as</span> op</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">const</span>(<span class="params">n, r</span>):</span></span><br><span class="line">    r = <span class="built_in">min</span>(r, n-r)</span><br><span class="line">    numer = reduce(op.mul, <span class="built_in">range</span>(n, n-r, -<span class="number">1</span>), <span class="number">1</span>)</span><br><span class="line">    denom = reduce(op.mul, <span class="built_in">range</span>(<span class="number">1</span>, r+<span class="number">1</span>), <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> numer / denom</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binomial</span>(<span class="params">n, p</span>):</span></span><br><span class="line">    q = <span class="number">1</span> - p</span><br><span class="line">    y = [const(n, k) * (p ** k) * (q ** (n-k)) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">return</span> y, np.mean(y), np.std(y)</span><br><span class="line"><span class="keyword">for</span> ls <span class="keyword">in</span> [(<span class="number">0.5</span>, <span class="number">40</span>)]:</span><br><span class="line">    p, n_experiment = ls[<span class="number">0</span>], ls[<span class="number">1</span>]</span><br><span class="line">    x = np.arange(n_experiment)</span><br><span class="line">    y, u, s = binomial(n_experiment, p)</span><br><span class="line">    plt.scatter(x, y, label=<span class="string">r&#x27;$\mu=%.2f,\ \sigma=%.2f$&#x27;</span> % (u, s))</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h1 id="常用基础库与技能">常用基础库与技能</h1><h2 id="tqdm">tqdm</h2><p>接下来介绍一些常用基础库，首先是tqdm，这个库功能简单，直观易用，就是为循环加入可视化进度条，便于监视程序执行进度。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">10000000</span>)):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><pre><code>100%|██████████| 10000000/10000000 [00:01&lt;00:00, 5891043.54it/s]</code></pre><p>这当我跑小型循环的时候，他当然不太需要监督进度，但是比如某次你需要要处理上千个文件，处理过程大概需要30 分钟，故而不加入进度条，我们很难看到代码运行到了哪一步，这时候 tqdm就会很方便。</p><h2 id="typing">typing</h2><p>typing是一个用于写出精准注释的库，正常情况下，我们的代码需要如下的注释：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_each_document</span>(<span class="params">document: <span class="built_in">str</span>, process_id: <span class="built_in">int</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param document: a json file path, containing a long string like &quot;苟利国家生死以|美国的华莱士比你们不知道高到哪里去了|没这个能力|&quot;</span></span><br><span class="line"><span class="string">    :return: the neuron itself</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>typing 库还支持更高级的注释，比如 List（注意大小写）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_names</span>(<span class="params">names: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">    <span class="keyword">for</span> student <span class="keyword">in</span> names:</span><br><span class="line">        <span class="built_in">print</span>(student)</span><br></pre></td></tr></table></figure><p>当然，也支持<ahref="https://zhaochenyang20.github.io/2022/01/09/CS/others/typing/">注释自己定义的类</a>。可能在Django 里有些作用...</p><h2 id="counter-and-ordereddict">Counter and OrderedDict</h2><p>Counter 和 OrderedDict 是两个 dictionary 的子类，非常方便。我们都知道在字典中查找不存在的键，程序会抛出 KyeError的异常，但是由于Counter 用于统计计数，因此 Counter 不同于字典，如果在 Counter中查找一个不存在的元素，不会产生异常，而是会返回0，这其实很好理解，Counter 计数将不存在元素的 count 值设置为 0。</p><p>对我而言，用了 Counter 类可以大量节省如下语句：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">course_total_order = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   course_total_order[course] += <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">   course_total_order[course] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 Counter 类之后，只用写</span></span><br><span class="line"></span><br><span class="line">course_total_order = Counter()</span><br><span class="line"></span><br><span class="line">course_total_order[course] += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>OrderedDict 顾名思义，有序字典，Python原生字典的实现是有序的，但是这个顺序很复杂，大概率不同于 key-value pair加入 Dict 的顺序，而 OrderedDict 可以按照加入顺序来遍历。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = OrderedDict()</span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&quot;Eren&quot;</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&quot;lambda&quot;</span>] = <span class="number">2</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&quot;c7w&quot;</span>] = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">    <span class="built_in">print</span>(key, <span class="built_in">dict</span>[key])</span><br></pre></td></tr></table></figure><pre><code>Eren 1lambda 2c7w 3</code></pre><h2 id="pathlib">Pathlib</h2><p>接下来是 Pathlib，我之前在我的 Mac上写工程，我的文件路径是硬编码的，导致移植到 windows上会出很多问题，而且经常因为路径里的"/"和""被坑，直到 lambda 给我推荐了Pathlib</p><p>Pathlib 和 os的很多操作类似，但是封装的更好，比如快捷的工作路径切换，目录拼接，还有文件检测。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">store_path = Path.cwd() / <span class="string">&quot;final_training_result&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> store_path.is_dir():</span><br><span class="line">    <span class="comment"># os.makedirs(store_path)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">store_name = store_path / <span class="string">&quot;refactor.npz&quot;</span></span><br><span class="line"><span class="built_in">print</span>(store_name, store_path)</span><br></pre></td></tr></table></figure><pre><code>/Users/zhaochen20/Git/blog_zhaochen20/source/ipynb/final_training_result/refactor.npz /Users/zhaochen20/Git/blog_zhaochen20/source/ipynb/final_training_result</code></pre><h2 id="numpy-序列化">Numpy 序列化</h2><p>Numpy 的功能非常强大，是专业的数据科学库。很多人说，numpy 就是用 C++写的 Python 库，效率堪比 C++。实际上，具体去了解下的话，numpy 比 C++还底层，他实际上大量用了 Fortran来编写底层计算，堪比汇编的效率，这些内容留待数据分析课讲解，这里先讲讲序列化与反序列化。</p><p>在大家的小学期，大多数同学选择把一个很大的 Dict/list 存为json，然后读取 json。我的建议是，用 numpy 把 Counter 序列化为 npz格式，然后读取 npz。json 实际上是文本文件，Linux内核读取文本文件的速度远低于读取二进制文件，而 npz（<del>还有npy</del>）实际上是二进制文件，读取和加载速度非常快，而且比文本文件内存少了很多，从1.4G 的 json 压缩为 0.6G 的npz。</p><p>当然，npz 自然有缺点，只能用 numpy 来读取，而且人类不可理解。我 SRT的工作，需要把爬虫爬下来的网页解析 html，然后保存。我自己肯定就存 npz了，但是我们组里其他同学完全不会用，所以我还是存了 json 和 CSV。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">store_path = Path.cwd() / <span class="string">&quot;test.npz&quot;</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&quot;Eren zhao&quot;</span>: <span class="number">1</span>, <span class="string">&quot;跳跳鸟&quot;</span>: <span class="number">2</span>, <span class="string">&quot;鲁大师&quot;</span>: <span class="number">3</span>, <span class="string">&quot;lambda&quot;</span>: <span class="number">4</span>, <span class="string">&quot;c7w&quot;</span>: <span class="number">5</span>&#125;</span><br><span class="line">np.savez(store_path, <span class="built_in">dict</span>=<span class="built_in">dict</span>)</span><br><span class="line">!ls</span><br></pre></td></tr></table></figure><pre><code>Python 进阶话题.ipynb     mock.ipynb                python_tutorial.ipynbdistribution.ipynb        numpy.ipynb               test.npzipython.ipynb             pandas.ipynbmatplotlib.ipynb          python class.ipynb</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = np.load(Path.cwd() / <span class="string">&quot;test.npz&quot;</span>, allow_pickle=<span class="literal">True</span>)[<span class="string">&quot;dict&quot;</span>].item()</span><br><span class="line"><span class="built_in">print</span>(dictionary)</span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;Eren zhao&#39;: 1, &#39;跳跳鸟&#39;: 2, &#39;鲁大师&#39;: 3, &#39;lambda&#39;: 4, &#39;c7w&#39;: 5&#125;</code></pre><p>当然，这背后还涉及 numpy Ndarray的取对象和切片问题，且待下回分解。</p><h2 id="decorator">decorator</h2><p>decorator 并非一个库，而是 python 的装饰器类的集合，与 OOP的装饰器模式一脉相承，具体内容较为复杂，推荐大家阅读<ahref="https://zhaochenyang20.github.io/pdf/clean%20python.pdf">CleanPython 这本书</a>可以深入理解。我实验室的大师兄（<del>还有掌门师姐</del>）他们写的code，满篇都是这个样子： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@metric</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_total_dir</span>(<span class="params">self, director</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    use a director of document to train the neuron</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        training_list = get_list(director)</span><br><span class="line">        results = p_map(train_each_document, training_list, <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(training_list) + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> results:</span><br><span class="line">            self.add_neuron(each)</span><br><span class="line">        neo_one = &#123;&#125;</span><br><span class="line">        neo_two = &#123;&#125;</span><br><span class="line">        neo_three = &#123;&#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;filter 1 unit&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure></p><p>我一直不太理解，这个 <span class="citation"data-cites="metric">@metric</span>是什么意思，后来我发现了这个是修饰器语法，和 shebang 语法很像。（shebang待会再讲）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@metric</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这句话等价于</span></span><br><span class="line"></span><br><span class="line">func = metric(func)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">metric</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;running time for each main function&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">fn</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;start executing %s&#x27;</span> % (fn.__name__))</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        result = fn(*args, **kw)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        t = <span class="number">1000</span> * (end_time - start_time)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s executed in %s ms&#x27;</span> % (fn.__name__, t))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>这是我常用的装饰器，展示程序运行的毫秒数。</p><h2 id="argparse">argparse</h2><p>接下来是 argparse，广泛应用于形式化解析命令行参数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parser_data</span>():</span></span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        prog=<span class="string">&#x27;Pinyin Input Method&#x27;</span>,</span><br><span class="line">        description=<span class="string">&#x27;Pinyin to Chinese.&#x27;</span>,</span><br><span class="line">        allow_abbrev=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--input-file&#x27;</span>, dest=<span class="string">&#x27;input_file_path&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Input file&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-o&#x27;</span>, <span class="string">&#x27;--output-file&#x27;</span>, dest=<span class="string">&#x27;output_file_path&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Output file&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--coefficient&#x27;</span>, dest=<span class="string">&#x27;coefficient&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, nargs=<span class="number">2</span>, default=[<span class="number">0.4</span>, <span class="number">0.5</span>], <span class="built_in">help</span>=<span class="string">&quot;coefficient&quot;</span>)</span><br><span class="line">    input_file_path = parser.parse_args().input_file_path</span><br><span class="line">    output_file_path = parser.parse_args().output_file_path</span><br><span class="line">    coefficient = parser.parse_args().coefficient</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">assert</span> os.path.exists(input_file_path) == <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;You may use an existing file. But you have use an unexisting file: <span class="subst">&#123;input_file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Thus, the progress would exit right now.&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(coefficient) == <span class="number">2</span> <span class="keyword">and</span> coefficient[<span class="number">0</span>] &lt;= <span class="number">1</span> <span class="keyword">and</span> coefficient[<span class="number">1</span>] &lt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;You may input two coefficient. And theyshould be less than 1. But you have input: <span class="subst">&#123;coefficient&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Thus, the progress would exit right now.&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> input_file_path, output_file_path, coefficient</span><br></pre></td></tr></table></figure><p>运行方式:</p><p><code>python3 pinyin.py -i  /Users/zhaochen20/THU_CST/2022_spring/人智导/作业/input-method/测试语料/input_2.txt -o ./test.txt -c 1 1</code></p><p>可以通过 'python3 pinyin.py -h`获取帮助。当然，还有如何输入布尔变量的问题，这个比较复杂，具体内容可以参考我Notion 上的 <ahref="https://zhaochen20.notion.site/Python-Part-2-dc4ac581989c4533894bc68a83b0a8d9">PythonTutorial 2</a></p><h1 id="linux">Linux</h1><p>接下来讲点 Python 与 Linux 交互，主要是方便大家在服务器上跑代码...说起来，我之所以选择用 jupyter 跑远程代码，是应为我的 Mac 各种 IDE连接服务器都很拉胯，我试过 VSCode，JetBrains Gateaway... 也用过原生 ssh+ nano，直到一位朋友给我推荐了 jupyter，我一开始以为 jupyter的意义是提供了代码 + 文档的共同编写环境，实际上：</p><blockquote><p>jupyter是懒人包，方便可视化和debug，尤其是服务器上。web环境调ui比xwindow方便。你设置好以后在自己笔记本上用ip 访问和操作，比较方便。</p></blockquote><p>简直是神器！</p><h2 id="heredoc">heredoc</h2><p>稍微说一句 heredoc</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> cat &lt;&lt; <span class="string">EOF &gt; now</span></span></span><br><span class="line"><span class="meta">heredoc&gt;</span><span class="bash"><span class="string"> #! usr/local/bin/python3.9</span></span></span><br><span class="line"><span class="meta">heredoc&gt;</span><span class="bash"><span class="string"> from datetime import datetime</span></span></span><br><span class="line"><span class="meta">heredoc&gt;</span><span class="bash"><span class="string"> print(&#x27;current time is %s&#x27; % datetime.now())</span></span></span><br><span class="line"><span class="meta">heredoc&gt;</span><span class="bash"><span class="string"> EOF</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里需要在命令行运行，不做展示</span></span><br></pre></td></tr></table></figure><p>heredoc 就是类似上方的格式，可以实现创建新文本的功能，虽然用vim，nano，touch 都可以。<del>反正技多不压身</del></p><h2 id="shebang">shebang</h2><p>接下来是 shebang:</p><blockquote><p>在计算领域中，Shebang（也称为Hashbang）是一个由井号和叹号构成的字符序列<code>#!</code>，其出现在文本文件的第一行的前两个字符。 在文件中存在Shebang 的情况下，类 Unix 操作系统的程序加载器会分析 Shebang后的内容，将这些内容作为解释器指令，并调用该指令，并将载有 Shebang的文件路径作为该解释器的参数。</p></blockquote><p>给个例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! usr/local/bin/python3.9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello shebang&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>hello shebang</code></pre><h2 id="conda">conda</h2><p>conda 是最后一个内容。<del>相信大家都懂，我就不讲了</del></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一个基本的conda流程</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> conda create -n env_name python=3.8</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">source</span> activate env_name</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> conda install whaterever</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果conda装不了，那就用pip</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> pip install whatever</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> conda activate 失败</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> conda activate SRT_crawler</span></span><br><span class="line">CommandNotFoundError: Your shell has not been properly configured to use &#x27;conda activate&#x27;.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">source</span> activate</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> conda activate SRT_crawler</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  在某个具体的 conda 环境下，使用 pip 就是安装到这个特定的 conda 环境</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对于单个包的安装，可能遇上安装超时的问题</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> pip install python-moudle</span></span><br><span class="line"></span><br><span class="line">raise ReadTimeoutError(self._pool, None, &quot;Read timed out.&quot;)</span><br><span class="line">pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host=&#x27;files.pythonhosted.org&#x27;, port=443): Read timed out.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决方案</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> pip --timeout=100 install python-moudle</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果是依靠某个具体的requirement.txt，则：</span></span><br><span class="line">pip --default-timeout=100 install -r requirements_demo.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ok，太慢，不如直接换源</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> conda config --<span class="built_in">set</span> show_channel_urls yes</span></span><br></pre></td></tr></table></figure><h2 id="代码风格">代码风格</h2><p>最后讲一讲 pythonic 代码风格的问题，老实说，我不是很确定我是否pythonic，pythonic 的精华很大部分来自各种推导，比如这一段：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 出自软工后端小作业，写的真的喵！</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">messages_for_user</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_response</span>(<span class="params">code: <span class="built_in">int</span>, data: <span class="built_in">str</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>: code,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>: data</span><br><span class="line">        &#125;, status=code)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">assert</span> request.method == <span class="string">&quot;POST&quot;</span></span><br><span class="line">        name = request.COOKIES[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">        user = User.objects.get(name=name)</span><br><span class="line">        messages = Message.objects.<span class="built_in">filter</span>(user=user)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(messages) != <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> gen_response(<span class="number">200</span>, [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;title&#x27;</span>: msg.title,</span><br><span class="line">                <span class="string">&#x27;content&#x27;</span>: msg.content,</span><br><span class="line">                <span class="string">&#x27;timestamp&#x27;</span>: <span class="built_in">int</span>(msg.pub_date.timestamp())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> msg <span class="keyword">in</span> messages.order_by(<span class="string">&#x27;-pub_date&#x27;</span>)</span><br><span class="line">        ])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> gen_response(<span class="number">400</span>, <span class="string">&quot;查无此人&quot;</span>)</span><br></pre></td></tr></table></figure></p><p>我这里讲讲我们实验室的代码风格，自己很喜欢。</p><p>一个 Python 工程分若干个脚本文件，每个文件构造如下：</p><ol type="1"><li>引用原生库和手写库</li><li>定义全局变量</li><li>定义修饰器</li><li>定义类和对象函数</li><li>定义函数（包括 argparse）</li><li>定义主函数</li></ol><p>最后定义 pipeline，用 os.system 一个个跑，比如这亚子：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pipeline</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;refactor start&quot;</span>)</span><br><span class="line">    <span class="comment"># os.system(&quot;python3 refactor_data.py &gt; refactor_log.txt&quot;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;train start&quot;</span>)</span><br><span class="line">    <span class="comment"># os.system(&quot;python3 train.py -s Large &gt; training_log.txt&quot;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;eval start&quot;</span>)</span><br><span class="line">    <span class="comment"># os.system(&quot;./complete.sh &gt; complete_log.txt&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pipeline()</span><br></pre></td></tr></table></figure></p><p>这里实际上是用 os 代替了 ShellScript，实际上所有的 shell 脚本都能用os.system 代替，而且更可读，毕竟大家更了解 Python，而非 shell 语法。虽然shell 语法个人认为不太重要，但是 linux 指令很重要。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1</span><br><span class="line">do</span><br><span class="line">for j in 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1</span><br><span class="line">do</span><br><span class="line">python3 pinyin.py -i ./测试语料/input_2.txt -o ./test.txt -c $i $j</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">for i in 0.9 0.99 0.999 0.9999 0.99999 1</span><br><span class="line">do</span><br><span class="line">        for j in 0.9 0.99 0.999 0.9999 0.99999 1</span><br><span class="line">        do</span><br><span class="line">                python3 pinyin.py -i ./测试语料/input_2.txt -o ./test.txt -c $i $j</span><br><span class="line">        done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="作业">作业</h1><p>除开必须要要利用 Python语言完成的作业外，在其他科目的学习过程中，Python脚本也能够为同学们提供非常多的帮助。</p><p>比如小刘同学本学期选修了王英老师开设的科技英语课程。他希望能够编写一个脚本来批量生成单词本，用以帮助他考前<del>三分钟突击</del>复习科技英语。（由于王英老师强烈反对，故而删除三分钟突击的字样）</p><p>他提出了如下需求： 1.希望能够同时提供带有翻译和不带翻译的单词本供他复习 2.希望单词本能够具有足够的随机性，至少要满足对于他不会的所有单词能够随机排序3.他希望能够指定单词本的大小，有时也希望能够重点复习某个范围内的单词（比如他所有不会的单词的第100 个到 200 个） 4. 他希望单词本的格式较为整齐，具有一定的可读性 5.小刘来自计算机系，他认为翻译过程本身较为缓慢，每次运行程序耗时较长，故而希望能够一次性生成足够多的单词本6. <del>他甚至希望能够用图形化界面来复习单词</del></p><p>为此，他将平日不会的单词整理为了 <code>.txt</code>格式的文档，具体格式参考<ahref="https://github.com/zhaochenyang20/TOFEL_words_reviewer/blob/main/collection.txt">此链接</a></p><p>欢迎你利用 Python 脚本尝试完成此项作业。其中 1 ~ 5 为基础需求，6为扩展需求。</p><p>值得思考的 trick：</p><ol type="1"><li><code>argparse</code>（用于读入小刘同学的需求，你甚至可以为他补充更多的功能，但是需要指定清楚输入规范，以及处理错误输入）</li><li>一些随机排序或者随机采样的方法（原生列表？numpy？）</li><li>如何实现翻译？（just fucking Google it?）</li><li>如果翻译失败，应该如何控制？</li></ol><p>小刘同学非常感谢你能够完成他的需求，但是希望你能够提供完整清晰的使用说明书，避免他无法使用。他甚至希望你能够以开源git 仓库的形式将其发布，供更多学习科技英语的同学使用。</p><p>为此，你可能还需要学习如何开源自己的工作。我们建议大家利用 github或者 git Tsinghua 完成。而一份优秀的开源工作至少需要包括：</p><ol type="1"><li>合适的项目名称</li><li>项目简介</li><li>README 文件</li><li>gitignore文件</li><li>项目源码文件</li><li>项目依赖库的安装方式</li><li>项目的使用方法</li></ol><p>小刘同学的朋友 Eren 已经在摆烂之余帮助小刘同学写了一份 demo代码，但是小刘同学并不满意。或许你可以参考 Eren 的<ahref="https://github.com/zhaochenyang20/TOFEL_words_reviewer">开源工作</a>进一步完成小刘同学的需求。</p>]]></content>
    
    
    <summary type="html">再把给班上同学讲的部分拿出来故技重施...</summary>
    
    
    
    <category term="CS" scheme="http://example.com/categories/CS/"/>
    
    <category term="Python" scheme="http://example.com/categories/CS/Python/"/>
    
    
    <category term="2022夏季" scheme="http://example.com/tags/2022%E5%A4%8F%E5%AD%A3/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>基于 Numpy 的 Python 科学计算入门</title>
    <link href="http://example.com/2022/07/17/CS/others/Python%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/"/>
    <id>http://example.com/2022/07/17/CS/others/Python%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/</id>
    <published>2022-07-17T10:18:24.000Z</published>
    <updated>2022-10-01T13:16:05.420Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="基于-numpy-的-python-科学计算入门">基于 Numpy 的 Python科学计算入门</h1><p><strong><a href="https://zhaochenyang20.github.io/">Eren Zhao</a> THUCST Summer Tutorial 2022</strong></p><h2 id="intro-why-numpy">Intro: Why Numpy?</h2><p>本课将介绍通过 Python有效导入、存储和操作内存数据的主要技巧。这个主题非常广泛,因为数据集的来源与格式都十分丰富,比如文档集合、图像集合、声音片段集合、数值数据集合,等等。这些数据虽然存在明显的异构性,但是将所有数据简单地看作数字数组非常有助于我们理解和处理数据。</p><p>例如, 可以将图像（尤其是数字图像）简单地看作二维数字数组,这些数字数组代表各区 域的像素值; 声音片段可以看作时间和强度的一维数组;文本也可以通过各种方式转换成 数值表示,一种可能的转换是用二进制数表示特定单词或单词对出现的频率。不管数据是何种形式,第一步都是将这些数据转换成数值数组形式的可分析数据。</p><p>正因如此,有效地存储和操作数值数组是数据科学中绝对的基础过程。我们将详细介绍NumPy。NumPy（Numerical Python的简称）提供了高效存储和操作密集数据缓存的接口。在某些方面, NumPy 数组与Python 内置的列表类型非常相似。但是随着数组在维度上变大, NumPy数组提供了更加高效的存储和数据操作。NumPy 数组几乎是整个 Python科学计算生态系统的核心。因此, 不管你对数据科学的哪个方面感兴趣,花点时间学习如何有效地使用 NumPy 都是非常值得的。</p><p>如果你听从前言给出的建议安装了 Anaconda, 那么你已经安装好 NumPy,并可以使用它了。如果你是个体验派, 则可以到 NumPy网站（http://www.numpy.org/）按照其安装指导进行安装。安装好后,你可以导入 NumPy 并再次核实你的 NumPy 版本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">np.__version__</span><br></pre></td></tr></table></figure><pre><code>&#39;1.22.3&#39;</code></pre><h1 id="内容重点">内容重点</h1><p>这份讲义是我<del>多年来</del>学习中用到的 numpy 的 API的总结，不得不说非常得多，为此把它们整合为为了查阅的手册。我个人认为，以下内容是你需要清楚理解并且在学习和工作中经常提醒自己的，而其他内容都可以作为工具书来查阅：</p><ul><li>Numpy 和 Python 的效率区别</li><li>Numpy 广播机制的规则</li><li>Numpy Fancy Index</li><li>传统索引的视图问题</li></ul><p>其他的 API基本是用惯了就记住了，而这三点是绝对的重点，也是我课程的讲课重点。其余自学都没有任何问题。</p><h2 id="python-数据类型">Python 数据类型</h2><p>要实现高效的数据驱动科学和计算，需要理解数据是如何被存储和操作的。本节将介绍在Python 语言中数据数组是如何被处理的，并对比 NumPy所做的改进。理解这个不同之处是理解本节其他内容的基础。</p><p>Python的用户往往被其易用性所吸引，其中一个易用之处就在于动态输入。静态类型的语言（如C 或 Java）往往需要每一个变量都明确地声明，而动态类型的语言（例如Python）可以跳过这个特殊规定。例如在 C语言中，你可能会按照如下方式指定一个特殊的操作：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* C代码 */</span></span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line"> result += i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在 Python 中，同等的操作可以按照如下方式实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python代码</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line"> result += i</span><br></pre></td></tr></table></figure><p>注意这里最大的不同之处：在 C语言中，每个变量的数据类型被明确地声明；而在 Python中，类型是动态推断的。这意味着可以将任何类型的数据指定给任何变量：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python代码</span></span><br><span class="line">x = <span class="number">4</span></span><br><span class="line">x = <span class="string">&quot;four&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>这里已经将 x 变量的内容由整型转变成了字符串，而同样的操作在 C语言中将会导致（取决于编译器设置）编译错误或其他未知的后果：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* C代码 */</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">4</span>;</span><br><span class="line">x = <span class="string">&quot;four&quot;</span>; <span class="comment">// 编译失败</span></span><br></pre></td></tr></table></figure><p>这种灵活性是使 Python和其他动态类型的语言更易用的原因之一。理解这一特性如何工作是学习用Python有效且高效地分析数据的重要因素。但是这种类型灵活性也指出了一个事实：Python变量不仅是它们的值，还包括了关于值的类型的一些额外信息，本节接下来的内容将进行更详细的介绍。</p><h3 id="python-整型不仅仅是一个整型">Python 整型不仅仅是一个整型</h3><p>标准的 Python 实现是用 C 语言编写的。这意味着每一个 Python对象都是一个聪明的伪 C语言结构体，该结构体不仅包含其值，还有其他信息。例如，当我们在 Python中定义一个整型，例如 x = 10000 时，x并不是一个“原生”整型，而是一个指针，指向一个 C语言的复合结构体，结构体里包含了一些值。查看 Python 3.4的源代码，可以发现整型（长整型）的定义，如下所示（C语言的宏经过扩展之后）： <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">longobject</span> &#123;</span></span><br><span class="line"> <span class="keyword">long</span> ob_refcnt;</span><br><span class="line"> PyTypeObject *ob_type;</span><br><span class="line"> <span class="keyword">size_t</span> ob_size;</span><br><span class="line"> <span class="keyword">long</span> ob_digit[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> Python 3.4 中的一个整型实际上包括4 个部分。</p><ul><li>ob_refcnt 是一个引用计数，它帮助 Python默默地处理内存的分配和回收。</li><li>ob_type 将变量的类型编码。</li><li>ob_size 指定接下来的数据成员的大小。</li><li>ob_digit 包含我们希望 Python 变量表示的实际整型值。</li></ul><p>这意味着与 C 语言这样的编译语言中的整型相比，在 Python中存储一个整型会有一些开销。</p><div data-align="center"><p><img width="500" src="https://zhaochenyang20.github.io/pic/embed/6_29_1.jpg"/></p></div><div data-align="center">C 整型和 Python 整型的区别，这里 PyObject_HEAD是结构体中包含引用计数、类型编码和其他部分。</div><p>两者的差异在于，C语言整型本质上是对应某个内存位置的标签，里面存储的字节会编码成整型。而Python 的整型其实是一个指针，指向包含这个 Python对象所有信息的某个内存位置，其中包括可以转换成整型的字节。由于 Python的整型结构体里面还包含了大量额外的信息，所以 Python可以自由、动态地编码。但是，Python类型中的这些额外信息也会成为负担，在多个对象组合的结构体中尤其明显。</p><h3 id="python-列表不仅仅是一个列表">Python 列表不仅仅是一个列表</h3><p>设想如果使用一个包含很多 Python 对象的 Python 数据结构，会发生什么？Python中的标准可变多元素容器是列表。可以用如下方式创建一个整型值列表：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: L = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: L</span><br><span class="line">Out[<span class="number">2</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>或者创建一个字符串列表：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">4</span>]: L2 = [<span class="built_in">str</span>(each) <span class="keyword">for</span> each <span class="keyword">in</span> L]</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: L2</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="built_in">type</span>(L2[<span class="number">0</span>])</span><br><span class="line">Out[<span class="number">6</span>]: <span class="built_in">str</span></span><br></pre></td></tr></table></figure><p>因为 Python 的动态类型特性，甚至可以创建一个异构的列表：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]:  L3 = [<span class="literal">True</span>, <span class="string">&quot;2&quot;</span>, <span class="number">3.0</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: [<span class="built_in">type</span>(item) <span class="keyword">for</span> item <span class="keyword">in</span> L3]</span><br><span class="line">Out[<span class="number">8</span>]: [<span class="built_in">bool</span>, <span class="built_in">str</span>, <span class="built_in">float</span>, <span class="built_in">int</span>]</span><br></pre></td></tr></table></figure><p>但是想拥有这种灵活性也是要付出一定代价的：为了获得这些灵活的类型，列表中的每一项必须包含各自的类型信息、引用计数和其他信息；也就是说，每一项都是一个完整的Python对象。来看一个特殊的例子，如果列表中的所有变量都是同一类型的，那么很多信息都会显得多余——将数据存储在固定类型的数组中应该会更高效。动态类型的列表和固定类型的（NumPy式）数组间的区别如下图所示。</p><div data-align="center"><p><img width="500" src="https://zhaochenyang20.github.io/pic/embed/6_29_2.jpg"/></p></div><div data-align="center">numpy 列表和 Python 列表的区别。</div><p>在实现层面，数组基本上包含一个指向连续数据块的指针。另一方面，Python列表包含一个指向指针块的指针，这其中的每一个指针对应一个完整的 Python对象（如前面看到的 Python整型）。另外，列表的优势是灵活，因为每个列表元素是一个包含数据和类型信息的完整结构体，而且列表可以用任意类型的数据填充。固定类型的NumPy 式数组缺乏这种灵活性，但是能更有效地存储和操作数据。</p><h2 id="为何-numpy-会更快">为何 numpy 会更快？</h2><p>Python 的默认实现（被称作CPython）处理起某些操作时非常慢，一部分原因是该语言的动态性和解释性——数据类型灵活的特性决定了序列操作不能像C 语言和 Fortran 语言一样被编译成有效的机器码。目前，有一些项目试图解决Python 这一弱点，比较知名的包括：PyPy项目（http://pypy.org/）。一个实时的 Python 编译实现；Cython项目（http://cython.org），将 Python 代码转换成可编译的 C 代码；Numba项目（http://numba.pydata.org/），将 Python 代码的片段转换成快速的 LLVM字节码。以上这些项目都各有其优势和劣势，但是比较保守地说，这些方法中还没有一种能达到或超过标准CPython 引擎的受欢迎程度。</p><p>我们具体来展示和理解下 CPython 的缓慢——</p><p>Python的相对缓慢通常出现在很多小操作需要不断重复的时候，比如对数组的每个元素做循环操作时。假设有一个数组，我们想计算每个元素的倒数，一种直接的解决方法是：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_reciprocals</span>(<span class="params">values</span>):</span></span><br><span class="line">    output = np.empty(<span class="built_in">len</span>(values))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(values)):</span><br><span class="line">        output[i] = <span class="number">1.0</span> / values[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line">values = np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=<span class="number">5</span>)</span><br><span class="line">compute_reciprocals(values)</span><br></pre></td></tr></table></figure><pre><code>array([0.16666667, 1.        , 0.25      , 0.25      , 0.125     ])</code></pre><p>这种实现方式可能对于有 C 语言或 Java背景的人来说非常自然，但是如果测试一个很大量的输入数据运行上述代码的时间，这一操作将非常耗时，并且是超出意料的慢！我们用IPython 的 %timeit 魔法函数来测量：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">big_array_numpy = np.random.randint(<span class="number">1</span>, <span class="number">100</span>, size=<span class="number">1000000</span>)</span><br><span class="line">big_array_list = <span class="built_in">list</span>(big_array_numpy)</span><br><span class="line">%timeit compute_reciprocals(big_array_numpy)</span><br><span class="line">%timeit compute_reciprocals(big_array_list)</span><br></pre></td></tr></table></figure><pre><code>1.84 s ± 17.1 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)1.82 s ± 34.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre><p>完成百万次上述操作并存储结果花了几秒钟的时间！在手机都以Giga-FLOPS（即每秒十亿次浮点运算，一个有趣的对比是当年阿姆斯特朗飞到月球所需要的算力基本等于一部智能手机的算力）为单位计算处理速度时，上面的处理结果所花费的时间确实是不合时宜的慢。事实上，这里的处理瓶颈并不是运算本身，而是CPython在每次循环时必须做数据类型的检查和函数的调度。每次进行倒数运算时，Python首先检查对象的类型，并且动态查找可以使用该数据类型的正确函数。如果我们在编译代码时进行这样的操作，那么就能在代码执行之前知晓类型的声明，结果的计算也会更加有效率。</p><p>在上方的例子里，你可能看不出 numpy的明显优势，但是毕竟这还是在显示地运行 for 循环，而 numpy的快速主要体现在有着遍历性质的通用函数对 numpy 数组的巨幅加成上。</p><p>先扯到这里，我们开始正式入门。</p><h1 id="创建和生成">创建和生成</h1><p>本节主要介绍 array的创建和生成。为什么会把这个放在最前面呢？主要有以下两个方面原因：</p><ul><li>在实际工作过程中，我们时不时需要验证或查看 array 相关的 API或互操作。</li><li>有时候在使用 sklearn，matplotlib，PyTorch，Tensorflow等工具时也需要一些简单的数据进行实验。</li></ul><p>所以，先学会如何快速拿到一个 array是有很多益处的。本节我们主要介绍以下几种常用的创建方式：</p><ul><li>使用列表或元组</li><li>使用 arange</li><li>使用 linspace/logspace</li><li>使用 ones/zeros</li><li>使用 random</li><li>从文件读取</li></ul><p>其中，最常用的一般是 linspace/logspace 和random，前者常常用在画坐标轴上，后者则用于生成「模拟数据」。举例来说，当我们需要画一个函数的图像时，X往往使用 linspace 生成，然后使用函数公式求得 Y，再plot；当我们需要构造一些输入（比如 X）或中间输入（比如 Embedding、hiddenstate）时，random 会异常方便。</p><h3 id="从-python-列表或元组创建">从 python 列表或元组创建</h3><p>⭐⭐</p><p>重点掌握传入 list 创建一个 array即可：<code>np.array(list)</code></p><p>⚠️需要注意的是：「数据类型」。如果您足够仔细的话，可以发现下面第二组代码第2 个数字是「小数」（注：Python 中 1. == 1.0），而 array是要保证每个元素类型相同的，所以会帮您把 array 转为一个 float的类型。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个 list</span></span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二维（多维类似）</span></span><br><span class="line"><span class="comment"># 注意，有一个小数</span></span><br><span class="line">np.array([[<span class="number">1</span>, <span class="number">2.</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure><pre><code>array([[1., 2., 3.],       [4., 5., 6.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 你也可以指定数据类型</span></span><br><span class="line">np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.float16)</span><br></pre></td></tr></table></figure><pre><code>array([1., 2., 3.], dtype=float16)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果指定了 dtype，输入的值都会被转为对应的类型，而且不会四舍五入</span></span><br><span class="line">lst = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6.8</span>]</span><br><span class="line">]</span><br><span class="line">np.array(lst, dtype=np.int32)</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3],       [4, 5, 6]], dtype=int32)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个 tuple</span></span><br><span class="line">np.asarray((<span class="number">1.1</span>, <span class="number">2.2</span>))</span><br></pre></td></tr></table></figure><pre><code>array([1.1, 2.2])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tuple，一般用 list 就好，不需要使用 tuple</span></span><br><span class="line">np.array([(<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>), (<span class="number">4.4</span>, <span class="number">5.5</span>, <span class="number">6.6</span>)])</span><br></pre></td></tr></table></figure><pre><code>array([[1.1, 2.2, 3.3],       [4.4, 5.5, 6.6]])</code></pre><p>至于 asarray 和 array 的区别：</p><p>array 和 asarray 都可以将结构数据转化为ndarray，但是主要区别就是当数据源是 ndarray 时，array 会 copy出一个副本，占用新的内存，但 asarray 不会。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">arr2 = np.array(arr1)</span><br><span class="line">arr3 = np.asarray(arr1)</span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line">arr3[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br></pre></td></tr></table></figure><pre><code>[1 2 3][ 1 10  3]</code></pre><h2 id="使用-arange-生成">使用 arange 生成</h2><p>⭐⭐</p><p>range 是 Python 内置的整数序列生成器，arange 是 numpy的，效果类似，会生成一维的向量。我们偶尔会需要使用这种方式来构造array，比如：</p><p>需要创建一个连续一维向量作为输入（比如编码位置时可以使用）需要观察筛选、抽样的结果时，有序的array 一般更加容易观察</p><p>⚠️ 需要注意的是：在 reshape 时，目标的 shape需要的元素数量一定要和原始的元素数量相等。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[ 0,  1,  2,  3],       [ 4,  5,  6,  7],       [ 8,  9, 10, 11]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意，是小数</span></span><br><span class="line">np.arange(<span class="number">12.0</span>).reshape(<span class="number">4</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[ 0.,  1.,  2.],       [ 3.,  4.,  5.],       [ 6.,  7.,  8.],       [ 9., 10., 11.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">100</span>, <span class="number">124</span>, <span class="number">2</span>).reshape(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[[100, 102],        [104, 106]],       [[108, 110],        [112, 114]],       [[116, 118],        [120, 122]]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shape size 相乘要和生成的元素数量一致</span></span><br><span class="line">np.arange(<span class="number">100.</span>, <span class="number">124.</span>, <span class="number">2</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)/Users/zhaochen20/Desktop/Python 科学计算.ipynb Cell 23 in &lt;cell line: 2&gt;()      &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Desktop/Python%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97.ipynb#ch0000024?line=0&#39;&gt;1&lt;/a&gt; # shape size 相乘要和生成的元素数量一致----&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Desktop/Python%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97.ipynb#ch0000024?line=1&#39;&gt;2&lt;/a&gt; np.arange(100., 124., 2).reshape(2,3,4)ValueError: cannot reshape array of size 12 into shape (2,3,4)</code></pre><h3 id="使用-linspacelogspace-生成">使用 linspace/logspace 生成</h3><p>⭐⭐⭐</p><p>OK，这是我们遇到的第一个比较重要的 API，前者需要传入 3个参数：开头，结尾，数量；后者需要额外传入一个 base，它默认是 10。</p><p>⚠️ 需要注意的是：第三个参数并<strong>不是</strong>步长。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 线性</span></span><br><span class="line"><span class="built_in">print</span>(np.linspace(<span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>).reshape(<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>))</span><br><span class="line">np.linspace(<span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>).reshape(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>[[[0.]  [1.]  [2.]  [3.]  [4.]] [[5.]  [6.]  [7.]  [8.]  [9.]]]array([[[0., 1., 2., 3., 4.],        [5., 6., 7., 8., 9.]]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[0. , 1.8, 3.6],       [5.4, 7.2, 9. ]])</code></pre><p>接下来是 logspace，注意其意义就是按照<ahref="https://zhaochenyang20.github.io/2022/01/08/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E9%9F%B3%E4%B9%90%E4%B8%AD%E7%9A%84%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/">指数线性</a>来生成数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指数 base 默认为 10</span></span><br><span class="line"><span class="built_in">print</span>(np.logspace(<span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span>, base=np.e))</span><br><span class="line"><span class="built_in">print</span>(np.log(np.logspace(<span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span>, base=np.e)))</span><br><span class="line"><span class="built_in">print</span>(np.logspace(<span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span>, base=<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(np.log10(np.logspace(<span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span>, base=<span class="number">10</span>)))</span><br></pre></td></tr></table></figure><pre><code>[1.00000000e+00 6.04964746e+00 3.65982344e+01 2.21406416e+02 1.33943076e+03 8.10308393e+03][0.  1.8 3.6 5.4 7.2 9. ][1.00000000e+00 6.30957344e+01 3.98107171e+03 2.51188643e+05 1.58489319e+07 1.00000000e+09][0.  1.8 3.6 5.4 7.2 9. ]</code></pre><p>下面我们更进一步看一下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">20</span></span><br><span class="line">x = np.arange(N)</span><br><span class="line">y1 = np.linspace(<span class="number">0</span>, <span class="number">10</span>, N) * <span class="number">100</span></span><br><span class="line">y2 = np.logspace(<span class="number">0</span>, <span class="number">10</span>, N, base=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y2, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">plt.plot(x, y1, <span class="string">&#x27;o&#x27;</span>);</span><br><span class="line"><span class="comment">#! 划线</span></span><br><span class="line">plt.plot(x, y2);</span><br><span class="line">plt.plot(x, y1);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查每个元素是否为 True</span></span><br><span class="line"><span class="comment"># base 的 指数为 linspace 得到的就是 logspace</span></span><br><span class="line">N = <span class="number">20</span></span><br><span class="line">y2 = np.logspace(<span class="number">0</span>, <span class="number">10</span>, N, base=<span class="number">2</span>)</span><br><span class="line">np.alltrue(<span class="number">2</span> ** np.linspace(<span class="number">0</span>, <span class="number">10</span>, N)  == y2)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><blockquote><p>⚠️ 补充：关于 array 的条件判断</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不能直接用 if 判断 array 是否符合某个条件</span></span><br><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">cond1 = arr &gt; <span class="number">2</span></span><br><span class="line">cond1</span><br></pre></td></tr></table></figure><pre><code>array([False, False,  True])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> cond1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;forbid&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)/Users/zhaochen20/Desktop/Python 科学计算.ipynb Cell 34 in &lt;cell line: 1&gt;()----&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Desktop/Python%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97.ipynb#ch0000036?line=0&#39;&gt;1&lt;/a&gt; if cond1:      &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Desktop/Python%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97.ipynb#ch0000036?line=1&#39;&gt;2&lt;/a&gt;     print(&quot;forbid&quot;)ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 即便你全是 True 它也不行</span></span><br><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">cond2 = arr &gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> cond2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;forbid&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)/Users/zhaochen20/Desktop/Python 科学计算.ipynb Cell 35 in &lt;cell line: 4&gt;()      &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Desktop/Python%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97.ipynb#ch0000037?line=1&#39;&gt;2&lt;/a&gt; arr = np.array([1, 2, 3])      &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Desktop/Python%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97.ipynb#ch0000037?line=2&#39;&gt;3&lt;/a&gt; cond2 = arr &gt; 0----&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Desktop/Python%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97.ipynb#ch0000037?line=3&#39;&gt;4&lt;/a&gt; if cond2:      &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Desktop/Python%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97.ipynb#ch0000037?line=4&#39;&gt;5&lt;/a&gt;     print(&quot;forbid&quot;)ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只能用 any 或 all，这个很容易犯错，请务必注意。</span></span><br><span class="line"><span class="keyword">if</span> cond1.<span class="built_in">any</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;if any&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>if any</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> cond2.<span class="built_in">all</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;all conform&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>all conform</code></pre><h3 id="使用-oneszeros-创建">使用 ones/zeros 创建</h3><p>⭐</p><p>创建全 1/0 array 的快捷方式。需要注意的是 <code>np.zeros_like</code>或 <code>np.ones_like</code>，二者可以快速生成给定 array 一样 shape 的 0或 1 向量，这在需要 Mask 某些位置时可能会用到。</p><p>⚠️ 需要注意的是：创建出来的 array 默认是 float 类型。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>array([1., 1., 1.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones((<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[1., 1., 1.],       [1., 1., 1.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.zeros((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[[0., 0., 0., 0.],        [0., 0., 0., 0.],        [0., 0., 0., 0.]],       [[0., 0., 0., 0.],        [0., 0., 0., 0.],        [0., 0., 0., 0.]]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 像给定向量那样的 0 向量（ones_like 是 1 向量）</span></span><br><span class="line"><span class="built_in">print</span>(np.zeros_like(np.ones((<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>))))</span><br></pre></td></tr></table></figure><pre><code>[[[0. 0. 0.]  [0. 0. 0.]  [0. 0. 0.]] [[0. 0. 0.]  [0. 0. 0.]  [0. 0. 0.]]]</code></pre><h3 id="使用-random-生成">使用 random 生成</h3><p>⭐⭐⭐⭐⭐</p><p>如果要在这一节选一个最重要的 API，那一定是 <code>random</code>无疑了，这里我们只介绍几个比较常用的「生产」数据相关的API。它们经常用于随机生成训练或测试数据，神经网络初始化等。</p><p>⚠️ 需要注意的是：这里我们统一推荐使用新的 API 方式创建，即通过<code>np.random.default_rng()</code> 先生成<code>Generator</code>，然后再在此基础上生成各种分布的数据（记忆更加简便清晰）。不过我们依然会介绍就的API 用法，因为很多代码中使用的还是旧的，您可以混个眼熟。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0-1 连续均匀分布</span></span><br><span class="line">np.random.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[0.54422614, 0.7771694 , 0.17419901],       [0.70917992, 0.44169007, 0.24421882]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单个数</span></span><br><span class="line">np.random.rand()</span><br></pre></td></tr></table></figure><pre><code>0.5064066705679392</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0-1 连续均匀分布</span></span><br><span class="line">np.random.random((<span class="number">3</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[0.60052534, 0.62961777],       [0.6097588 , 0.98259692],       [0.81380663, 0.90393871]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定上下界的连续均匀分布</span></span><br><span class="line">np.random.uniform(-<span class="number">1</span>, <span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[-0.70988965,  0.61189297, -0.0014294 ],       [ 0.16404608, -0.99240214, -0.26983641]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上面两个的区别是 shape 的输入方式不同，无伤大雅了</span></span><br><span class="line"><span class="comment"># 不过从 1.17 版本后推荐这样使用（以后大家可以用新的方法）</span></span><br><span class="line"><span class="comment"># rng 是个 Generator，可用于生成各种分布</span></span><br><span class="line"><span class="comment">#! 42 是随机数种子，众所周知，计算机是完全不存在随机的，指定相同的随机数种子，我们会生成相同的随机结果</span></span><br><span class="line">rng = np.random.default_rng(<span class="number">42</span>)</span><br><span class="line">rng</span><br></pre></td></tr></table></figure><pre><code>Generator(PCG64) at 0x7F7908077580</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推荐的连续均匀分布用法</span></span><br><span class="line">rng.random((<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[0.77395605, 0.43887844, 0.85859792],       [0.69736803, 0.09417735, 0.97562235]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以指定上下界，所以更加推荐这种用法</span></span><br><span class="line">rng.uniform(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[0.7611397 , 0.78606431, 0.12811363],       [0.45038594, 0.37079802, 0.92676499]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机整数（离散均匀分布），不超过给定的值（10）</span></span><br><span class="line"><span class="built_in">print</span>(np.random.randint(<span class="number">100</span>, size=(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)))</span><br><span class="line">rng.integers(<span class="number">100</span>, size=(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><pre><code>[[[ 7 12 27 48]  [58 98 27  1]  [57 45  5 68]] [[28 19 15 42]  [28 93  3 32]  [58 89 94 32]]]array([[[67, 77, 75, 19],        [36, 46, 49,  4],        [54, 15, 74, 68]],       [[92, 74, 36, 96],        [41, 32, 90, 37],        [ 7, 46, 79, 18]]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机整数（离散均匀分布），指定上下界和 shape</span></span><br><span class="line">np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[8, 4, 7],       [4, 5, 3]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上面推荐的方法，指定大小和上界</span></span><br><span class="line">rng.integers(<span class="number">10</span>, size=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>array([4, 1])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上面推荐的方法，指定上下界</span></span><br><span class="line">rng.integers(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[6, 4, 3],       [2, 5, 6]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标准正态分布</span></span><br><span class="line">np.random.randn(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[ 1.00598973, -2.32839773,  0.8845468 , -0.01272806],       [ 0.49565494, -1.40539762,  1.79185433,  0.36375782]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上面推荐的标准正态分布用法</span></span><br><span class="line">rng.standard_normal((<span class="number">2</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[ 0.74325417,  0.54315427, -0.66550971,  0.23216132],       [ 0.11668581,  0.2186886 ,  0.87142878,  0.22359555]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 高斯分布</span></span><br><span class="line">np.random.normal(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">3</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[-0.9099195 ,  0.40175023,  0.2742747 , -0.76010006,  0.33305447],       [ 0.36653939,  0.40263391,  2.12750154,  0.45131352, -0.5574691 ],       [-0.84153653, -0.09624566,  0.83520801,  0.02640151,  0.65957284]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上面推荐的高斯分布用法</span></span><br><span class="line">rng.normal(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">3</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[ 0.67891356,  0.06757907,  0.2891194 ,  0.63128823, -1.45715582],       [-0.31967122, -0.47037265, -0.63887785, -0.27514225,  1.49494131],       [-0.86583112,  0.96827835, -1.68286977, -0.33488503,  0.16275307]])</code></pre><p>总之，一般会用的就是2个分布：均匀分布和正态（高斯）分布。另外，<code>size</code>可以指定 shape。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 离散均匀分布</span></span><br><span class="line">rng.integers(low=<span class="number">0</span>, high=<span class="number">10</span>, size=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>array([5, 5, 0, 5, 7])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正态（高斯）分布</span></span><br><span class="line">rng.normal(loc=<span class="number">0.0</span>, scale=<span class="number">1.0</span>, size=(<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[-0.34872507, -0.46235179,  0.85797588],       [-0.19130432, -1.27568632, -1.13328721]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连续均匀分布</span></span><br><span class="line">rng.uniform(low=<span class="number">0</span>, high=<span class="number">10</span>, size=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0.58302742, 2.81383892, 2.93593758, 6.61916515, 5.57032152])</code></pre><h3 id="从文件读取">从文件读取</h3><p>⭐⭐⭐⭐⭐</p><p>这小节主要用于加载实现存储好的权重参数或预处理好的数据集，有时候会比较方便，比如训练好的模型参数加载到内存里用来提供推理服务，或者耗时很久的预处理数据直接存起来，多次实验时不需要重新处理。</p><p>⚠️ 需要注意的是：存储时不需要写文件名后缀，会自动添加。 在<ahref="https://github.com/zhaochenyang20/IAI_2022">人智导</a>中可以优雅地使用，但是请自行学习<code>allow_pickle</code> 参数，此处给出<ahref="https://github.com/zhaochenyang20/IAI_2022/blob/main/homework/input-method/src/pinyin.py">输入法大作业</a>里的一个例子：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = np.load(Path.cwd() / <span class="string">&quot;dictionary.npz&quot;</span>, allow_pickle=<span class="literal">True</span>)[<span class="string">&quot;dic&quot;</span>].item()</span><br><span class="line">one, two, three = [Counter(each[<span class="number">1</span>].item()) <span class="keyword">for</span> each <span class="keyword">in</span> np.load(Path.cwd() / <span class="string">&quot;full_set.npz&quot;</span>, allow_pickle=<span class="literal">True</span>).items()]</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接将给定矩阵存为 a.npy</span></span><br><span class="line">np.save(<span class="string">&#x27;./a&#x27;</span>, np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以将多个矩阵存在一起，名为 `b.npz`</span></span><br><span class="line">np.savez(<span class="string">&quot;./b&quot;</span>, a=np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>), 字典=np.arange(<span class="number">12.</span>).reshape(<span class="number">4</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 和上一个一样，只是压缩了</span></span><br><span class="line">np.savez_compressed(<span class="string">&quot;./c&quot;</span>, a=np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>), c=np.arange(<span class="number">12.</span>).reshape(<span class="number">4</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载单个 array</span></span><br><span class="line">np.load(<span class="string">&quot;./a.npy&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3],       [4, 5, 6]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载多个，可以像字典那样取出对应的 array</span></span><br><span class="line">arr = np.load(<span class="string">&quot;./b.npz&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以直接使用 npz、npb 的名称进行加载</span></span><br><span class="line">arr[<span class="string">&quot;字典&quot;</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[ 0.,  1.,  2.],       [ 3.,  4.,  5.],       [ 6.,  7.,  8.],       [ 9., 10., 11.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> arr:</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><pre><code>a字典</code></pre><h2 id="统计和属性">统计和属性</h2><p>本节我们从 array 的基本统计属性入手，对刚刚创建的 array进一步的了解。主要包括以下几个方面：</p><ul><li>尺寸相关</li><li>最大、最小、中位、分位值</li><li>平均、求和、标准差等</li></ul><p>都是描述性统计相关的指标，对于我们从整体了解一个 array很有帮助。其中，用到最多的是尺寸相关的「<code>shape</code>」，最大、最小值，平均值、求和等。</p><p>本节的内容非常简单，您只需要特别关注（记住）两个重要的特性：</p><ul><li>按维度（指定 axis）求结果。一般 0 表示列 1表示行，可以用「<strong>沿着行/列操作</strong>」这样理解，不确定时可以拿个例子试一下。</li><li>计算后保持维度（<code>keepdims=True</code>）</li></ul><p><strong>另外，为了便于操作，我们使用一个随机生成的 array作为操作对象；同时，我们指定了seed，这样每次运行，每个人看到的结果都是一样的。一般我们在训练模型时，往往需要指定seed，这样才能在「同等条件」下进行调参。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  先创建一个 Generator</span></span><br><span class="line">rng = np.random.default_rng(seed=<span class="number">42</span>)</span><br><span class="line"><span class="comment">#  再生成一个均匀分布</span></span><br><span class="line">arr = rng.uniform(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[0.77395605, 0.43887844, 0.85859792, 0.69736803],       [0.09417735, 0.97562235, 0.7611397 , 0.78606431],       [0.12811363, 0.45038594, 0.37079802, 0.92676499]])</code></pre><h3 id="尺寸相关">尺寸相关</h3><p>⭐⭐</p><p>这一小节主要包括：维度、形状和数据量，其中形状 <code>shape</code>我们用到的最多。</p><p>⚠️ 需要注意的是：size 不是 shape。而 ndim 表示有几个维度。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 维度，array 是二维的（两个维度）</span></span><br><span class="line">arr.ndim</span><br></pre></td></tr></table></figure><pre><code>2</code></pre><h4 id="np.shape"><code>np.shape</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 形状，返回一个 Tuple</span></span><br><span class="line">arr.shape</span><br></pre></td></tr></table></figure><pre><code>(3, 4)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据量</span></span><br><span class="line">arr.size</span><br></pre></td></tr></table></figure><pre><code>12</code></pre><h3 id="最值分位">最值分位</h3><p>⭐⭐⭐</p><p>这一小节主要包括：最大值、最小值、中位数、其他分位数，其中『<strong>最大值和最小值</strong>』我们平时用到的最多。</p><p>⚠️ 需要注意的是：分位数可以是 0-1的任意小数（表示对应分位），而且分位数并不一定在原始的 array 中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有元素中最大的</span></span><br><span class="line">arr.<span class="built_in">max</span>()</span><br></pre></td></tr></table></figure><pre><code>0.9756223516367559</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按维度（列）最大值</span></span><br><span class="line">arr.<span class="built_in">max</span>(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0.77395605, 0.97562235, 0.85859792, 0.92676499])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同理，按行</span></span><br><span class="line">arr.<span class="built_in">max</span>(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0.85859792, 0.97562235, 0.92676499])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否保持原来的维度</span></span><br><span class="line"><span class="comment"># 这个需要特别注意下，很多深度学习模型中都需要保持原有的维度进行后续计算</span></span><br><span class="line"><span class="comment"># arr.min 的维度是 (3,1)，array 的 shape 是 (3,4)，按行，同时保持了行的维度</span></span><br><span class="line">arr.<span class="built_in">min</span>(axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[0.43887844],       [0.09417735],       [0.12811363]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保持维度：（1，4），原始array是（3，4）</span></span><br><span class="line">arr.<span class="built_in">min</span>(axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[0.09417735, 0.43887844, 0.37079802, 0.69736803]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一维了</span></span><br><span class="line">arr.<span class="built_in">min</span>(axis=<span class="number">0</span>, keepdims=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0.09417735, 0.43887844, 0.37079802, 0.69736803])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中位数</span></span><br><span class="line"><span class="comment"># 其他用法和 max，min 是一样的</span></span><br><span class="line">np.median(arr)</span><br></pre></td></tr></table></figure><pre><code>0.7292538655248584</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分位数，注意，分位数可以是 0-1 之间的任何数字（分位）</span></span><br><span class="line"><span class="comment"># 如果是 1/2 分位，那正好是中位数</span></span><br><span class="line">np.quantile(arr, q=<span class="number">1</span>/<span class="number">2</span>, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[0.73566204],       [0.773602  ],       [0.41059198]])</code></pre><h3 id="平均求和标准差">平均求和标准差</h3><p>⭐⭐⭐</p><p>这一小节主要包括：平均值、累计求和、方差、标准差等进一步的统计指标。其中使用最多的是「平均值」。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 平均值</span></span><br><span class="line">np.average(arr)</span><br></pre></td></tr></table></figure><pre><code>0.6051555606435642</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按维度平均（列）</span></span><br><span class="line">np.average(arr, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0.33208234, 0.62162891, 0.66351188, 0.80339911])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 另一个计算平均值的 API</span></span><br><span class="line"><span class="comment"># 它与 average 的主要区别是，np.average 可以指定权重，即可以用于计算加权平均</span></span><br><span class="line"><span class="comment"># 一般建议使用 average，忘掉 mean 吧！</span></span><br><span class="line">np.mean(arr, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0.33208234, 0.62162891, 0.66351188, 0.80339911])</code></pre><h4 id="np.sum"><code>np.sum</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求和，不多说了，类似</span></span><br><span class="line">np.<span class="built_in">sum</span>(arr, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([2.76880044, 2.61700371, 1.87606258])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.<span class="built_in">sum</span>(arr, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[2.76880044],       [2.61700371],       [1.87606258]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按列累计求和</span></span><br><span class="line">np.cumsum(arr, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[0.77395605, 0.43887844, 0.85859792, 0.69736803],       [0.8681334 , 1.41450079, 1.61973762, 1.48343233],       [0.99624703, 1.86488673, 1.99053565, 2.41019732]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按行累计求和</span></span><br><span class="line">np.cumsum(arr, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[0.77395605, 1.21283449, 2.07143241, 2.76880044],       [0.09417735, 1.0697997 , 1.8309394 , 2.61700371],       [0.12811363, 0.57849957, 0.94929759, 1.87606258]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标准差，用法类似</span></span><br><span class="line">np.std(arr)</span><br></pre></td></tr></table></figure><pre><code>0.28783096517727075</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按列求标准差</span></span><br><span class="line">np.std(arr, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0.3127589 , 0.25035525, 0.21076935, 0.09444968])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方差</span></span><br><span class="line">np.var(arr, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0.02464271, 0.1114405 , 0.0839356 ])</code></pre><h2 id="形状和转换">形状和转换</h2><p>array 大多数情况下都是以多维的形式出现的，一般对超过二维的多维 array称为「张量」，二维矩阵，一维向量。因为多维度，所以自然而然地涉及到形状的改变和转换，可以算是张量最基础的「操作」了。</p><p>本节我们主要涉及以下三个方面：</p><ul><li>改变形状</li><li>反序</li><li>转置</li></ul><p>其中，改变形状和转置都非常常用，我们建议您熟练掌握。</p><h3 id="改变形状">改变形状</h3><p>⭐⭐⭐⭐⭐</p><p>这小节里面的 API 使用非常高频，尤其是扩展 1 维度的<code>expand_dims</code> 和去除 1 维度的<code>squeeze</code>，您未来会在很多神经网络架构中看到这俩货的身影。</p><p>⚠️ 需要注意的是：无论是扩展还是缩减，多或少的 shape 都是1，<code>squeeze</code> 时如果指定维度，则该维度 shape 必须是 1。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 换个整数的随机 array</span></span><br><span class="line">rng = np.random.default_rng(seed=<span class="number">42</span>)</span><br><span class="line">arr = rng.integers(<span class="number">1</span>, <span class="number">100</span>, (<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;arr[0]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;arr[:, 0]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr[:, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;arr[:, :, 0]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr[:, :, <span class="number">0</span>])</span><br></pre></td></tr></table></figure><pre><code>[[[ 9 77]  [65 44]  [43 86]  [ 9 70]] [[20 10]  [53 97]  [73 76]  [72 78]] [[51 13]  [84 45]  [50 37]  [19 92]]]arr[0][[ 9 77] [65 44] [43 86] [ 9 70]]arr[:, 0][[ 9 77] [20 10] [51 13]]arr[:, :, 0][[ 9 65 43  9] [20 53 73 72] [51 84 50 19]]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有时候您可能需要将多维 array 打平</span></span><br><span class="line">arr = arr.ravel()</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(arr.shape)</span><br></pre></td></tr></table></figure><pre><code>[ 9 77 65 44 43 86  9 70 20 10 53 97 73 76 72 78 51 13 84 45 50 37 19 92](24,)</code></pre><h4 id="np.expand_dims"><code>np.expand_dims</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 扩展 1 个维度，需要（必须）指定维度</span></span><br><span class="line"><span class="comment"># 其实就是多嵌套了一下</span></span><br><span class="line">arr = rng.integers(<span class="number">1</span>, <span class="number">100</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr[:, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line">arr = np.expand_dims(arr, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr[:, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>[[92 74 37 96] [41 33 90 37] [ 8 47 79 19]]----------------------------------------------------[92 74 37 96]----------------------------------------------------[92 41  8]----------------------------------------------------(3, 4)----------------------------------------------------(1, 3, 4)----------------------------------------------------[[92 74 37 96] [41 33 90 37] [ 8 47 79 19]]----------------------------------------------------[[92 74 37 96]]----------------------------------------------------[[[92 74 37 96]  [41 33 90 37]  [ 8 47 79 19]]]----------------------------------------------------</code></pre><h1 id="通用函数">通用函数</h1><p>到目前为止，我们讨论了 NumPy的一些基础知识。在接下来的几小节中，我们将深入了解 NumPy 在 Python数据科学世界中如此重要的原因。明确点说，NumPy提供了一个简单灵活的接口来优化数据数组的计算。</p><p>NumPy 数组的计算有时非常快，有时也非常慢。使 NumPy变快的关键是利用向量化操作，通常在 NumPy的通用函数（ufunc）中实现。本节将介绍 NumPy通用函数的重要性——它可以提高数组元素的重复计算的效率；然后，将会介绍很多NumPy 包中常用且有用的数学通用函数。</p><p>我们再回顾下之前求倒数的例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_reciprocals</span>(<span class="params">values</span>):</span></span><br><span class="line">    output = np.empty(<span class="built_in">len</span>(values))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(values)):</span><br><span class="line">        output[i] = <span class="number">1.0</span> / values[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">values = np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=<span class="number">5</span>)</span><br><span class="line">compute_reciprocals(values)</span><br></pre></td></tr></table></figure><pre><code>array([0.16666667, 1.        , 0.25      , 0.25      , 0.125     ])</code></pre><p>NumPy为很多类型的操作提供了非常方便的、静态类型的、可编译程序的接口，也被称作向量操作。你可以通过简单地对数组执行操作来实现，这里对数组的操作将会被用于数组中的每一个元素。这种向量方法被用于将循环推送至NumPy 之下的编译层，这样会取得更快的执行效率。</p><p>比较如下结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(compute_reciprocals(values))</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1.0</span> / values)</span><br></pre></td></tr></table></figure><pre><code>[0.16666667 1.         0.25       0.25       0.125     ][0.16666667 1.         0.25       0.25       0.125     ]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">big_array = np.random.randint(<span class="number">1</span>, <span class="number">100</span>, size=<span class="number">1000000</span>)</span><br><span class="line">%timeit compute_reciprocals(big_array)</span><br><span class="line">%timeit (<span class="number">1.0</span> / big_array)</span><br></pre></td></tr></table></figure><pre><code>1.86 s ± 49.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)694 µs ± 174 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%time compute_reciprocals(big_array)</span><br><span class="line">%time (<span class="number">1.0</span> / big_array)</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 1.83 s, sys: 11.7 ms, total: 1.85 sWall time: 1.85 sCPU times: user 812 µs, sys: 145 µs, total: 957 µsWall time: 676 µsarray([0.1       , 0.01190476, 0.04545455, ..., 0.01428571, 0.01098901,       0.01149425])</code></pre><p>NumPy 中的向量操作是通过通用函数实现的。通用函数的主要目的是对 NumPy数组中的值执行更快的重复操作。它非常灵活，前面我们看过了标量和数组的运算，但是也可以对两个数组进行运算：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">5</span>) / np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0.        , 0.5       , 0.66666667, 0.75      , 0.8       ])</code></pre><p>通用函数并不仅限于一维数组的运算，它们也可以进行多维数组的运算：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="number">2</span> ** x</span><br></pre></td></tr></table></figure><pre><code>array([[  1,   2,   4],       [  8,  16,  32],       [ 64, 128, 256]])</code></pre><p>通过通用函数用向量的方式进行计算几乎总比用 Python循环实现的计算更加有效，尤其是当数组很大时。只要你看到 Python脚本中有这样的循环，就应该考虑能否用向量方式替换这个循环。</p><p>给出一些例子，具体的请查阅相关资料：</p>$$<span class="math display">\[\begin{array}{lll}\end{array}\]</span><p><span class="math display">\[\]</span> <span class="math display">\[\begin{equation}\begin{array}{lll}\hline \text { 运算符 } &amp; \text { 对应的通用函数 } &amp; \text {描述 } \\\hline+ &amp; n p . a d d &amp; \text { 加法运算 }(\text { 即 } 1+1=2)\\- &amp; n p . \text { subtract } &amp; \text { 减法运算 }(\text { 即 }3-2=1) \\- &amp; \text { np.negative } &amp; \text { 负数运算 }(\text { 即 }-2)\\* &amp; \text { np.multiply } &amp; \text { 乘法运算 }(\text { 即 } 2 *3=6) \\/ &amp; \text { np.divide } &amp; \text { 除法运算 }(\text { 即 } 3 /2=1.5) \\/ / &amp; \text { np.floor}\text {divide } &amp; \text { 地板除法运算(floor division，即 } 3 / / 2=1) \\\text { ** } &amp; \text { np.power } &amp; \text { 指数运算 }(\text {即 } 2 * * 3=8) \\\% &amp; \text { np.mod } &amp; \text { 模 / 余数 }(\text { 即 } 9 \%4=1) \\\hline\end{array}\end{equation}\]</span> $$</p><p>专用的通用函数 除了以上介绍到的，NumPy还提供了很多通用函数，包括双曲三角函数、比特位运算、比较运算符、弧度转化为角度的运算、取整和求余运算，等等。浏览NumPy 的文档将会揭示很多有趣的功能。</p><p>还有一个更加专用，也更加晦涩的通用函数优异来源是子模块scipy.special。如果你希望对你的数据进行一些更晦涩的数学计算，scipy.special可能包含了你需要的计算函数。</p><p>这些函数能列一个长长的列表，下面的代码片段展示了一些可能在统计学中用到的函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> special</span><br><span class="line"><span class="comment"># Gamma函数（广义阶乘，generalized factorials）和相关函数</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;gamma(x) =&quot;</span>, special.gamma(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ln|gamma(x)| =&quot;</span>, special.gammaln(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;beta(x, 2) =&quot;</span>, special.beta(x, <span class="number">2</span>))</span><br><span class="line"> <span class="comment"># 误差函数（高斯积分）</span></span><br><span class="line"> <span class="comment"># 它的实现和它的逆实现</span></span><br><span class="line">x = np.array([<span class="number">0</span>, <span class="number">0.3</span>, <span class="number">0.7</span>, <span class="number">1.0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;erf(x) =&quot;</span>, special.erf(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;erfc(x) =&quot;</span>, special.erfc(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;erfinv(x) =&quot;</span>, special.erfinv(x))</span><br></pre></td></tr></table></figure><pre><code>gamma(x) = [1.0000e+00 2.4000e+01 3.6288e+05]ln|gamma(x)| = [ 0.          3.17805383 12.80182748]beta(x, 2) = [0.5        0.03333333 0.00909091]erf(x) = [0.         0.32862676 0.67780119 0.84270079]erfc(x) = [1.         0.67137324 0.32219881 0.15729921]erfinv(x) = [0.         0.27246271 0.73286908        inf]</code></pre><p>NumPy 和 scipy.special中提供了大量的通用函数，这些包的文档在网上就可以查到，搜索“gammafunction python”即可。</p><h2 id="高级的通用函数特性">高级的通用函数特性</h2><ol type="1"><li>指定输出</li></ol><p>在进行大量运算时，有时候指定一个用于存放运算结果的数组是非常有用的。不同于创建临时数组，你可以用这个特性将计算结果直接写入到你期望的存储位置。所有的通用函数都可以通过out 参数来指定计算结果的存放位置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">y = np.empty(<span class="number">5</span>)</span><br><span class="line">np.multiply(x, <span class="number">10</span>, out=y) </span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><pre><code>[ 0. 10. 20. 30. 40.]</code></pre><p>这个特性也可以被用作数组视图，例如可以将计算结果写入指定数组的每隔一个元素的位置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = np.zeros(<span class="number">10</span>)</span><br><span class="line">np.power(<span class="number">2</span>, x, out=y[::<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><pre><code>[ 1.  0.  2.  0.  4.  0.  8.  0. 16.  0.]</code></pre><p>如果这里写的是 y[::2] = 2 **x，那么结果将是创建一个临时数组，该数组存放的是2 ** x的结果，并且接下来会将这些值复制到 y数组中。对于上述例子中比较小的计算量来说，这两种方式的差别并不大。但是对于较大的数组，通过慎重使用out 参数将能够有效节约内存。</p><p>2.聚合</p><p>二元通用函数有些非常有趣的聚合功能，这些聚合可以直接在对象上计算。例如，如果我们希望用一个特定的运算reduce 一个数组，那么可以用任何通用函数的 reduce 方法。一个 reduce方法会对给定的元素和操作重复执行，直至得到单个的结果。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(np.add.reduce(x))</span><br><span class="line"><span class="built_in">print</span>(np.add.accumulate(x))</span><br></pre></td></tr></table></figure><pre><code>15[ 1  3  6 10 15]</code></pre><ol start="3" type="1"><li>外积</li></ol><p>有点类似张亮积。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">np.multiply.outer(x, x)</span><br></pre></td></tr></table></figure><pre><code>array([[ 1,  2,  3,  4,  5],       [ 2,  4,  6,  8, 10],       [ 3,  6,  9, 12, 15],       [ 4,  8, 12, 16, 20],       [ 5, 10, 15, 20, 25]])</code></pre><h2 id="广播机制">广播机制</h2><p>我们在前一节中介绍了 NumPy 如何通过通用函数的向量化操作来减少缓慢的Python 循环，另外一种向量化操作的方法是利用 NumPy的广播功能。广播可以简单理解为用于不同大小数组的二进制通用函数（加、减、乘等）的一组规则。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">b = np.array([<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>])</span><br><span class="line">a + b</span><br></pre></td></tr></table></figure><pre><code>array([5, 6, 7])</code></pre><p>还可以自动扩充计算</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">3</span>)</span><br><span class="line">b = np.arange(<span class="number">3</span>)[:, np.newaxis]</span><br><span class="line">a + b</span><br></pre></td></tr></table></figure><pre><code>array([[0, 1, 2],       [1, 2, 3],       [2, 3, 4]])</code></pre><h2 id="规则">规则！</h2><p>NumPy的广播遵循一组严格的规则，设定这组规则是为了决定两个数组间的操作。</p><ul><li><p>规则1：如果两个数组的维度数不相同，那么小维度数组的形状将会在最左边补1</p></li><li><p>规则2：如果两个数组的形状在任何一个维度上都不匹配，那么数组的形状会沿着维度为1 的维度扩展以匹配另外一个数组的形状</p></li><li><p>规则3：如果两个数组的形状在任何一个维度上都不匹配并且没有任何一个维度等于1，那么会引发异常</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">3</span>).reshape((<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">b = np.arange(<span class="number">3</span>)</span><br><span class="line">a + b</span><br></pre></td></tr></table></figure><pre><code>array([[0, 1, 2],       [1, 2, 3],       [2, 3, 4]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M = np.ones((<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">a = np.arange(<span class="number">3</span>)</span><br><span class="line">M + a</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)/Users/zhaochen20/Desktop/Python 科学计算.ipynb Cell 126 in &lt;cell line: 3&gt;()      &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Desktop/Python%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97.ipynb#ch0000140?line=0&#39;&gt;1&lt;/a&gt; M = np.ones((3, 2))      &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Desktop/Python%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97.ipynb#ch0000140?line=1&#39;&gt;2&lt;/a&gt; a = np.arange(3)----&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/zhaochen20/Desktop/Python%20%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97.ipynb#ch0000140?line=2&#39;&gt;3&lt;/a&gt; M + aValueError: operands could not be broadcast together with shapes (3,2) (3,) </code></pre><h2 id="广播的实际运用">广播的实际运用</h2><ol type="1"><li>数组的归一化</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = np.random.random((<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">Xmean = X.mean(axis=<span class="number">0</span>)</span><br><span class="line">X_centered = X - Xmean</span><br><span class="line">X_centered.mean(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>array([-9.99200722e-17,  3.33066907e-17,  0.00000000e+00])</code></pre><p>在机器精度范围内，该均值为 0。</p><ol start="2" type="1"><li>绘制二维函数</li></ol><p>广播另外一个非常有用的地方在于，它能基于二维函数显示图像。比如我们希望定义一个函数<span class="math inline">\(z = f (x,y)\)</span>，可以用广播沿着数值区间计算该函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">50</span>)</span><br><span class="line">y = np.linspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">50</span>)[:, np.newaxis]</span><br><span class="line">z = np.sin(x) ** <span class="number">10</span> + np.cos(<span class="number">10</span> + y * x) * np.cos(x)</span><br><span class="line">plt.imshow(z, extent=[<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>], cmap=<span class="string">&#x27;viridis&#x27;</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​<br /><img src="output_140_0.png" alt="png" /> ​</p><h3 id="反序">反序</h3><p>⭐</p><p>也可以看作是一种对原数组的转换，用的不多，可以了解一下，为接下来的索引和切片做个热身。</p><p>如果给一个字符串或数组让您反序，您可能会想到很多种方法，比如：<code>reversed</code>，或者写一个方法，或者用Python list 的索引功能，而这也是 <code>numpy</code> 中 array反序的方式。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">s = <span class="string">&quot;uevol&quot;</span></span><br><span class="line">s[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>&#39;loveu&#39;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数组</span></span><br><span class="line">lst = [<span class="number">1</span>, <span class="string">&quot;1&quot;</span>, <span class="number">5.2</span>]</span><br><span class="line">lst[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>[5.2, &#39;1&#39;, 1]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.randint(<span class="number">1</span>, <span class="number">100</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure><pre><code>[[49 81 30 11] [54 17 22 45] [34  5 40  9]]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们按上面的套路：默认列反序</span></span><br><span class="line">arr[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[34,  5, 40,  9],       [54, 17, 22, 45],       [49, 81, 30, 11]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列不变行反序</span></span><br><span class="line">arr[::-<span class="number">1</span>, :]</span><br></pre></td></tr></table></figure><pre><code>array([[34,  5, 40,  9],       [54, 17, 22, 45],       [49, 81, 30, 11]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在不同维度上操作：行不变列反序</span></span><br><span class="line">arr[:, ::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[11, 30, 81, 49],       [45, 22, 17, 54],       [ 9, 40,  5, 34]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 行变列也变</span></span><br><span class="line">arr[::-<span class="number">1</span>, ::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[ 9, 40,  5, 34],       [45, 22, 17, 54],       [11, 30, 81, 49]])</code></pre><h3 id="转置">转置</h3><p>⭐⭐⭐</p><p>转置是线性代数的基本操作，拿二维矩阵为例，通俗理解就是把它放倒，shape反转，行变成列，列成为行。当然，对于多维也是类似的，需要里理解他们的数学意义，这里不做展开。我们建议您二维矩阵用<code>arr.T</code>（会快很多），超过二维的张量可以用<code>np.transpose</code>，会更加灵活些。</p><p>⚠️ 需要注意的是：一维数组转置还是自己。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一维</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]).T)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.array([[<span class="number">1</span>,<span class="number">2</span>, <span class="number">3</span>]]).T.shape)</span><br></pre></td></tr></table></figure><pre><code>[[1 2 3]](1, 3)[[1] [2] [3]](3, 1)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简便用法，把所有维度顺序都给倒过来</span></span><br><span class="line">rng = np.random.default_rng(seed=<span class="number">42</span>)</span><br><span class="line">arr = rng.integers(<span class="number">1</span>, <span class="number">100</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.T)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.T.shape)</span><br></pre></td></tr></table></figure><pre><code>----------------------------------------------------[[ 9 77 65 44] [43 86  9 70] [20 10 53 97]]----------------------------------------------------(3, 4)----------------------------------------------------[[ 9 43 20] [77 86 10] [65  9 53] [44 70 97]]----------------------------------------------------(4, 3)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 shape=(1,1,3,4) 的转置后得到 shape=(4,3,1,1)</span></span><br><span class="line">arr.reshape(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>).T.shape</span><br></pre></td></tr></table></figure><pre><code>(4, 3, 1, 1)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同上</span></span><br><span class="line">arr.reshape(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>).T.shape</span><br></pre></td></tr></table></figure><pre><code>(1, 3, 1, 2, 2, 1)</code></pre><h4 id="np.transpose"><code>np.transpose</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这种转置方式可以指定 axes</span></span><br><span class="line">np.transpose(arr)</span><br></pre></td></tr></table></figure><pre><code>array([[ 9, 43, 20],       [77, 86, 10],       [65,  9, 53],       [44, 70, 97]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不指定 axes 时和 .T 是一样的</span></span><br><span class="line">np.transpose(arr.reshape(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>)).shape</span><br></pre></td></tr></table></figure><pre><code>(1, 3, 1, 2, 2, 1)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定 axes，不过 axes 数量必须包含所有维度的序列</span></span><br><span class="line"><span class="comment"># 比如两个维度就是 (0, 1)，四个就是 (0, 1, 2, 3)</span></span><br><span class="line"><span class="comment"># 当然，顺序可以改变，比如下面就是只转置第 2 个和第 3 个维度</span></span><br><span class="line"><span class="comment"># 注意，只有超过 2 维时，这样才有意义</span></span><br><span class="line"><span class="comment"># 下面的结果中，中间2个维度被调换顺序了，顺序就在axes中指定的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.reshape(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.reshape(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.transpose(arr.reshape(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.transpose(arr.reshape(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>), axes=(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>)).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>----------------------------------------------------[[[[ 9 77 65 44]   [43 86  9 70]   [20 10 53 97]]]]----------------------------------------------------(1, 1, 3, 4)----------------------------------------------------[[[[ 9 77 65 44]]  [[43 86  9 70]]  [[20 10 53 97]]]]----------------------------------------------------(1, 3, 1, 4)----------------------------------------------------</code></pre><h2 id="分解和组合">分解和组合</h2><p>这节我们主要学习 array的分解和组合，本节是所有章节中最重要的一节，通过本节内容，您可以充分了解<code>numpy</code>（以及 Python语言）的强大，这种操作上的优雅不能说后无来者，但至少前无古人了。</p><p>内容大致包括以下小节：</p><ul><li>切片和索引</li><li>拼接</li><li>重复</li><li>分拆</li></ul><p>其中，重中之重是「切片和索引」，它基础、它高频、它无处不在。我们强烈建议您熟练掌握，其他三个相对简单，只需要各记住一个API 即可。</p><h3 id="切片和索引">切片和索引</h3><p>⭐⭐⭐⭐⭐</p><p>划重点！切片和索引是通过对已有 array进行操作而得到想要的「部分」元素的行为过程。其核心动作可以概括为：按维度根据<code>start:stop:step</code> 操作 array。</p><p>这部分内容的核心是把处理按维度分开，不处理的维度统一用 <code>:</code>或 <code>...</code>代替；在看操作时，也要首先关注「<code>,</code>」在哪里。要处理的维度和之前<code>arange</code> <code>linspace</code> 等接口使用方法是一样的。</p><p>⚠️ 需要注意的是：引支持负数，即从后往前索引。</p><p>传统的索引前面其实有讲过不少，可以自行参考 list的切片和索引。在传统的索引上，我需要重点强调下这个话题：</p><blockquote><p>关于数组切片有一点很重要非常有用，那就是数组切片返回的是数组数据的视图(也可以理解成引用)，而不是数值数据的副本。这一点也是NumPy 数组切片和 Python 列表切片的不同之处。在 Python列表中，切片是值的副本。具体可以查看下方例子：</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rng = np.random.default_rng(seed=<span class="number">42</span>)</span><br><span class="line">x2 = rng.integers(<span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(x2)</span><br><span class="line">x3 = x2[<span class="number">0</span>]</span><br><span class="line">x4 = x2[:, <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;__slice__&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(x3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(x4)</span><br><span class="line">x3[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;__change the line__&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(x2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line">x4[<span class="number">2</span>] = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;__change the column__&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(x2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>----------------------------------------------------[[0 7 6 4] [4 8 0 6] [2 0 5 9]]----------------------------------------------------__slice__----------------------------------------------------[0 7 6 4]----------------------------------------------------[0 4 2]----------------------------------------------------__change the line__----------------------------------------------------[[1 7 6 4] [4 8 0 6] [2 0 5 9]]----------------------------------------------------__change the column__----------------------------------------------------[[ 1  7  6  4] [ 4  8  0  6] [10  0  5  9]]----------------------------------------------------</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lecturer_list = [<span class="string">&quot;c7w&quot;</span>, <span class="string">&quot;lambda&quot;</span>, <span class="string">&quot;Alan&quot;</span>, <span class="string">&quot;xsun2001&quot;</span>, <span class="string">&quot;ayf&quot;</span>]</span><br><span class="line">bachelordom_list = lecturer_list[:-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(bachelordom_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line">bachelordom_list[-<span class="number">1</span>] = <span class="string">&quot;Eren&quot;</span></span><br><span class="line"><span class="built_in">print</span>(bachelordom_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(lecturer_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>----------------------------------------------------[&#39;c7w&#39;, &#39;lambda&#39;, &#39;Alan&#39;]----------------------------------------------------[&#39;c7w&#39;, &#39;lambda&#39;, &#39;Eren&#39;]----------------------------------------------------[&#39;c7w&#39;, &#39;lambda&#39;, &#39;Alan&#39;, &#39;xsun2001&#39;, &#39;ayf&#39;]----------------------------------------------------</code></pre><h3 id="fancy-indexing">Fancy Indexing</h3><p>你应该知道如何利用简单的索引值（如 arr[0]）、切片（如arr[:5]）获得并修改部分数组。在这一节中，我们将介绍另外一种数组索引，也称作花哨的索引（fancyindexing）。花哨的索引和前面那些简单的索引非常类似，但是传递的是索引数组，而不是单个标量。花哨的索引让我们能够快速获得并修改复杂的数组值的子数据集。</p><h4 id="操作布尔数组">操作布尔数组</h4><p>之前介绍了通用函数，并且特别关注了算术运算符。我们看到用 +、-、*、/和其他一些运算符实现了数组的逐元素操作。NumPy 还实现了如 &lt;（小于）和&gt;（大于）的逐元素比较的通用函数。这些比较运算的结果是一个布尔数据类型的数组。一共有6 种标准的比较操作：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x &lt; <span class="number">3</span>  <span class="comment"># less than</span></span><br></pre></td></tr></table></figure><pre><code>array([ True,  True, False, False, False])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x &gt; <span class="number">3</span>  <span class="comment"># greater than</span></span><br></pre></td></tr></table></figure><pre><code>array([False, False, False,  True,  True])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x &lt;= <span class="number">3</span>  <span class="comment"># less than or equal</span></span><br></pre></td></tr></table></figure><pre><code>array([ True,  True,  True, False, False])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x &gt;= <span class="number">3</span>  <span class="comment"># greater than or equal</span></span><br></pre></td></tr></table></figure><pre><code>array([False, False,  True,  True,  True])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x != <span class="number">3</span>  <span class="comment"># not equal</span></span><br></pre></td></tr></table></figure><pre><code>array([ True,  True, False,  True,  True])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x == <span class="number">3</span>  <span class="comment"># equal</span></span><br></pre></td></tr></table></figure><pre><code>array([False, False,  True, False, False])</code></pre><p>和算术运算通用函数一样，这些比较运算通用函数也可以用于任意形状、大小的数组。给定一个布尔数组，你可以实现很多有用的操作。首先打印出二维数组x：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rng = np.random.RandomState(<span class="number">0</span>)</span><br><span class="line">x = rng.randint(<span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([[5, 0, 3, 3],       [7, 9, 3, 5],       [2, 4, 7, 6]])</code></pre><p>你当然可以直接对布尔数组进行聚合计算，这里不再赘述，然而我们讨论更强大的工具——</p><p>用布尔数组作为掩码，通过该掩码选择数据的子数据集。以前面小节用过的 x数组为例，假设我们希望抽取出数组中所有小于 5 的元素：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x[x &lt; <span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>array([0, 3, 3, 3, 2, 4])</code></pre><p>现在返回的是一个一维数组，它包含了所有满足条件的值。换句话说，所有的这些值是掩码数组对应位置为True 的值。</p><p>通过将布尔操作、掩码操作和聚合结合，可以快速查看数据集内的数据属性。</p><h4 id="探索花哨的索引">探索花哨的索引</h4><p>花哨的索引在概念上非常简单，它意味着传递一个索引数组来一次性获得多个数组元素。</p><p>例如以下数组：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">rand = np.random.RandomState(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">x = rand.randint(<span class="number">100</span>, size=<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><pre><code>[51 92 14 71 60 20 82 86 74 74]</code></pre><p>假设我们希望获得三个不同的元素，可以用以下方式实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x[<span class="number">3</span>], x[<span class="number">7</span>], x[<span class="number">2</span>]]</span><br></pre></td></tr></table></figure><pre><code>[71, 86, 14]</code></pre><p>利用花哨的索引，结果的形状与索引数组的形状一致，而不是与被索引数组的形状一致：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ind = np.array([[<span class="number">3</span>, <span class="number">7</span>],</span><br><span class="line">                [<span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line">x[ind]</span><br></pre></td></tr></table></figure><pre><code>array([[71, 86],       [60, 20]])</code></pre><p>花哨的索引也对多个维度适用。假设我们有以下数组：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">X</span><br></pre></td></tr></table></figure><pre><code>array([[ 0,  1,  2,  3],       [ 4,  5,  6,  7],       [ 8,  9, 10, 11]])</code></pre><p>和标准的索引方式一样，第一个索引指的是行，第二个索引指的是列：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">row = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">col = np.array([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">X[row, col]</span><br></pre></td></tr></table></figure><pre><code>array([ 2,  5, 11])</code></pre><p>另外一种方法是通过传递索引的单个列表或数组来获得同样的结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ind = [<span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">x[ind]</span><br></pre></td></tr></table></figure><pre><code>array([71, 86, 60])</code></pre><p>这里需要注意，结果的第一个值是 X[0, 2]，第二个值是 X[1,1]，第三个值是 X[2,3]在花哨的索引中，索引值的配对遵循介绍过的广播的规则。因此当我们将一个列向量和一个行向量组合在一个索引中时，会得到一个二维的结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X[row[:, np.newaxis], col]</span><br></pre></td></tr></table></figure><pre><code>array([[ 2,  1,  3],       [ 6,  5,  7],       [10,  9, 11]])</code></pre><p>这里，每一行的值都与每一列的向量配对，正如我们看到的广播的算术运算：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">row[:, np.newaxis] * col</span><br></pre></td></tr></table></figure><pre><code>array([[0, 0, 0],       [2, 1, 3],       [4, 2, 6]])</code></pre><p>这里特别需要记住的是，花哨的索引返回的值反映的是广播后的索引数组的形状，而不是被索引的数组的形状。</p><h4 id="组合索引">组合索引</h4><p>花哨的索引可以和其他索引方案结合起来形成更强大的索引操作：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(X)</span><br></pre></td></tr></table></figure><pre><code>[[ 0  1  2  3] [ 4  5  6  7] [ 8  9 10 11]]</code></pre><p>可以将花哨的索引和简单的索引组合使用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X[<span class="number">2</span>, [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure><pre><code>array([10,  8,  9])</code></pre><p>也可以将花哨的索引和切片组合使用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X[<span class="number">1</span>:, [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure><pre><code>array([[ 6,  4,  5],       [10,  8,  9]])</code></pre><p>更可以将花哨的索引和掩码组合使用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mask = np.array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], dtype=<span class="built_in">bool</span>)</span><br><span class="line">X[row[:, np.newaxis], mask]</span><br></pre></td></tr></table></figure><pre><code>array([[ 0,  2],       [ 4,  6],       [ 8, 10]])</code></pre><p>索引选项的组合可以实现非常灵活的获取和修改数组元素的操作</p><h3 id="拼接">拼接</h3><p>⭐⭐⭐⭐</p><p>有时候我们需要对已有的几个 array 进行拼接以形成一个大的array（常见的例子比如不同类型特征的拼接）。本小节严格来说只有两个API：<code>np.concatenate</code> 和<code>np.stack</code>，前者是拼接，后者是堆叠（会增加一个维度），都可以指定维度。记住，有它俩就够了。</p><p>⚠️ 需要注意的是：<code>hstack</code> 和 <code>vstack</code> 和<code>stack</code> 没关系。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rng = np.random.default_rng(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">arr1 = rng.random((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">arr2 = rng.random((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr1.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr2.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>----------------------------------------------------[[0.77395605 0.43887844 0.85859792] [0.69736803 0.09417735 0.97562235]]----------------------------------------------------[[0.7611397  0.78606431 0.12811363] [0.45038594 0.37079802 0.92676499]]----------------------------------------------------(2, 3)----------------------------------------------------(2, 3)----------------------------------------------------</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认沿axis=0（列）连接</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.concatenate((arr1, arr2)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.concatenate((arr1, arr2)).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.concatenate((arr1, arr2), axis=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.concatenate((arr1, arr2), axis=<span class="number">1</span>).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>----------------------------------------------------[[0.77395605 0.43887844 0.85859792] [0.69736803 0.09417735 0.97562235] [0.7611397  0.78606431 0.12811363] [0.45038594 0.37079802 0.92676499]]----------------------------------------------------(4, 3)----------------------------------------------------[[0.77395605 0.43887844 0.85859792 0.7611397  0.78606431 0.12811363] [0.69736803 0.09417735 0.97562235 0.45038594 0.37079802 0.92676499]]----------------------------------------------------(2, 6)----------------------------------------------------</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 竖直按行顺序拼接</span></span><br><span class="line"><span class="comment"># 注意：vstack 虽然看起来是 stack，但其实它是 concatenate，建议您只使用 np.concatenate</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.hstack((arr1, arr2)).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.vstack((arr1, arr2)).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>----------------------------------------------------(2, 6)----------------------------------------------------(4, 3)----------------------------------------------------</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 堆叠，默认根据 axis=0 进行</span></span><br><span class="line">np.stack((arr1, arr2))</span><br></pre></td></tr></table></figure><pre><code>array([[[0.77395605, 0.43887844, 0.85859792],        [0.69736803, 0.09417735, 0.97562235]],       [[0.7611397 , 0.78606431, 0.12811363],        [0.45038594, 0.37079802, 0.92676499]]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_.shape</span><br></pre></td></tr></table></figure><pre><code>(2, 2, 3)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 堆叠，根据 axis=2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.stack((arr1, arr2), axis=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.stack((arr1, arr2), axis=<span class="number">1</span>).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.stack((arr1, arr2), axis=<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.stack((arr1, arr2), axis=<span class="number">2</span>).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>----------------------------------------------------[[[0.77395605 0.43887844 0.85859792]  [0.7611397  0.78606431 0.12811363]] [[0.69736803 0.09417735 0.97562235]  [0.45038594 0.37079802 0.92676499]]]----------------------------------------------------(2, 2, 3)----------------------------------------------------[[[0.77395605 0.7611397 ]  [0.43887844 0.78606431]  [0.85859792 0.12811363]] [[0.69736803 0.45038594]  [0.09417735 0.37079802]  [0.97562235 0.92676499]]]----------------------------------------------------(2, 3, 2)----------------------------------------------------</code></pre><h3 id="重复">重复</h3><p>⭐⭐⭐</p><p>重复其实是另一种拼接方式，它也可以指定要重复的维度。在有些深度学习模型数据构建中非常有用（方便）。</p><p>⚠️ 需要注意的是：是一个维度一个维度依次重复，而不是整个 array重复。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rng = np.random.default_rng(<span class="number">42</span>)</span><br><span class="line">arr = rng.integers(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[0, 7, 6, 4],       [4, 8, 0, 6],       [2, 0, 5, 9]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 axis=0（沿着列）上重复 2 次</span></span><br><span class="line">np.repeat(arr, <span class="number">2</span>, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[0, 7, 6, 4],       [0, 7, 6, 4],       [4, 8, 0, 6],       [4, 8, 0, 6],       [2, 0, 5, 9],       [2, 0, 5, 9]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 axis=1（沿着行）上重复 3 次</span></span><br><span class="line">np.repeat(arr, <span class="number">3</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[0, 0, 0, 7, 7, 7, 6, 6, 6, 4, 4, 4],       [4, 4, 4, 8, 8, 8, 0, 0, 0, 6, 6, 6],       [2, 2, 2, 0, 0, 0, 5, 5, 5, 9, 9, 9]])</code></pre><h3 id="分拆">分拆</h3><p>⭐⭐⭐</p><p>有拼接堆叠自然就有拆分，注意这不是切片和索引，就是将 array拆成想要的几份。用的不是特别多，API 只要记住 <code>np.split</code>就行了，其他的都是快捷方式。</p><p>⚠️ 需要注意的是：分拆的 axis 是对该维度进行拆分。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rng = np.random.default_rng(<span class="number">42</span>)</span><br><span class="line">arr = rng.integers(<span class="number">1</span>, <span class="number">100</span>, (<span class="number">6</span>, <span class="number">4</span>))</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[ 9, 77, 65, 44],       [43, 86,  9, 70],       [20, 10, 53, 97],       [73, 76, 72, 78],       [51, 13, 84, 45],       [50, 37, 19, 92]])</code></pre><h4 id="np.split"><code>np.split</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认切分列（axis=0），切成 3 份</span></span><br><span class="line">np.split(arr, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>[array([[ 9, 77, 65, 44],        [43, 86,  9, 70]]), array([[20, 10, 53, 97],        [73, 76, 72, 78]]), array([[51, 13, 84, 45],        [50, 37, 19, 92]])]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># （axis=1）切分行</span></span><br><span class="line">np.split(arr, <span class="number">2</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>[array([[ 9, 77],        [43, 86],        [20, 10],        [73, 76],        [51, 13],        [50, 37]]), array([[65, 44],        [ 9, 70],        [53, 97],        [72, 78],        [84, 45],        [19, 92]])]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 和上面的一个效果</span></span><br><span class="line">np.vsplit(arr, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>[array([[ 9, 77, 65, 44],        [43, 86,  9, 70]]), array([[20, 10, 53, 97],        [73, 76, 72, 78]]), array([[51, 13, 84, 45],        [50, 37, 19, 92]])]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等价的用法</span></span><br><span class="line">np.hsplit(arr, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>[array([[ 9, 77],        [43, 86],        [20, 10],        [73, 76],        [51, 13],        [50, 37]]), array([[65, 44],        [ 9, 70],        [53, 97],        [72, 78],        [84, 45],        [19, 92]])]</code></pre><h2 id="筛选和过滤">筛选和过滤</h2><p>这小节与索引和切片有点类似，但倾向于从「整体」中统一筛选出「符合条件」的内容，而索引和切片更多的是依照「某种方法」切出一块内容。本小节内容同样非常重要，可以算第二个最重要的小节。主要包括以下内容：</p><ul><li>条件筛选</li><li>提取（按条件）</li><li>抽样（按分布）</li><li>最大最小 index（特殊值）</li></ul><p>这几个内容都很重要，使用的也非常高频。条件筛选经常用于 Mask或异常值处理，提取则常用于结果过滤，抽样常用在数据生成（比如负样本抽样），最大最小index 则常见于机器学习模型预测结果判定中（根据最大概率所在的 index决定结果属于哪一类）。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rng = np.random.default_rng(<span class="number">42</span>)</span><br><span class="line">arr = rng.integers(<span class="number">1</span>, <span class="number">100</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[ 9, 77, 65, 44],       [43, 86,  9, 70],       [20, 10, 53, 97]])</code></pre><h3 id="条件筛选">条件筛选</h3><p>⭐⭐⭐</p><p>顾名思义，根据一定的条件对 array 进行筛选（标记）并后续处理。核心 API是 <code>np.where</code>。</p><p>⚠️ 需要注意的是：where 分别返回各维度的index，赋值的是「不满足」条件的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 条件筛选，可以直接在整个 array 上使用条件</span></span><br><span class="line">arr &gt; <span class="number">50</span></span><br></pre></td></tr></table></figure><pre><code>array([[False,  True,  True, False],       [False,  True, False,  True],       [False, False,  True,  True]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回满足条件的索引，因为是两个维度，所以会返回两组结果</span></span><br><span class="line">np.where(arr &gt; <span class="number">50</span>)</span><br></pre></td></tr></table></figure><pre><code>(array([0, 0, 1, 1, 2, 2]), array([1, 2, 1, 3, 2, 3]))</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不满足条件的赋值，将 &lt;=50 的替换为 -1</span></span><br><span class="line">np.where(arr &gt; <span class="number">50</span>, arr, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[-1, 77, 65, -1],       [-1, 86, -1, 70],       [-1, -1, 53, 97]])</code></pre><h3 id="提取">提取</h3><p>⭐</p><p>在 array 中提取指定条件的值。</p><p>⚠️ 需要注意的是：提取和唯一值返回的都是一维向量。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提取指定条件的值</span></span><br><span class="line">np.extract(arr &gt; <span class="number">50</span>, arr)</span><br></pre></td></tr></table></figure><pre><code>array([77, 65, 86, 70, 53, 97])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 唯一值，是另一种形式的提取</span></span><br><span class="line">np.unique(arr)</span><br></pre></td></tr></table></figure><pre><code>array([ 9, 10, 20, 43, 44, 53, 65, 70, 77, 86, 97])</code></pre><h3 id="抽样">抽样</h3><p>⭐⭐⭐⭐⭐</p><p>我们在跑模型时常常需要使用部分数据对整个过程快速验证，您当然可以使用<code>np.random</code>生成模拟数据。但有真实数据时，从真实数据中随机抽样会比较好。</p><p>⚠️ 需要注意的是：抽样的集合要求为一维向量（一般是数据的 index）。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rng = np.random.default_rng(<span class="number">42</span>)</span><br><span class="line"><span class="comment"># 第一个参数是要抽样的集合，如果是一个整数，则表示从 0 到该值</span></span><br><span class="line"><span class="comment"># 第二个参数是样本大小</span></span><br><span class="line"><span class="comment"># 第三个参数表示结果是否可以重复</span></span><br><span class="line"><span class="comment"># 第四个参数表示出现的概率，长度和第一个参数一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于（0 1 2 3）中 2 和 3 的概率比较高，自然就选择了 2 和 3</span></span><br><span class="line">rng.choice(<span class="number">4</span>, <span class="number">2</span>, replace=<span class="literal">False</span>, p=[<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.4</span>])</span><br><span class="line">lst = [<span class="string">&quot;la&quot;</span>, <span class="string">&quot;vida&quot;</span>, <span class="string">&quot;sola&quot;</span>, <span class="string">&quot;vivras&quot;</span>]</span><br><span class="line">rng.choice(lst, <span class="number">4</span>, replace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><pre><code>array([&#39;vida&#39;, &#39;vivras&#39;, &#39;la&#39;, &#39;sola&#39;], dtype=&#39;&lt;U6&#39;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 旧的 API</span></span><br><span class="line"><span class="comment"># 如果是抽样语料的 index，更多的方法是这样：</span></span><br><span class="line">data_size = <span class="number">10000</span></span><br><span class="line">np.random.choice(data_size, <span class="number">50</span>, replace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><pre><code>array([3711, 5502, 4383, 8491, 8931, 3725, 5223, 2632, 4078, 3705, 5488,       9326, 9338, 3762, 6538, 6579, 3238,   61, 7129, 7451, 6321, 3881,       8517, 6892, 2657, 4858, 6629, 9335, 3288, 2620,   90, 8999, 4165,       7333, 8764, 9840, 4517, 8409, 1938, 3730, 2372, 8088, 7804, 9017,       6956, 6413,  147, 5721, 6089, 8900])</code></pre><h3 id="最值-index">最值 Index</h3><p>⭐⭐⭐⭐⭐</p><p>这小节主要是两个 API：<code>np.argmax(min)</code> 和<code>np.argsort</code>，当然最常用的还是第一个，不用说，自然是可以（需要）指定axis 的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rng = np.random.default_rng(<span class="number">42</span>)</span><br><span class="line">arr = rng.uniform(<span class="number">1</span>, <span class="number">100</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[77.62164881, 44.44896554, 86.00119407, 70.03943488],       [10.32355744, 97.58661281, 76.3528305 , 78.82036622],       [13.68324963, 45.58820785, 37.7090044 , 92.7497339 ]])</code></pre><h4 id="np.argmaxargmin"><code>np.argmax/argmin</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有值中最大值的 Index，基本不这么用</span></span><br><span class="line">np.argmax(arr)</span><br></pre></td></tr></table></figure><pre><code>5</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按列（axis=0）最大值的 Index</span></span><br><span class="line">np.argmax(arr, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 0, 2])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按行（axis=1）最小值的 Index</span></span><br><span class="line">np.argmin(arr, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([1, 0, 0])</code></pre><h4 id="np.argsort"><code>np.argsort</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认按行（axis=1）排序的索引</span></span><br><span class="line">np.argsort(arr)</span><br></pre></td></tr></table></figure><pre><code>array([[1, 3, 0, 2],       [0, 2, 3, 1],       [0, 2, 1, 3]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据按行（axis=1）排序的索引，同上</span></span><br><span class="line"><span class="built_in">print</span>(np.argsort(-arr, axis=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(np.argsort(arr, axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>[[2 0 3 1] [1 3 2 0] [3 1 2 0]][[1 3 0 2] [0 2 3 1] [0 2 1 3]]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据按列（axis=0）排序索引</span></span><br><span class="line">np.argsort(arr, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[1, 0, 2, 0],       [2, 2, 1, 1],       [0, 1, 0, 2]])</code></pre><h2 id="矩阵和运算">矩阵和运算</h2><p>这一节我们将聚焦矩阵和相关的运算，主要包括：</p><ul><li>算术（四则运算及其他基础算术）</li><li>广播</li><li>矩阵相关</li></ul><p>这些内容其实使用非常普遍，普遍到我们甚至都不会察觉到自己在使用，而且也非常简单。当然，高纬度的计算我们这里并不涉及，但逻辑是一致的，只是更加复杂。</p><h3 id="算术">算术</h3><p>⭐⭐⭐⭐</p><p>所有的算术函数均可直接运用于 array。</p><p>⚠️ 需要注意的是：<code>mod</code> 运算可以指定多个被除数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rng = np.random.default_rng(<span class="number">42</span>)</span><br><span class="line">arr = rng.integers(<span class="number">1</span>, <span class="number">20</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[ 2, 15, 13,  9],       [ 9, 17,  2, 14],       [ 4,  2, 11, 19]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># +-*/ 四则运算，就跟两个数字计算一样</span></span><br><span class="line">arr * <span class="number">2</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 4, 30, 26, 18],       [18, 34,  4, 28],       [ 8,  4, 22, 38]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 平方也可以</span></span><br><span class="line">arr ** <span class="number">2</span></span><br></pre></td></tr></table></figure><pre><code>array([[  4, 225, 169,  81],       [ 81, 289,   4, 196],       [ 16,   4, 121, 361]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开方</span></span><br><span class="line">np.sqrt(arr)</span><br></pre></td></tr></table></figure><pre><code>array([[1.41421356, 3.87298335, 3.60555128, 3.        ],       [3.        , 4.12310563, 1.41421356, 3.74165739],       [2.        , 1.41421356, 3.31662479, 4.35889894]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># log</span></span><br><span class="line">np.log(arr)</span><br></pre></td></tr></table></figure><pre><code>array([[0.69314718, 2.7080502 , 2.56494936, 2.19722458],       [2.19722458, 2.83321334, 0.69314718, 2.63905733],       [1.38629436, 0.69314718, 2.39789527, 2.94443898]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 超过5的都换成5</span></span><br><span class="line">np.minimum(arr, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[2, 5, 5, 5],       [5, 5, 2, 5],       [4, 2, 5, 5]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 低于5的都换成5</span></span><br><span class="line">np.maximum(arr, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[ 5, 15, 13,  9],       [ 9, 17,  5, 14],       [ 5,  5, 11, 19]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 四舍五入</span></span><br><span class="line">np.<span class="built_in">round</span>(np.sqrt(arr), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[1.41, 3.87, 3.61, 3.  ],       [3.  , 4.12, 1.41, 3.74],       [2.  , 1.41, 3.32, 4.36]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># floor/ceil</span></span><br><span class="line">np.floor(np.sqrt(arr))</span><br></pre></td></tr></table></figure><pre><code>array([[1., 3., 3., 3.],       [3., 4., 1., 3.],       [2., 1., 3., 4.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ceil(np.sqrt(arr))</span><br></pre></td></tr></table></figure><pre><code>array([[2., 4., 4., 3.],       [3., 5., 2., 4.],       [2., 2., 4., 5.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mod &lt;=&gt; x % 3</span></span><br><span class="line">np.mod(arr, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[2, 0, 1, 0],       [0, 2, 2, 2],       [1, 2, 2, 1]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr - <span class="number">5</span></span><br></pre></td></tr></table></figure><pre><code>array([[-3, 10,  8,  4],       [ 4, 12, -3,  9],       [-1, -3,  6, 14]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 还可以使用多个被除数</span></span><br><span class="line">np.mod(arr, arr - <span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[-1,  5,  5,  1],       [ 1,  5, -1,  5],       [ 0, -1,  5,  5]])</code></pre><h3 id="矩阵">矩阵</h3><p>⭐⭐⭐⭐⭐</p><p>这一小节主要介绍线性代数中矩阵的处理，我们会介绍几个矩阵相关常用的API。</p><p>⚠️ 需要注意的是：<code>dot</code> 和 <code>matmul</code>在高维度时表现不同。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rng = np.random.default_rng(<span class="number">42</span>)</span><br><span class="line">a = rng.integers(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">b = rng.integers(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line">c = rng.integers(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">a, b, c</span><br></pre></td></tr></table></figure><pre><code>(array([[1, 7],        [6, 4],        [4, 8]]), array([[1, 7, 2, 1],        [5, 9, 7, 7]]), array([[7, 8, 5],        [2, 8, 5],        [5, 4, 2]]))</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># array 乘法</span></span><br><span class="line"><span class="comment"># 矩阵乘法</span></span><br><span class="line">np.dot(a, b)</span><br></pre></td></tr></table></figure><pre><code>array([[ 36,  70,  51,  50],       [ 26,  78,  40,  34],       [ 44, 100,  64,  60]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们看下高维度下 dot 和 matmul 的区别</span></span><br><span class="line"><span class="comment"># ijk, lkm -&gt; ijlm</span></span><br><span class="line">rng = np.random.default_rng(<span class="number">42</span>)</span><br><span class="line">a = rng.integers(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">b = rng.integers(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------------------------------------&quot;</span>)</span><br><span class="line">c = np.dot(a, b)</span><br><span class="line">d = np.matmul(a, b)</span><br><span class="line"><span class="built_in">print</span>(c, c.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(d, d.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>-----------------------------------------------------[[[1 7 6]  [4 4 8]  [1 7 2]] [[1 5 9]  [7 7 7]  [8 5 2]]]-----------------------------------------------------[[[8 5 5 4]  [2 9 8 6]  [4 8 5 4]] [[5 3 1 5]  [8 1 8 8]  [3 6 2 7]]]-----------------------------------------------------[[[[ 46 116  91  70]   [ 79  46  69 103]]  [[ 72 120  92  72]   [ 76  64  52 108]]  [[ 30  84  71  54]   [ 67  22  61  75]]]</code></pre><p>​<br />​[[[ 54 122 90 70] ​ [ 72 62 59 108]] ​<br />​[[ 98 154 126 98] ​ [112 70 77 140]] ​<br />​[[ 82 101 90 70] ​ [ 86 41 52 94]]]] (2, 3, 2, 4) ​----------------------------------------------------- ​ [[[ 46 116 91 70]​[ 72 120 92 72] ​ [ 30 84 71 54]] ​<br />​[[ 72 62 59 108] ​ [112 70 77 140] ​ [ 86 41 52 94]]] (2, 3, 4) ​-----------------------------------------------------</p>]]></content>
    
    
    <summary type="html">我真是不敢相信以前我居然敢不学 Numpy 就搓 Torch....</summary>
    
    
    
    <category term="CS" scheme="http://example.com/categories/CS/"/>
    
    <category term="Python" scheme="http://example.com/categories/CS/Python/"/>
    
    
    <category term="2022夏季" scheme="http://example.com/tags/2022%E5%A4%8F%E5%AD%A3/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>我们为什么会选择社会化抚养</title>
    <link href="http://example.com/2022/06/16/Lecture/2022%20Spring/%E8%AF%B7%E4%BB%A5%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97%E5%91%BC%E5%94%A4%E6%88%91/"/>
    <id>http://example.com/2022/06/16/Lecture/2022%20Spring/%E8%AF%B7%E4%BB%A5%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97%E5%91%BC%E5%94%A4%E6%88%91/</id>
    <published>2022-06-16T11:50:59.953Z</published>
    <updated>2022-12-30T13:10:06.562Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="readme">readme</h1><p>我初一时，第一次离开亲人到成都念书。那时候年岁尚小，仍然顽皮嬉闹，不谙世事。虽自己不以为意，然令父母甚是挂念。初一时母亲尝与我寄信数封，现仍一一存于书柜当中。</p><p>在清华园的第二年，我在习概课程上与老师同学讨论了社会化抚养的可能性，遂写信一封，寄于我的后代，希望在不远的未来的他能够享受到生产力巨大进步带来的社会伟大变革，能够在高度发达的社会化抚养下成为新时代的万千贡献者中的一员。囿于人生经历有限且为了叙述方便，请允许将这封信寄于一个名叫Alex 的男孩（绝无性别歧视之意）。</p><h1 id="摘要">摘要</h1><p>按照陆老师的要求，摘要如下：</p><p>在改革开放后，生产力的进步带来社会的变革越发显著，人们的生活水平日益提高，因此我们需要不断学习知识，发展先进的生产力或者改革现有的生产制度。而另一方面，接受过优质教育，掌握先进生产技术的人收入与社会地位不断上升，实现了阶级的跃升，让普通民众认识到了优质教育资源的价值，社会陷入了教育成本昂贵而导致出生率下降的社会矛盾。本文提出了社会化抚养的方式来解决此问题。社会化抚养能够提升人口出生率，提高下一代劳动力的身体素质，为生产力的进一步提升创造条件。中国社会对于社会化抚养持有诸多疑惑，诸如社会化抚养是否会淡化传统亲情，社会化抚养如何实现权责匹配等等。本文逐一进行回复。最后，广义的解放和革命还没有结束，主动的社会变革还必须继续推进，希望我国能早日实现社会化抚养，解决目前的人口困境。</p><h1 id="我们为什么会选择社会抚养">我们为什么会选择社会抚养</h1><p>亲爱的 Alex：</p><p>今天是你小学毕业后的第七天，也是我们踏上川西高原骑行旅程的第三天。再过三个月，你即将步入中学，在新的旅程丰富你对科学与人类社会的认知，而我终于能够以少年这个美好而充满热忱的词语来称呼你。那么，我热忱温暖的少年，展信佳！</p><p>还记得在你小学三年级的自然科学课上，地理老师用 VR设备带着全班同学一同在青藏高原游览。月底放假，你回到家里，激动地向我和妈妈讲起了自然科学课上的所见所闻——一望无垠的草原，灰白的绵羊与漆黑犹如身披铠甲的牦牛，还有草原上撑起的帆布帐篷…无一不在你幼小懵懂的心里激起了好奇的浪花，让你看到了在我们所居住的现代生活之外，还有那么多，奇妙美好，你从未在课堂与实践中见识过的生活。那时候我就给你和妈妈说，等到你小学毕业，我们一家人一同去青藏高原旅行。在你记事之后，由于路途遥远，我们再也没有带你去过四川。虽然学校的实践活动丰富多彩，小学毕业的你就已经去过了繁华的香港、旧金山，也见识过雄浑的蒙古草原与阿尔卑斯山脉。然而，川西高原与其他地域并不相同，希望这次难能可贵的骑行之旅能够带你领略你三年级就心心念念的青藏高原风光。</p><p>当然，除了青藏高原的山川风景，<strong>我更加希望这次旅行能够让你收获到对于你所处的中国社会的更深入的认知，为你在书本上学习的自然科学与人文社会知识提供丰富的例子。正是这些知识带给了我们的国家无比强大的生产力与先进的社会制度，让我们享受着丰富的物质生活的同时还能够畅享美妙的自然景观。希望这次旅途中的点滴与这封信接下来的讨论，能够让你明白，为什么我们的国家需要社会抚养。</strong></p><h1 id="为什么要学习">为什么要学习</h1><p>为什么我们的国家需要社会抚养，这个问题听着很奇怪，似乎从你孩童时开始，社会化抚养就是很自然的事情。那么，我们换个问题，为什么我们要学习？</p><p>这个问题似乎更奇怪，因为你从小到大的玩伴们都在学习，反而不学习是件很奇怪的事情。但是，亲爱的少年，今天我们一同来讨论你自出生开始学习的意义。尽管在人类文明高度发达的今天，社会化抚养已在中国全面实施，你自幼就在吸取着人类创造和理解的各种知识，终生学习这个理念早也已深入每个现代人的内心，然而我希望从你在社会科学课上学习的马克思主义的角度来讨论，我们为什么要学习。</p><p>在讨论你的学习之前，我想先带你回顾下我的学习经历，为你理解的父辈们，在社会相对落后的二十一世纪初叶的学习历程。你可以借此想象一番那时的我们是如何学习的，而我们又如何理解自身学习的意义。</p><h2 id="学习最初的意义">学习最初的意义</h2><p>在你出生前五年左右，中国就开始试行了社会化抚养，而到了你出生时，社会化抚养已经高度发达，你自小就享受着先进的社会化抚养，可能还认为这样的教育方式是最自然而合理的，然而事实上，每一项生产制度的伟大进步都有着无数先人试错和激烈的讨论才得以实行。在柏林墙建立之前，没人相信它会建立；而在柏林墙倒塌之前，没人相信他会倒塌。社会化抚养也是如此，在社会化抚养实施之前，没人相信它会实施；但是倘若有一天，我们的社会发展到了需要更适应先进生产力方式的教育时，社会化抚养也可能会结束，转为其他形式的教育。</p><p>而在社会化抚养之前呢，之前的教育是什么样的。不知道你是否好奇过，爸爸妈妈在和你同岁的时候，是如何学习的？</p><p>而这，正是我们此次旅行的一大意义——从成都出发前往草原的崎岖的山路，便镌刻着你父辈的学习历程。</p><p>你应该知道，这次旅途我们会经过我的故乡，青藏高原上的一座城市——马尔康。中国的大多城市名字都是两个字，而马尔康这座城市的名字自然与众不同，因为他来自藏语，在藏语里意为火苗旺盛的地方。火苗旺盛是藏民们对于生活的美好寄望，温暖的篝火可以将食物煮熟，可以驱散寒冷，可以带给一大家人温暖与希望。你可以想见，正是火，这样最基本的自然要素，给予了藏民生活伟大的进步，驱散了寒冷，消退了由于食物煮不熟而肆虐的包虫病，给藏地的生活带来了希望。而这，正是自然科学，最基本的意义——研究他们，学习他们，能够给人类的生活带来进步。</p><p>然而，最为原始的火苗带给人们的生活进步还是有限的，譬如不加以管控，火苗可能会引发火灾，造成巨大的损失。这其实也是知识不够发达导致的，因为我们还没能完全掌握使用火种的方法，而我认为，学习最初的意义便在于此——</p><p><strong>生产力的进步能够带来伟大的社会变革，提升人类的生活水平，因此我们需要不断学习知识，发展先进的生产力或者改革现有的生产制度。</strong></p><h2 id="知识改变命运">知识改变命运</h2><p>相信见到我提供的例子，你已经对于学习的意义有了更基本的理解。相信你心中还有疑惑——都是学习，为什么你接受的教育是社会化抚养，而你的父辈们并不是。</p><p>对此，我想援引马克思的言论来回答：一切问题都是生产力和生产关系的矛盾。</p><p>你如今接受的社会化抚养，内容非常丰富。你和你的同学们，能够在 VR设备里听全国最优秀的老师们讲解知识，在实验室能够做最基本的物理化学和生物实验。学校还会组织你们前去国家公园，实地考察那里的动物、植物还有地质情况。在夏天与冬天，还有集体组织的研学活动，老师组织着大家一同前往国内外各地游玩，感受当地的社会文化与自然风情。除了学习本身，学校还有专业的心理老师来确保你们的心理健康，学校还有各式各样丰富的体育场所，供你们开展丰富的体育活动。</p><p>正是在这样的社会化抚养下，你在小学就能收获几乎是你的父辈们初中毕业才具有的知识水平，参与过丰富的体育与文艺活动，还广泛地游览国内外各地，真正能够对人类社会产生源于课本而超出课本的认知。而同时期的我呢？我不得不承认，在我小学时所能接收到的知识，不过是你的零头，而除了篮球和羽毛球这类并不需要太过专业场地的运动之外，体育锻炼几乎与我无缘。我与音乐的唯一联系是小学毕业时颇为喜爱我的音乐老师赠予我的口风琴。至于心理辅导还有前往各地观光的机会，更是完全没有。直到高二之前，我从未走出过四川省…</p><p>我说这么多，并不是想要向你说明你如今的学习是多么的幸福，而要求你不要身在福中不知福。我只是想让你意识到，社会化抚养是社会伟大的进步。更难能可贵的是，我中学时就读于四川省最好的私立中学，每年学费高昂都没能提供能够和你现在的生活所媲美的课外活动。而我国早已在初等教育和中等教育阶段实现了高度的学校公平，将教育几乎从家庭完全抽离，全中国几乎所有孩子都能享受到你所接受的教育。</p><p>回到你的问题上，为什么你接受的教育是社会化抚养，而你的父辈们并不是？</p><p>因为你所接受的教育需要发达的生产力做基础，而它更能促进先进生产力的发展。而我儿时的教育，受限于生产力不足、社会发展水平相对落后、优质教育资源不足等问题，不足以支撑社会化抚养的巨大开销。</p><p>这个解答站在你的视角，非常容易理解，因为如今知识改变命运的道理早已深入人心，但实际上，在新中国成立之前，乃至在改革开放之前，这个道理都不是那么显而易见。</p><p>知识能够推动生产力发展，能够为社会与个人创造价值，改革开放之后，大量的产业工人因为掌握了先进的生产技术，开办自己的企业，成为了最早一批的企业家。而众多知识分子将自身所学习的科学技术融入到产业链当中，极大提高了各行各业的生产效率，也为自己带了高额收益与社会地位。不同于古代严格的封建制度下阶级高度固化，知识只掌握在极少部分统治阶级手中，千百年来社会生产力都没有本质性进步，让社会绝大多数人口都意识不到知识的意义，在改革开放后，知识改变命运的效果从未如此显著，使得全社会的人们基本都认可了学习的价值。</p><p>正因如此，优质的教育资源受到了全社会的热捧。更进一步，步入新世纪后，在改革开放后接受优质教育的许多人已经成功通过教育实现了千百年来难以想象的阶级跃迁，获得了丰富的财富与较高的社会地位，让大多数还未接受到优质教育的人看见了成功的可能，虽然自身已经很难再重返校园继续学业，然而这些尚未接受过优质教育的人也会热衷于在子女教育上巨量投入，让子女获得通过知识改变命运的机会。而对于那些已然通过知识文化获得了较高社会地位的人而言，富裕到能够直接通过血缘关系让子女继承家族社会地位是极其困难的，他们作为第一代教育的受益者，会更加重视子女的教育。于是，到了我念书的年代，全民对优质教育资源的追求空前，然而优秀的高等教育资源和匹配先进生产力的优质工作岗位增加并不如人们对教育的追求那般增长迅速，教育陷入了可怕的军备竞赛。为了获得相同的优质教育资源，人们需要付出比二十年前多出数倍的投入…</p><h1 id="社会化抚养">社会化抚养</h1><h2 id="时代被教育锁死">时代被教育锁死</h2><p>讲了这么多，相信你深刻地认识到了知识改变命运，并且到了我念书的年代，教育压力空前。</p><p>从普通人的视角来看，在我念大学时的中国社会有三个新特征：</p><ul><li>一是阶级差别明显，不同阶级间的财富差距不像上世纪末期年代那样最多十几倍，而能够达到几乎正无穷。</li><li>二是阶级变化很快，而仅仅在那之前 20年，工人的孩子接班当工人，农民的后代主要种地，而知识分子的后代很容易考大学。</li><li>三是互联网信息越来越发达，每个人都能看到不同阶级的生活。这是历史上从来没有过的现象。</li></ul><p>这三个效果堆在一起，就是普通人恐惧阶级下降，向往阶级上升，认为自己和子女未来必须过上更高阶层的生活，至少不能往更低的阶级滑落。</p><p>超过一半家庭都这么想，就造成了一种军备竞赛的效果，每个家庭都消耗全部资源来追求阶级上升。或者说就像大家看露天电影，有人为了看得更清楚站起来，导致其他人也站起来，最终所有人接受到的信息总量并没有变化，但是都站得很累，没力气看第二部电影。</p><p>总而言之，教育压力，就是阶级压力。大多数人，一旦见识到中等以上水平的生活，就不会接受自己和子女阶层下沉的可能性。哪怕社会发展水涨船高，让将来的中下层生活水平超过现在的中上层，他们也在心理上拒绝接受正常的阶层波动。而通过让子女接受优质教育来维持自身阶级，甚至实现阶级跨越的成本剧增，导致大多人选择了少生孩子甚至不生，减少阶层下降的风险。</p><p>而另一方面，我和我的同龄人们需要面对激烈的教育压力。学习会极大地占据我们的生活，挤压除了学习之外的所有，让我的大多数同龄人进入生育年龄后并没有父辈的生育意愿。</p><p>中国社会的人口矛盾空前激化。大多数人能够靠努力改变社会地位，结果彼此相互制造了竞争压力，极大抑制了生育意愿，根本生产不了新增人口。社会在发展中把自己锁死，提供不了足够数量的高质量人口。锁死的社会没有前途，任何加强已知生育刺激的方案，都不能消除普通人对阶层下降的恐惧。</p><p>从家庭角度看，少生是一个理性选择，但是从社会发展的角度来说，这会制造几个明显的长期问题。</p><p>第一个问题是人口暴跌。你的爷爷奶奶那代人，也就是所谓的七零后有 2.1亿，比与我一同出生的千禧一代零零后多 5000万，差了一个加拿大的人口。我读大学时，就有人预测，一旦我的父辈们进入退休年龄，劳动人口肯定会快速下降。中国十四亿人口占据世界7% 的面积，5%的可开发土地。人口缓慢下降并不是问题，但是快速下降必然会冲击所有的经济体系。</p><p>第二个问题是年轻人的健康水平。现在的你们每天都有充足的运动时间，然而在我的中学时代，国家不可能用体育测试作为主要的选拔标准，学生的大多数时间都用在中考高考的主要考试科目上。我们这一代人的身高体重明显超过八零后和九零后，但是体育运动时间严重不足，耐力和爆发力都明显下降。当时就有人预测，等到我们进入中年以后，劳动能力会很快下降，给医保带来沉重压力。</p><p>人口的数量和健康都出了问题，如果长期不解决，中国社会就会自食恶果。更进一步，倘若国家的社会生产力被暴跌的人口锁死，任何人都无法幸免，因为社会上每个人的积蓄归根结底是用下一代的劳动来兑现的，如果下一代人生产的商品不够多，攒多少钱也只是一个数字而已。</p><p>教育和人口矛盾空前，以与我同时代的每个人，无论有没有子女，必须想办法减少家庭抚养压力，避免整个社会因为教育军备竞赛出现人口暴跌。</p><h2 id="如何解决">如何解决</h2><p>确定了问题之后，对于解决方案，当时的中国社会提出了许多要求。</p><p>首先，要解决时间问题。我读书时，家中只有我一个孩子，却需要父母两个非教育专业的人来照顾。可想而知，无论是辅导功课，检查作业，还是接送孩子，家庭抚养都是一对一甚至是多对一，每个孩子要占用一个甚至多个成年人的精力，这是一种非常低效的劳动。而且普通的家长没上过师范学校，并不知道怎么把自己的知识高效复制给孩子，所以辅导学习的效果其实也不好。</p><p>可以设想，如果这些事情由专业的人来做，5 个老师对付 30个孩子，学习效果一定更好。再如你们小学班级那样，加上一个个校车司机，接送问题也基本解决，不需要所有家庭耗尽精力去陪伴。</p><p>其次，当时的学生下课就被接走，忙着去上各种培训班，参加教育军备竞赛。这其实默认着学生的课余时间足够他们去参加这种竞赛。国家从2003年开始号召学校教育减负，结果学校越是强调减负，竞赛就越激烈，家长的负担就越重。中小学生需要的不是这种减负，而是需要延长在校时间，合理使用在校时间。</p><p>第三个方面，社会化抚养前，大城市的家长热衷于购买学区房，核心问题是各个学校的教育水平差别大。九年义务教育虽然是国家提供的，但是那时学校之间的差距惊人。国家从来没说清楚为什么各个学校不一样，为什么同一个省，甚至同一个城市的各个学区之间，差别就像瑞士和非洲那么大，学区房的价格也像旧金山和阿拉斯加。</p><p>但是，宪法第四十六条规定，中华人民共和国公民有受教育的权利和义务，义务教育法第四条规定，儿童、少年有平等接受义务教育的权利。学区房概念是违法的，就算摇号入学，只要学校之间不平等，也是违法的。就算只是为了落实法律，也要消除学区房的特权，顺便消除抢购学区房的压力。</p><p>这三个问题总结下来，结论很清楚，新的教育制度必须主动打破公立学校之间的不平等状况，多雇佣老师，尽量延长在校时间。多出来的在校时间，一部分用来辅导作业，因材施教，一部分用来强制搞集体活动，户外运动，增强学生体质。最后还需要普遍安排校车，接送学生，允许有需求的学生临时住校。这才能把家长普遍解放出来，让他们有时间去照顾两个甚至三四个孩子，同时保证下一代的身心健康。</p><p>但是，前面的要求只说了学校的责任，没有说权利。Alex，作为社会主义国家的一份子，你应该明白，世界上大多数事情都要责任权利对等，才能有效运行。如果单方面增加学校的义务，制度建设还是不够。比如说，其实那时就有不少农村中学是寄宿制的，在校时间非常充足，但是学校还是不组织集体活动，甚至禁止户外体育运动，因为学校怕受伤了担责任，赔钱赔不起。</p><p>学生参加体育活动，肯定有受伤风险，但是从全体学生来看，体育活动肯定利大于弊，有利于所有人的健康。如果学生回家以后参加体育活动，责任是家长的，在校参加体育活动，责任是学校的。如果学校延长在校时间，增加体育活动，但是也对因此产生的风险担负全部责任，任何一个校长都没有动力去搞体育活动，就算上级强制要搞，最后多半也是选择最安全的方案，比如集体打太极拳，绝对不会有足球篮球这种对抗性项目。</p><p>所以，学校需要更充足的制度保障，比如说国家给每个学生建立体育运动保险制度，如果正常组织运动出现风险，用风险金给学生治疗赔偿，不需要学校承担额外的风险，也不允许家长无限追究学校的责任。看到如今的你如此热爱锻炼，我不由得感谢制度的伟大进步。</p><p>体育运动的风险管理问题，其实引出了一个更大的问题，就是抚养未成年人，教育未成年人，这个过程包含了复杂的权利和责任分配，并不仅仅是一个单方面传授知识，你情我愿的事情。</p><p>比如说纠正少年儿童的错误行动，让未成年人建立正确的价值观，必须涉及一定的批评和管制，甚至是限制自由，轻微体罚。我上小学的时候，你的爷爷奶奶送我上学，第一次见到老师，除了客气话之外，都会交代一句话“孩子如果犯了错，不好好学习，老师狠狠揍他，打出血也不要紧”。这实际上就是非正式地给学校授权，转让一部分监护权，从而保证教育质量。</p><p>我当然不赞同教师打学生，也不认为教师可以随便惩罚孩子，但是，倘若学校没有得到这种充分授权，就算是正常管理，也很容易被拥有监护权的父母追究责任，所以当时很多老师干脆对很多学生保持放任状态，至少避免了被家长找麻烦。</p><p>如果希望延长在校时间，让教师接管孩子更多的生活，就必须走法律程序，把一部分监护权转移到学校。我们不能一方面指望学校对孩子负更多的责任，另一方面抓住全部监护权不放。</p><p>总而言之，解决方案可以用一句话概括，<strong>就是用社会化抚养取代一部分家庭抚养，避免一个孩子的教育投入占用家庭的全部剩余资源，从而提高生育率。</strong></p><p>作为一个社会主义国家，用社会化抚养来取代一部分家庭抚养，避免阶级压力破坏人口再生产，这是社会发展到一定阶段的必经之路。生育率快速下降，是当时生产制度落后于生产力发展水平与再发展需求的结果，所以人们提出了社会化抚养。</p><h2 id="为什么必须社会化抚养">为什么必须社会化抚养</h2><p>相信你心中必然和那时的许多人一样，很疑惑，为什么必须社会化抚养？</p><p>总体而言，问题体现为家庭抚养压力大，所以很直接的一个解决方案是国家应该出钱来帮助减轻家庭抚养负担，而不是直接搞社会化抚养。</p><p>但是，基于之前我们简单的社会计算，只要家庭抚养，就是一对一的教育，就一定会把家长的阶级压力转给子女，最终从全社会的视角看，还是父母和子女双输的局面。所以不能头疼医头，脚疼医脚，必须给一个新的教育思路。</p><p>另外，更重要的一点是，随着社会进步的爆炸，人们越来越难以教育自己的后代。你的爷爷奶奶在他们少时罕见地接受过高等教育，然而自我上了初中后，他们便完全没法辅导我的功课。我中学阶段就读于全省最好的中学，而大学就读于全亚洲最好的大学，很多时候也很难辅导你的课业。时间线再向前延伸，之前的几千年，人类的生活变化很缓慢，父母的生活和子女的生活差不多，所以只要把子女带在身边，一起种地，一起做家务活，言传身教，就自然把全部知识传递给下一代了。</p><p>然而改革开放后的社会，十几年时间，公民所需要的知识结构就会更新一半，生活方式也能让上一代人认不出来。倘若30年前读书时候的经验去指导后代，用年轻时的经验去教育孩子，就算能完美复制，也不适应孩子长大以后的生活。更何况完全做不到完美复制，所以人们别无选择，必须相信一个不断更新教育方式的社会机构，而不是靠自身去教育后代。这就是为什么所有现代国家都有义务教育法，家长不把孩子送到学校就是违法。现在教育的内涵越来越丰富，社会化抚养也许不能完美培养下一代，但一定比家庭抚养更适应社会生产力的发展。</p><p>另外，自古以来，大多数家长并不是像今天这样精心抚养子女。我们的祖先基本的生育策略是多生孩子，放养，指望其中一两个孩子能够成才，继承家业，而不是希望每个孩子都比自己强。家长和国家都希望下一代人的知识更丰富，生活比现在更精彩，希望尽量不抛下任何一个孩子，当然不可能再沿用几千年来的教育模式，必须提倡社会化抚养。</p><p>而当时的趋势是，即是国家不提倡社会化抚养，很多家长也自己在选择社会化抚养，尤其是农村打工家长，自己没空管孩子，就把把包括惩戒权在内的监护权事实上交给社会机构，比如说一些戒网瘾学校。结果闹出很多虐待甚至人身伤害事件。与其让人民被动选择社会化抚养，不如国家主动规划，这才是对下一代负责的态度。</p><p>当然，我相信你也会好奇社会化抚养的安全问题——没有血缘关系的教师拿到监护权以后，侵害学生，或者至少不负责。然而，其实家庭里面的虐待和错误教育也不少，只是那是的媒体不加报道，法律也不追究责任而已。从大量暴露的虐待儿童事件看来，血缘是靠不住的，只有监管才信得过。</p><p>避免教师滥用监护权的方式实际上只有利用现代技术的力量。从你儿时开始，每个学生，每个校园空间都有全面的监控设备。监控数据平时作为隐私封存，如果出现事故，才拿出来分析责任。这样才能让家长放心，也让教师放心。反过来说，实际上国家也对普通家庭进行抽查，如果发现有虐待或者不合理的抚养，会及时警告纠正，乃至于剥夺不合格父母的抚养权。中国人从一出生开始，就是中国公民了，如果有人侵害中国公民的利益，哪怕是亲生父母，国家也要尽早干预。</p><p>相信这些回答能够解答你的疑惑。当然，其实那时对社会化抚养的最大质疑是担心社会化抚养损害亲情。</p><p>这样的质疑显然不合理，毕竟我们一家人非常亲密。正如我所讨论的，社会化抚养的初衷，是减轻抚养压力，增加生育率。平日里你都在学校，难得回家的日子，我们一家人会一同去旅行，去公园，去参加体育运动，一起读书，一起聊天，看电影，增进亲情。社会化抚养是促进亲情的工具，而不是消灭亲情的冷酷制度。</p><p>当然，人类对于阶级跃升的欲望总是难以避免。然而，我念书时，我的同学就劝我，说不是你上了清华，有一份体面工作，你的孩子就必须上MIT。毕竟我们早已不是贵族封建社会，我们不是皇帝，不需要生个孩子继承皇位。尽量多带孩子出去旅行，和他们一起看看电影，要比亲自督促他们学习有趣得多，也更有益他们的身心健康。为了让父母有这份自由，更应该支持社会化抚养。</p><p>还有一个问题，这也是我希望你能够记住的。但凡讨论制度的改革，都需要解决谁负责，以及经费从何处来的问题。总有人担心，社会化抚养的花销太过昂贵。毕竟多雇佣教师，增加学校的功能，延长在校时间，给学生买保险都是要花钱的。</p><p>但是，做一个简单的算术题就知道，无论对于国家还是个人，社会化抚养肯定是减少经济成本的方案。我读书时，大多数家庭如果要达到比较满意的家庭抚养，都至少需要一个成年劳动力的一半付出，这还不算祖父辈牺牲自己的退休时间的投入。</p><p>我印象里，我中学时的同学家中如果有两个及以上的孩子，除非夫妻双方单位的福利都非常好，否则必然要有一个人辞职在家，专职陪孩子。这意味着，如果我们通过增加个人所得税来承担额外的社会化抚养成本，哪怕税率有20%，也能通过解放劳动力来提高家庭收入，创造更多的社会财富。</p><p>最后，如果出生人口持续暴跌，失去了生产力作为支撑，社会上流通的货币都有变成废纸的危险。社会化抚养，提高生育率，增加未来的劳动人口，反而能维持宏观社会生产力，给每个人都带来长期的社会红利。</p><h2 id="社会主义国家更需要社会化抚养">社会主义国家更需要社会化抚养</h2><p>最后一点，我们是社会主义国家。所谓社会主义，最主要的特性就是不会接受所有自发竞争形成的制度，要由国家和社会主动调节社会秩序，促进所有人的福利。</p><p>社会化抚养和家庭抚养相比，也许听起来不符合传统，不符合我们已经形成的家庭观念，但问题在于，自古以来，任何一年也没有如此强大的社会生产力，没有这么多中国人希望子女的生活比自己更好，没有任何和平富足的年代会出现自发的人口暴跌。</p><p>从来没出现的问题，必然要有新的应对方案，不要被已经形成的习惯性思维束缚住，解放思想、实事求是，这才是我们这个社会主义国家最宝贵的思想财富。</p><h1 id="伟大的社会改革仍在继续">伟大的社会改革仍在继续</h1><p>今天讲述了这么多，希望能够让你从历史的角度看到如今你接受的社会化抚养所解决的社会矛盾与历史价值。实际上，作为马克思主义的接班人，凡是具有历史必然性的事物都可以从生产力发展与生产制度的关系来理解，包括马克思主义本身。但是，广义的解放和革命还没有结束，主动的社会变革还必须继续推进。希望如今享受着生产力进步带来的社会红利的你在今后的日子里绝不要忘记还要继续推动生产力发展与生产制度改革的使命，成为真正的共产主义的接班人！</p>]]></content>
    
    
    <summary type="html">亲爱的 Alex，展信佳...</summary>
    
    
    
    <category term="课程" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    <category term="思政" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/%E6%80%9D%E6%94%BF/"/>
    
    
    <category term="人类社会观察" scheme="http://example.com/tags/%E4%BA%BA%E7%B1%BB%E7%A4%BE%E4%BC%9A%E8%A7%82%E5%AF%9F/"/>
    
    <category term="2022春季" scheme="http://example.com/tags/2022%E6%98%A5%E5%AD%A3/"/>
    
  </entry>
  
  <entry>
    <title>工作 3 年，我又从新加坡反向润回国了</title>
    <link href="http://example.com/2022/06/10/%E9%9A%8F%E7%AC%94/%E5%8D%9A%E6%96%87/singapore/"/>
    <id>http://example.com/2022/06/10/%E9%9A%8F%E7%AC%94/%E5%8D%9A%E6%96%87/singapore/</id>
    <published>2022-06-10T13:00:55.188Z</published>
    <updated>2022-08-26T15:56:57.321Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我宣布了从新加坡返回国内的消息之后，很多同学理解不了反向润的行为。觉得国外水（花）深（天）火（酒）热（地），为什么非得回来。答案很简单，就是我觉得对我而言，我认为回国大于继续待在新加坡。当然这个只是我的个人看法，不一定具有普适性。</p><p>国情这种东西永远是距离产生美，了解得越多，发现的问题和痛点也就越多，越不了解，越容易产生幻想。举个很简单的例子，我经常在网上看到有润学家说美帝物价多么多么便宜，一美元就能买大牛排、很多牛奶等等。如果你正好很在意国内的物价，那么看到这样的消息肯定非常义愤填膺，恨不得马上润去美帝。</p><p>但只要稍微稍微想一下就能知道，牛排这种东西对大多数中国人来说是不能天天吃的。哪怕退一步来说，即使是真的牛排爱好者，牛排也不可能是生活的全部。况且牛排便宜并不代表其他东西都便宜，更不能代表其他一切完美，生活中不会出现其他问题。</p><p>所以如果你有润的想法，请一定要深思熟虑，多搜集信息，去之前多了解。至少对潜在的收益以及背后的代价有一个比较完整的认识，再去做决定。而不是因为所谓一美元的牛排就吃了安利，我个人认为是很不明智的。</p><p>说完了牛排的事情，再来说一些我个人的观点。</p><p>让我们从大到小，先把视野扩大到全球。如果对全球政治经济有所了解，基本上可以发现，全球这么多国家，当今经济还能保持增长的经济体实际上就几乎只有中美两家。经济增长不意味着一切完美，但经济衰退肯定是有隐患的。</p><p>可能有人会说，我是打算润去享福的，又不是打算去拉动增长的。它们国家经济怎么样管我什么事？</p><p>殊不知覆巢之下无完卵，一个国家的宏观经济对于该国的所有居住者都是有深刻影响的。举一个最简单的例子，工资。相信工资人人关心，工资要年年增长的观念深入人心。我刚毕业的时候，一年10% 的调薪就已经算是地板了，稍微慷慨一点的公司涨得更多。</p><p>但很多其他国家，尤其是经济长期萧条停止增长的国家，工资是变动很小的，今年拿得和去年差不多，每年10% 的涨幅？别想了，能有 5% 就烧高香了。甚至是内部晋升了，只变 title不变待遇也比比皆是。</p><p>更别提，工资拿到手还得交税。很多人羡慕北欧的高福利，但高福利的背后是高税收。去之前你会觉得交了高税收就能享受高福利也未尝不可，然而去了之后发现政府拿着你一小半的血汗钱养难民，养懒汉，关键是很多被政府养的人还因为你是中国人排斥你歧视你，简直有苦说不出。</p><p>连全球著名低税地区的新加坡都上调了消费税率，有新加坡人问政府，新加坡这么多富人移民，为什么不能对他们多收点税，而要抬高消费税呢？这不是增加底层老百姓的生活成本吗？政府避而不谈。</p><p>调税之后几个月，新加坡的房租、房价疯狂上涨，短短两个月普遍涨了30%以上。要知道新加坡本来房租就非常贵，和香港差不多，一个类似国内筒子楼普通小区的主卧，房租在5000 以上。想要租得好一点，住公寓的话，基本上每月房租都要上万。</p><p>买房子也很贵，政府建的祖屋倒是便宜，200w能买到很好的，公寓设施要更好，也要贵得多，差不多 3倍及以上的价格。便宜的祖屋只卖给有国籍的本地人，永久居民能买但只能买五年以上的二手房。如果是外国人的话，建议放弃，会有30% 的税……</p><p>问题是新加坡的程序员薪水也并没有比国内高非常多，NUS、NTU能进大厂的学生，一年大概也就 50w左右。租得好一点，一年光房租就要十几万。并且由于没有身份也没有社保、公积金。</p><p>欧洲的国家我没有去过，不好多说，但就我了解到的情况来看。欧洲税前工资可能比新加坡更多，但交税之后到手可能更少。并且欧洲一些著名都市：伦敦、巴黎等的消费水平甚至比新加坡更高。这意味着去这些国家当码农，赚的工资肯定不算少，也能过上不错的生活，但职业发展上一眼看到头，想要大富大贵或者是在某些行业做出点成就来非常非常难。</p><p>朝九晚五、中产阶级守门员、一眼看到头的职业生涯，这给我一种出国当公务员的感觉……</p><p>说完了国家层面经济发展状况对个人的影响，我们再稍微缩小一点视角，看看身份的问题。</p><p>很多人觉得，只要一个签证一张机票，润了就是 X国人。但实际情况可能是因为语言、文化等各方面的差异，身边的圈子玩得好的朋友仍然是中国人（或者过去曾经是中国人）。想要融进当地的圈子和文化是非常困难的，即使在新三年，我也没有一个新加坡朋友。因为除了工作，根本不会认识本地人……</p><p>新加坡尚且如此，其他国家可想而知。融入不了本地圈子，就会很难把自己当做是国民，拥有身份认同，那么难免地就会有漂泊感。身份这种东西由两个部分构成，一个部分是你自己怎么看你自己，第二个部分是别人怎么看你。</p><p>哪怕搞定了第一个部分，我们把自己当做是某国人，尤其是拿到了身份之后。但这并不影响其他人仍然把你当中国人看待，甚至你的孩子也一样，尤其是欧美国家。即使移民了之后身份转换，我们还是和中国深度绑定的。之前中美处在蜜月期，中国和西方势力关系也算不错，所以这方面体现不深。</p><p>如果有朝一日，中美之间关系崩溃，如果此时你在美国，你觉得你一定不会受到影响吗？一定不会受到排斥吗？甚至严重一点，你的生命安全和财产安全真的还能得到保障吗？</p><p>并且搞身份也是一件非常磨人的事情，一般来说常规套路是先给工作签证，待几年可以申请永久居民，俗称绿卡。新加坡还算好，互联网行业的程序员一般都是最高级别工作签（EP），待两三年之后申请永居就行了。但美帝就要难搞很多，先得想办法卷h1b，拿到 h1b 之后还得再卷几年拿绿卡，前前后后得好几年。</p><p>并且说是永久居民，但往往不是永久的。比如新加坡的永居每五年就要 renew一次，如果你最近五年都没在新加坡，大概率就没办法 renew了。美帝等其他国家好像也有类似的要求，美国好像是每年都至少得在美国待一段时间。</p><p>更搞人的是，拿了永久居民也是二等公民，公积金待遇不如本地人，以后孩子上学好学校名额也是本地人优先。所以在新加坡有孩子打算长待的，基本上入籍是必选项，夫妻双方至少得有一个人入籍新加坡才行。但这又会带来另外一个问题，就是兵役。如果是男孩的话强制服兵役，要是运气不好赶上当兵两年疫情两年，青春岁月直接减半……</p><p>然后再缩小一点，看看个人的日常生活。</p><p>我个人感觉在新三年最大的感受就是贵，啥都贵，房租刚才已经说了，稍微想住好一点，一个月房租过万是家常便饭。除了住之外，另外一个大头是吃。在新加坡，想要吃饱很容易，也不贵，30RMB能搞定一顿。但想吃好一点，下个馆子，人均 500以上也是常规价格。比如海底捞，国内人均 200不到，新加坡一顿人均得四五百。每周下几次馆子，又是好几千大洋……点外卖的话，100RMB起步，能看上的来来回回就那么几家，并且味道非常非常一般……</p><p>然后是出行，新加坡交通还算方便，公交地铁到处都能去，但打车就很贵了，稍微远一点就100RMB起步。买车的话，更更更贵。新加坡为了控制汽车数量防止堵车，给汽车加上了非常重的税，国内10w 出头的丰田，新加坡得 50w。汽车牌照也非常昂贵，10w RMB 一张只能用 10年……</p><p>这方面欧美要好很多，买车不会太贵。</p><p>另外一个很重要的点就是医疗，出了中国之后基本上就会发现其他国家的医疗非常离谱。是贵的离谱！</p><p>我身边有人在新加坡做过一次胃镜，国内全麻胃镜 600-800RMB，在新加坡做了一次要5000……这还算是运气好，因为胃里一切正常，要是有点问题得取出来化验的话，化验一次加5000……当时真的是抱着花掉一年积蓄的心态去做的。</p><p>我以为这就够离谱了，更离谱的是后来听说有一个同事不小心得了阑尾炎，做了一个阑尾炎手术。阑尾炎手术完全没有技术含量，连很多校医院都能做，他在新加坡花了15w RMB。是的，你没有看错，就是 15wRMB。你要是没买医保，不小心遇到了，基本上一年白干。还好他买了，躲过一劫。</p><p>每次身边有朋友吃完饭要去运动，我都会跟他讲这个故事。讲多了就直接 15w警告了。</p><p>阑尾炎手术就得 15w，稍微再大点的病呢？</p><p>并且这里医生的医术也很值得吐槽，有一次我因为坐姿不正确久了，后背有点疼。找了一家诊所看病，医生问了病情之后又问了我的职业，大概按了两下，说你这没多大事，就是久坐导致的，然后就让我回去了。对了还收了我300 块……收费原因是consultant（咨询）。</p><p>我身边还有朋友得了荨麻疹，看了好几家医院没看好，医生愣是没看出来是啥问题。最后还是微信远程问诊搞定的……我们一致结论就是新加坡的人口少，这里的医生看的case 不多，所以导致模型参数没训练好。</p><p>大家都是普通人，谁能保证以后自己不会生病？要是生病了收费贵不说，医术还不咋地。当然医生这么多钱也不是白收的，他们态度都非常好，个个说话和空姐似的，非常客气。但……有什么用呢？我是来看病的，又不是来体验服务的！</p><p>最后来聊聊疫情，这是一个很难聊的话题，很容易引战。所以我不针对各国的政策做出评论，只聊一些基本事实，以及一些我个人的观点和想法。</p><p>一个基本事实是，国外防疫政策的确比中国宽松，但和彻底躺平还是不一样的。即使是美帝防疫拉胯成这样，其实也是有一些防疫政策的。</p><p>比如新加坡政府一直追着人民打疫苗，连我们这些非国人都享受到了政府的免费疫苗。打完疫苗追着我们打加强针，所以本地疫苗接种率非常高。并且很多防疫政策也是长期坚持的，比如限制用餐人数，入境隔离等等，一直到最近才彻底取消。最近新加坡的疫情也的确还不错，回国的航班确诊的都很少。</p><p>2020年的时候，新加坡一直严格执行封锁。那一年，除了采购东西，我几乎没怎么出门。到了2021年，一方面疫苗接种率很高了，另外一方面政府也实在扛不住了，宣布放松政策。本地病例开始起飞，最多的时候一天能有好几万。要知道新加坡总共只有几百万人口，国土更是不如上海一个区大。那时候还是delta 流行期，在新国人纷纷指责新加坡政府，我也经常吐槽。</p><p>但到了今年， omicron流行症状减轻之后，大家的风评又逐渐扭转。觉得政府真是厉害，敢决断，判断准。但政府又不是神棍，肯定不能未卜先知，只能说omicron来得时间太凑巧了。我有时候会想，如果没有omicron，大家会怎么看待新加坡政府的防疫呢？</p><p>另一个点是新加坡实行分诊制，大家觉得不舒服都首先看社区里的家庭医生，就是我上次后背疼看的那种。实在很严重医生才会写推荐信推荐你去大医院看，所以相对来说不太会发生医疗挤兑。这和国内稍有不舒服就去三甲医院的情况显然是不同的。</p><p>站在政府的立场上，防疫会有人骂，不防疫难道就没人骂了吗？民众都是短视的，我亲眼看着一拨人狂喷新加坡政府，但没过几个月就马上转向歌功颂德。我有时候是真的觉得很魔幻，但想想又觉得好像能理解。</p><p>毕竟大多数人都是站在自己的立场上看待世界的，和自己看法不一致的事情就骂，和自己看法一致就夸，却很少有人思考自己的看法是否一定正确呢？</p><p>严格防疫可以争取决策空间，无论病毒变强还是变弱都游刃有余，放松防疫则可以减轻经济压力，缓解大家紧张的情绪。怎么选好像都对，又好像怎么选好像都错。</p><p>客观事物本就是复杂多面的，只用是非对错是很难概括的。所以我个人觉得去做判断题或者是辩论题意义并不大，真正该做的是应用题，我们想做什么，我们又该做什么？在客观情况无法改变的情况下，怎么样可以做出令自己更满意的决定，得到让自己满意的结果？这才是真正值得我们思考的。</p><p>最后聊聊格局的问题，作为一个面积不到上海浦东一半大的岛国，想要有大格局是很困难的。</p><p>很容易就变成每天关注鸡毛蒜皮的小格局：做事只考虑眼前，只看表面利益，事情只看表面，除了自己的一亩三分地啥也不关心。甚至因为自己的身份、血统等外在硬件条件产生优越感，而忽略更深层次的核心素质。</p><p>我不希望我成为这样的人。</p>]]></content>
    
    
    <summary type="html">国情这种东西永远是距离产生美，了解得越多，发现的问题和痛点也就越多，越不了解，越容易产生幻想...</summary>
    
    
    
    <category term="写作" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/"/>
    
    <category term="博文" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/%E5%8D%9A%E6%96%87/"/>
    
    
    <category term="人类社会观察" scheme="http://example.com/tags/%E4%BA%BA%E7%B1%BB%E7%A4%BE%E4%BC%9A%E8%A7%82%E5%AF%9F/"/>
    
    <category term="2022春季" scheme="http://example.com/tags/2022%E6%98%A5%E5%AD%A3/"/>
    
  </entry>
  
  <entry>
    <title>Segement Me If U Can</title>
    <link href="http://example.com/2022/06/06/Lecture/2022%20Spring/deep_learning/"/>
    <id>http://example.com/2022/06/06/Lecture/2022%20Spring/deep_learning/</id>
    <published>2022-06-06T08:50:44.589Z</published>
    <updated>2022-12-30T13:10:42.293Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="segement-me-if-u-can"><strong>Segement Me If U Can</strong></h1><p>THUCST Intro to AI PA 2</p><p><a href="https://zhaochenyang20.github.io/">Eren zhao</a> Class06</p><h1 id="任务简介">任务简介</h1><ul><li>进行一次情感二分类，仅考虑正负情感。</li></ul><h2 id="实验数据">实验数据</h2><ul><li>实验数据包括包含训练、验证、测试集合以及预处理好的词向量</li><li>句子的分类包含正向和负向两种</li></ul><h2 id="实验要求">实验要求</h2><ul><li>本次实验要求实现 CNN 与 RNN 两个模型，并应用在情感分类任务上。RNN可以是 LSTM，GRU 等类型。</li><li>对比两模型的实验效果，并分析原因。也可以实现其他模型作为对比模型（baseline），例如全连接神经网络（MLP），可适当加分。</li></ul><h2 id="评价指标">评价指标</h2><ol type="1"><li>准确率（Accuracy）</li><li><ahref="https://deepai.org/machine-learning-glossary-and-terms/f-score">F-score</a>，类似MIOU</li></ol><h2 id="报告内容">报告内容</h2><ol type="1"><li>模型的结构图，以及流程分析。</li><li>实验结果，准确率，F-score 的实验效果。</li><li>试简要地比较实验中使用的不同参数效果，并分析原因。</li><li>比较 baseline 模型与 CNN，RNN 模型的效果差异。（如果有实现）</li><li>问题思考，心得体会</li></ol><h2 id="question-list">Question List</h2><ol type="1"><li>实验训练什么时候停止是最合适的？简要陈述你的实现方式，并试分析固定迭代次数与通过验证集调整等方法的优缺点。</li><li>实验参数的初始化是怎么做的？不同的方法适合哪些地方？（现有的初始化方法为零均值初始化，高斯分布初始化，正交初始化等）</li><li>过拟合是深度学习常见的问题，有什么方法可以防止训练过程陷入过拟合</li><li>试分析CNN，RNN，全连接神经网络（MLP）三者的优缺点</li></ol><h1 id="模型结构">模型结构</h1><h2 id="bi-lstm">Bi-LSTM</h2><figure><imgsrc="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/LSTM.jpg"alt="LSTM" /><figcaption aria-hidden="true">LSTM</figcaption></figure><ul><li>双向 LSTM分类网络的模型结果如上图。前向传播的流程为：将一批长度统一且标记化的句子输入网络，依次经过：</li></ul><ol type="1"><li>嵌入层：将每个表示单词的自然数映射为指定长度的向量，即用向量表示单词。</li><li>双向双层 LSTM 层：接收某个 batch 的词向量组成的序列，每个 LSTM单元在两个方向上分别产生自己的隐藏状态。最终只用了最后一层（第二层）两个方向上传播的各自的最后一个单元的隐藏状态作为下一层的输入。</li><li>线性分类层：由两层网络构成，接收上述 LSTM层产生的两个隐藏状态直接拼接起来的向量（维数变为隐藏状态维数的 2倍）作为输入，经过两层线性层输出维数等于分类类别数的向量，表示对类别的预测结果。</li><li>在 Bi-LSTM 的基础上，将 LSTM 单元替换为 GRU 单元即可得到基于 LSTM变种 <ahref="https://towardsdatascience.com/understanding-gru-networks-2ef37df6c9be">GRU</a>实现的 RNN，此处不再赘述。</li></ol><figure><imgsrc="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/GRU.svg"alt="GRU" /><figcaption aria-hidden="true">GRU</figcaption></figure><h2 id="text-cnn">Text-CNN</h2><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/CNN.jpg" alt="CNN" style="zoom:50%;" /></p><ul><li>依据<ahref="https://arxiv.org/abs/1408.5882">参考文献</a>中的模型搭建 Text-CNN模型。前向传播流程如下：</li></ul><ol type="1"><li>嵌入层：将每个表示单词的自然数映射为指定长度的向量，即用向量表示单词。</li><li>一维多通道多卷积核卷积层：将嵌入层得到的数据视为一批多通道的一维张量；一维张量的长度为对齐后的句子长度，通道数为词向量的数。用指定数量与大小的卷积核与输入数据做多通道多卷积核卷积，得到多通道的一维输出特征。用宽度为3、5、7的卷积核分别做三次卷积。</li><li>池化层：对卷积结果进行 activate, Dropout, max pooling。</li><li>线性层：将池化后的卷积结果拼接在一起，得到长度为所有卷积输出通道数之和的张量，再经过一层线性层得到表示类别标签预测的向量。</li></ol><h2 id="mlp">MLP</h2><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/MLP.jpg" alt="MLP" style="zoom:50%;" /></p><p>使用 MLP 作为 baseline 。模型示意图如上，前向传播大致流程如下： 1.嵌入层：将每个表示单词的自然数映射为指定长度的向量，即用向量表示单词。2.线性层1：接收一批将句子中的词向量直接拼接起来得到的张量为输入，输出指定大小的张量，然后进行Batch Normalization, Activation, Dropout。 3.线性层2：输出表示类别标签预测的向量。</p><h1 id="配置信息">配置信息</h1><h2 id="环境库">环境库</h2><p>参考 requirements.txt</p><h2 id="可视化">可视化</h2><p>采用 <a href="https://wandb.ai/site">wandb</a> 辅助可视化</p><h2 id="算力">算力</h2><p>由于我自己的电脑是 Macbook M1 Core，虽然 M1 芯片优化了 CPU计算的性能，然而没有显卡是硬伤。于是我在自己的服务器上进行训练，服务器有1 张 3080。</p><h1 id="实验结果">实验结果</h1><h2 id="模型对比">模型对比</h2><p>对比正确率以及训练过程中损失值和验证集上的正确率随训练时间推移的关系（如下图，由wandb 生成；损失值为每优化一步时模型返回的结果，验证集的准确率为每一epoch 衡量一次），可以对四种模型进行比较。</p><p>此处展示 f1_score 和 accuracy 与 CrossEntropyLoss 的 loss。</p><h3 id="accuracy">accuracy</h3><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/acc1.png" style="zoom:13%;" /></p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/acc2.png" style="zoom:13%;" /></p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/acc3.png" style="zoom:13%;" /></p><h3 id="f1_score">f1_score</h3><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/f11.png" style="zoom:13%;" /></p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/f12.png" style="zoom:13%;" /></p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/f13.png" style="zoom:13%;" /></p><h3 id="loss">loss</h3><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/loss1.png" style="zoom:13%;" /></p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/loss2.png" style="zoom:13%;" /></p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/loss3.png" style="zoom:13%;" /></p><p>其中对于 f1_score 与accuracy，四个模型在我所选取的参数下的最佳结果为：</p><table><thead><tr class="header"><th></th><th>Text-CNN</th><th>RNN-GRU</th><th>RNN-LSTM</th><th>MLP</th></tr></thead><tbody><tr class="odd"><td>accuracy</td><td>0.8618</td><td>0.8482</td><td>0.8455</td><td>0.813</td></tr><tr class="even"><td>f1_score</td><td>0.864</td><td>0.8526</td><td>0.8512</td><td>0.8089</td></tr></tbody></table><p>结合评价指标与上图，可以观察出：</p><ul><li>RNN 的损失值下降最快，收敛最快，正确率在 Text-CNN 与 MLP之间，然而过拟合现象出现最快</li><li>CNN 的损失值下降居中，正确率最高，过拟合现象最不明显（经过 100 个epoch 的实验证明，Text-CNN 的正确率从 25 个 epoch 左右开始收敛到0.847）</li><li>MLP 损失函数下降速度、收敛速度最慢，正确率最低，过拟合的程度居于Text-CNN 与 RNN 之间。</li></ul><h2 id="参数对比">参数对比</h2><p>大量的参数让我感到调参工作的艰巨，最让我感到震撼的是我对 max_length参数的调配。</p><h3 id="max_length">max_length</h3><p>Max_length 参数用于控制句子的最长词向量个数，我起初将其设置为50，也即设置为与词向量维度相同，这样以来，input matrix 的 size 为50*50，这样做的效果如下表格所示：</p><table><thead><tr class="header"><th></th><th>Text-CNN</th><th>RNN-GRU</th><th>RNN-LSTM</th><th>MLP</th></tr></thead><tbody><tr class="odd"><td>accuracy</td><td>0.8618</td><td>0.8482</td><td>0.8455</td><td>0.813</td></tr><tr class="even"><td>f1_score</td><td>0.864</td><td>0.8526</td><td>0.8512</td><td>0.8089</td></tr></tbody></table><p>然而，我与同学交流后得知，经过人工核实数据集后发现，只有一条语句长度为600+，其余语句长度均低于120。转念一想，我认为自己丢失了大量的语句信息，于是考虑将 max_length调整为 120。期望能够为模型带来巨大突破，然而结果如下：</p><table><thead><tr class="header"><th></th><th>Text-CNN</th><th>RNN-GRU</th><th>RNN-LSTM</th><th>MLP</th></tr></thead><tbody><tr class="odd"><td>accuracy</td><td>0.8509</td><td>0.8564</td><td>0.8509</td><td>0.8347</td></tr><tr class="even"><td>f1_score</td><td>0.8501</td><td>0.8638</td><td>0.8415</td><td>0.8329</td></tr></tbody></table><p>实际上并未出现我所设想的巨大突破（譬如突破到 90 点以上），甚至在Text-CNN 上反而结果下降。起初，我认为一个句子仅仅截断前 50个单位是很难表达句子全意的，很有可能会误判“欲扬先抑”这样的语义。然而再一设想，考虑到此处的词向量单位是汉语中的词语而非汉字，实际上在较短篇幅的评论中，即便是欲扬先抑，也很难会有超过50个词语的铺垫，反而由于输入矩阵的大小倍增，导整体的计算效率有一定降低。再三思考，我并未取用max_length = 120，而是保持了 50。</p><p>真正决定了训练效果无法突破 90大关的是模型本身与预训练模型，而这些精细的调整并未能触碰到 90 大关。</p><h3 id="初始学习率">初始学习率</h3><p>以 CNN 为例，调整 Adam 优化器的初始学习率，检测测试集上的正确率：<img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/test_learning_rate.png" style="zoom:13%;" /></p><p>可见，Adam 优化器默认提供的 0.001的学习率是一个比较好的值。学习率过大或者过小都会影响训练效果；前者使得神经网络每次优化跨度太大，反而难以找到极小值；后者会使神经网络收敛速度太慢。</p><h1 id="问题思考">问题思考</h1><h2 id="实验停止">实验停止</h2><p>实验训练什么时候停止是最合适的？简要陈述你的实现方式，并试分析固定迭代次数与通过验证集调整等方法的优缺点。</p><p>在尚未确定以 10 为最终 epoch 前，起初我设置了一个最大值闸值 max_epoch= 10。在无限次训练的情况下，倘若连续 max_epoch次训练都没能超越之前记录的最大 test_acc值即停止训练，然而经过数次尝试且调整 max_epoch后，我发现训练的最大值均在前 10 个 epoch就会取得，其后均是波动而收敛，例如经过无限个 epoch 的实验证明，Text-CNN的正确率从 25 个 epoch 左右开始收敛到 0.847，而 MLP 从 33 个 epoch之后开始收敛到 0.772）</p><p>这样的结果无疑让我感到诧异，我最终选择了仅仅保留十个 epoch的做法，似乎这样此次实验不需追求自动化停止训练。然而在实际的科研应用中，自动化停止训练是非常必要的，否则会浪费大量的计算资源。</p><p>我认为，可以先简单的考虑人工观察训练情况。利用 wandb的可视化功能进行观察。如果训练集上的 loss在下降而验证集上的正确率在上升，则需要继续训练。直到训练集上的 loss在下降（或者几乎不变）而验证集上的正确率也在下降，说明出现了过拟合，那么此时即可停止训练，因为继续下去得到的模型是性能表现并不好的过拟合的模型。</p><h2 id="参数初始化">参数初始化</h2><p>本次实验中，RNN 与 CNN 的参数均为 kaiming 初始化，而 MLP采用高斯初始化。</p><ol type="1"><li>在回答问题前，我先叙述两次我在本次实验当中失败的参数初始化：</li></ol><p>首先是我在 MLP 的模型设计中，采用了初始化参数全 0 与全 1的设定，导致模型完全没法训练。后来才发现这是深度学习的经典错误。</p><p>此处以三层神经网络为例，分析为何不可全 0 初始化。</p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/three_layer.jpg" style="zoom:13%;" /></p><p>其中，<span class="math inline">\(z_4、z_5、z_6\)</span>可表达为:</p><p><span class="math display">\[z_4 = w_{14} * x_1 + w_{24} * x_2 + w_{34} * x_3 + b_4 \ z_5 = \\ w_{15}* x_1 + w_{25} * x_2 + w_{35} * x_3 + b_5 \ z_6 = w_{16} * x_1 + w_{26}* x_2 + w_{36} * x_3 + b_6 \\]</span>由于权重和偏置的初始值都为0，且同一层网络的激活函数相同，则有： <spanclass="math display">\[z_4 = z_5 = z_6 \ a_4 = a_5 = a_6\]</span> 对于神经网络的最终输出 <spanclass="math inline">\(a_7\)</span>，我们可以得到： <spanclass="math display">\[\begin{align} z_7 &amp;= w_{47} * a_4 + w_{57} * a_5 + w_{67} * a_6 \a_7 = f(z_7) \end{align}\]</span> 其中，<spanclass="math inline">\(f(\cdot)\)</span>为第三层网络的激活函数。</p><p>假设真实值为 <span class="math inline">\(y\)</span>, 损失函数为 <spanclass="math inline">\(Loss(a_7,y)\)</span>，根据反向传播算法和链式法则，我们可以得到：</p><p><span class="math display">\[\begin{align} \frac{\partial Loss(a_7,y)}{\partial w_{47}} &amp;=\frac{\partial Loss(a_7, y)}{\partial a_7} * \frac{\partiala_7}{\partial z_7} * \frac{\partial z_7}{\partial w_{47}} \=\frac{\partial Loss(a_7, y)}{\partial a_7} * \frac{\partiala_7}{\partial z_7} * a_4 \end{align}\]</span> 同样地： <span class="math display">\[\begin{align} \frac{\partial Loss(a_7,y)}{\partial w_{57}} =\frac{\partial Loss(a_7, y)}{\partial a_7} * \frac{\partiala_7}{\partial z_7} * \frac{\partial z_7}{\partial w_{57}} \ =\\\frac{\partial Loss(a_7, y)}{\partial a_7} * \frac{\partiala_7}{\partial z_7} * a_5 \ \frac{\partial Loss(a_7,y)}{\partial w_{67}}= \frac{\partial Loss(a_7, y)}{\partial a_7} * \frac{\partiala_7}{\partial z_7} * a_6 \end{align}\]</span> 由于 <span class="math inline">\(a_4 = a_5 =a_6\)</span>，则有： <span class="math display">\[\frac{\partial Loss(a_7,y)}{\partial w_{47}} = \frac{\partialLoss(a_7,y)}{\partial w_{57}} = \frac{\partial Loss(a_7,y)}{\partialw_{67}} = \Delta w\]</span> 权重更新表达式为： <span class="math display">\[w_{47}^{&#39;} = w_{47} + \Delta w \ w_{57}^{&#39;} = w_{57} + \Delta w\ w_{67}^{&#39;} = w_{67} + \Delta w\]</span> 由于 <spanclass="math inline">\(w_{47}、w_{57}、w_{67}\)</span>的初始值均为0，那么： <span class="math display">\[w_{47}^{&#39;} = w_{57}^{&#39;} = w_{67}^{&#39;}\\w_{14}^{&#39;} =w_{24}^{&#39;} = w_{34}^{&#39;} = w_{14}^{&#39;} = w_{25}^{&#39;} =w_{26}^{&#39;} = w_{34}^{&#39;} = w_{35}^{&#39;} = w_{36}^{&#39;}\]</span>由此可见，更新后的参数在每一层内都是相同的。同时，无论经过多少次网络训练，相同网络层内的参数值都是相同的，这会导致网络在学习时没有重点，对所有的特征处理相同，这很可能导致模型无法收敛训练失败。这种现象被称为对称失效。</p><p>同样地，当权重被初始化为相同的非零值时，也会出现上述情况，此时神经网络模型和一个线性模型的效果相似，失去了神经网络提取特征的意义。</p><ol start="2" type="1"><li>高斯分布初始化</li></ol><p>一种非常常见的方式是采用高斯分布，其分布的大小对于优化过程的结果和网络泛化能力都有很大影响。</p><p>使用一个均值为 <span class="math inline">\(\mu\)</span>，方差为 <spanclass="math inline">\(\sigma^2\)</span> 的高斯分布 <spanclass="math inline">\(N(\mu, \sigma^2)\)</span>对每个参数进行随机初始化，通常情况下，<span class="math inline">\(\mu =0\)</span>，并对生成的数乘上一个小数，把权重初始化为很小的随机数。比如：<spanclass="math inline">\(w = 0.01 *np.random.rand(D,H)\)</span>，这里选择乘以0.01初始化为一个很小的数是因为，如果最初随机到的<span class="math inline">\(w\)</span> 值很大，当我们选择 sigmoid 或tanh 激活函数时，函数值 <spanclass="math inline">\(sigmoid(\cdot)\)</span> 或 <spanclass="math inline">\(tanh(\cdot)\)</span>会停留在一个很平坦的地方，激活值接近饱和，导致梯度下降时，梯度很小，学习变得缓慢。但也不是说权重值越小越好，如果权重值过小，会导致在反向传播时计算得到很小的梯度值，在不断的反向传播过程中，引起梯度消失。</p><ol start="3" type="1"><li>kaiming 初始化</li></ol><p>有名的何恺明初始化。pytorch 对 conv2d 的默认初始化采用了 kaiming初始化，这种初始化能很好的适配 ReLU激活函数。假定使用ReLU激活函数时，网络每一层都中有一半的神经元被激活，另一半为0，因此其分布的方差也近似为恒等函数的一半。这样在考虑前向传播和反向传播时则有：<span class="math display">\[{\forall}i, \quad \frac12 n_i * Var(W_i) = 1\ {\forall}i, \quad \frac12n_{i+1} * Var(W_i) = 1\]</span> <span class="math inline">\(W_i\)</span> 的理想方差为： <spanclass="math display">\[{\forall}i, \quad Var(W_i) = \frac{2}{n_i}\]</span></p><p>当采用高斯分布时，则权重可按照 <span class="math inline">\(N(0,\frac{2}{n_i})\)</span> 的高斯分布来进行初始化。若采用在区间 <spanclass="math inline">\([-r, r]\)</span>的均匀分布进行初始化，则初始化分布有：</p><p><span class="math display">\[W \sim U[- \frac{\sqrt 6}{\sqrt{n_i}}, \frac{\sqrt 6}{\sqrt{n_i}}]\]</span> 具体论文参见：<ahref="https://arxiv.org/pdf/1502.01852.pdf">Delving Deep intoRectifiers: Surpassing Human-Level Performance on ImageNetClassification</a></p><ol start="4" type="1"><li>Xavier初始化</li></ol><p>Xavier初始化，即 0均值初始化遵循了Bradley（2009）的理论环境，假设网络中的每一层的激活函数都是关于0对称的线性激活函数，权重间的初始化和输入特征相互独立，且均值都为0。</p><p>假设在一个神经网络中，对于一层线性网络，其表示为： <spanclass="math display">\[y = f(z_1W_1 + z_2W_2 + z_3W_3 + ... + z_iW_i + b)\]</span></p><p><span class="math inline">\(z_i\)</span> 代表该层网络的第 <spanclass="math inline">\(i\)</span> 个神经元，<spanclass="math inline">\(y\)</span> 为该层网络的输出，<spanclass="math inline">\(W_i\)</span> 为本层网络的权重，<spanclass="math inline">\(b\)</span> 为偏置，<spanclass="math inline">\(f(\cdot)\)</span>为激活函数。这里我们假设激活函数为恒等函数，即 <spanclass="math inline">\(f(x) = x\)</span>，导数为1。</p><p>对于其中的每个 <spanclass="math inline">\(z_iW_i\)</span>，其方差为： <spanclass="math display">\[Var(z_iW_i) = E(z_i)^2Var(W_i) + E(W_i)^2Var(z_i)+Var(z_i)Var(W_i)\]</span> 由于 <span class="math inline">\(W_i\)</span> 和 <spanclass="math inline">\(z_i\)</span> 的均值都为0，因此可以得到： <spanclass="math display">\[Var(z_iW_i) = Var(z_i)Var(W_i)\]</span> 又因为 <span class="math inline">\(z\)</span> 和 <spanclass="math inline">\(W\)</span> 相互独立，则有： <spanclass="math display">\[Var(y) = n_i * Var(z_i)Var(W_i)\]</span> 其中，<span class="math inline">\(n_i\)</span> 代表第 <spanclass="math inline">\(i\)</span> 层的神经元数量。</p><p>通过上面的公式我们可以发现，输入 <spanclass="math inline">\(z_i\)</span> 的方差和输出 <spanclass="math inline">\(y\)</span> 方差相差 <span class="math inline">\(n* Var(W_i)\)</span> 倍，也就是说输入信号在经过神经元后会被放大或缩小<span class="math inline">\(n * Var(W_i)\)</span>倍。为保证经过多层网络后，信号不被过分的放大或缩小，我们需要尽可能保证前向传播和反向传播时每层方差保持一致，则有：<span class="math display">\[{\forall}i, \quad n_i * Var(W_i) = 1\ {\forall}i, \quad n_{i+1} *Var(W_i) = 1\]</span> 权衡上述两个限制，提出一个折中的办法： <spanclass="math display">\[{\forall}i, \quad Var(W_i) = \frac{2}{n_i + n_{i+1}}\]</span>根据计算出的理想方差，可选择通过高斯分布或均匀分布来随机初始化参数。若采用高斯分布，则权重可按照<span class="math inline">\(N(0, \frac{2}{n_i + n_{i+1}})\)</span>的高斯分布来进行初始化。若采用在区间 <span class="math inline">\([-r,r]\)</span> 的均匀分布进行初始化，则初始化分布有： <spanclass="math display">\[W \sim U[- \frac{\sqrt 6}{\sqrt{n_i + n_{i+1}}}, \frac{\sqrt6}{\sqrt{n_i + n_{i+1}}}]\]</span></p><p>Xavier初始化因为基本保证了输入和输出的方差一致，使得样本空间和类别空间的分布差异相似，因此使得模型的训练速度和分类性能获得提升。但xavier初始化的推导基于激活函数是线性的假设，使其并不适合于ReLU、sigmoid等非线性激活函数。</p><p>具体论文参见：<ahref="http://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf">Understandingthe difficulty of training deep feedforward neural networks</a></p><ol start="5" type="1"><li>正交初始化</li></ol><p>将权重初始化为正交矩阵。对于训练非常深的网络很有用。可用于帮助 RNN中的梯度消失和爆炸。首先利用 torch生成一个随机数矩阵，X（例如从正态分布），而后执行 QR 分解 X =QR，得到一个正交矩阵 Q 和一个上三角矩阵 R，最后用所得到的 Q矩阵初始化。</p><h2 id="过拟合问题">过拟合问题</h2><p>产生过拟合的原因可能有：</p><ol type="1"><li><p>训练集上数据量不够大。</p></li><li><p>参数量过大、模型过于复杂容易导致模型学习到非共性的特征，从而导致泛化能力下降，出现过拟合。</p></li><li><p>训练程度不够，提早结束。</p></li></ol><p>对此，有如下方案：</p><ol type="1"><li>适当简化模型，减小参数量，此即 dropout 方法。</li><li>增加训练数据的规模来解决。也可以适用 data augmentation将已有数据做不影响真实类别标签的微小变换产生类似的新数据，变相增大数据量。</li><li>通过观察 loss 和验证集上正确率的变化趋势提前停止训练，并选择 loss几乎最小，而验证集上正确率几乎最大的模型作为最终模型的方法。</li><li>正则化：通过在 loss中增加惩罚项，限制了非线性函数中高次项系数的大小，相当于避免了其过于复杂，从而提高泛化能力。</li></ol><h2 id="模型对比-1">模型对比</h2><p>前文所述：</p><blockquote><ul><li>RNN 的损失值下降最快，收敛最快，正确率在 Text-CNN 与 MLP之间，然而过拟合现象出现最快</li><li>CNN 的损失值下降居中，正确率最高，过拟合现象最不明显（经过 100 个epoch 的实验证明，Text-CNN 的正确率从 25 个 epoch 左右开始收敛到0.847）</li><li>MLP 损失函数下降速度、收敛速度最慢，正确率最低，过拟合的程度居于Text-CNN 与 RNN 之间。</li></ul></blockquote><p>综上可以总结如下：</p><table><colgroup><col style="width: 2%" /><col style="width: 36%" /><col style="width: 25%" /><col style="width: 36%" /></colgroup><thead><tr class="header"><th></th><th>RNN</th><th>CNN</th><th>MLP</th></tr></thead><tbody><tr class="odd"><td>优点</td><td>输入长度可变且有序（输入携带了时序信息）</td><td>可以并行计算，计算速度快；可以提取局部特征</td><td>可并行计算，计算速度快，模型简单易上手</td></tr><tr class="even"><td>缺点</td><td>有序性导致其不能并行计算，计算速度慢；梯度不稳定，容易梯度消失</td><td>输入长度固定，可能丢失语义信息</td><td>输入长度固定，可能丢失语义信息；模型上限显著，表达性不高：参数量小时表达能力不够，而为了提取更多特征增大隐藏层维数时又容易使参数量过大，导致参数利用率偏低</td></tr></tbody></table><h1 id="关于-bert">关于 Bert</h1><p>久仰 transformer 与 bert 的大名，我相信 BERT已经在海量数据中训练，较好地学习到了词汇的语义，最终在此任务上只需要最后加一个简单的线性层做分类就能达到很好的效果。</p><p>但是这实际上抛弃 wiki_word2vec_50.bin词向量嵌入文件，远超出了此次实验范围。我相信此次实验如若使用 bert来完成，可以突破 90% 这一大关。</p><h1 id="心得体会">心得体会</h1><p>纸上得来终觉浅，绝知此事要躬行。在马老师的课堂上与平日实验室的工作当中，我对模型参数的初始化并不太在意，甚至我并不了解模型何时应该初始化参数，何时不必初始化。</p><p>在这次实验中，我首先完成了 CNN 与RNN，这两个模型都没手动初始化。我认为这些模型默认就是不必初始化的，实际上是我没认识到pytorch 已经采用了高效的 kaiming 初始化。</p><p>直到我完成 MLP 的模型才发现我起初完全错误的全 0 初始化与全 1初始化导致了对称失效，失去了模型的表达力。我这才发现需要利用高斯初始化。转而查阅资料，我才认识到了CNN 与 RNN 已经默认了初始化。</p><p>若非本次动手实验，这样精妙的细节可能会一直被我抛之脑后，直到在研究中因为这样基础的漏洞而发生严重的问题。所幸通过本次实验，我及时补上了这一漏洞，而且对参数初始化有了自己的认知。</p><p>从马老师的课堂所讲解的理论出发，本次实验完整的实现了一次神经网络的训练过程。从数据加载，模型构建，设置训练方式与损失函数，梯度反向传播等等角度，给予了我对于课堂知识更丰富的理解，也让我意识到了深入学习numpy pytorch 等工具的重要性。</p><p>除此之外，借助wandb，我高效地实现了精美全面的可视化，加深了对深度学习中关键问题的理解，掌握了完成深度学习任务的基本流程。</p>]]></content>
    
    
    <summary type="html">勿因赢小而不麻，勿因恩小而不感，勿因乐小而不偷...</summary>
    
    
    
    <category term="课程" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    <category term="深度学习" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="2022春季" scheme="http://example.com/tags/2022%E6%98%A5%E5%AD%A3/"/>
    
    <category term="科研" scheme="http://example.com/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>Statistics</title>
    <link href="http://example.com/2022/06/06/Lecture/2022%20Spring/statistic/"/>
    <id>http://example.com/2022/06/06/Lecture/2022%20Spring/statistic/</id>
    <published>2022-06-06T06:31:12.104Z</published>
    <updated>2022-12-30T13:11:13.179Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="readme">readme</h1><ul><li>梁衡老师的概统讲的很好，<del>少数我想线下听的课</del>，可惜也没好好听，而且记了PF，就当复习个快乐，学习没那么 targeted</li><li>我总结下每一章比较有意思的地方，这一部分是统计</li></ul><h1 id="统计学基本概念">统计学基本概念</h1><ul><li>样本均值</li></ul><blockquote><p>设 <span class="math inline">\(x_{1}, x_{2}, \cdots, x_{n}\)</span>是来自某个总体的样本, <span class="math inline">\(\bar{x}\)</span>为样本均值,</p><ol type="1"><li>若总体分布为 <span class="math inline">\(N\left(\mu,\sigma^{2}\right)\)</span>, 则 <span class="math inline">\(\bar{x} \simN\left(\mu, \frac{\sigma^{2}}{n}\right)\)</span>;</li><li>若总体分布不是正态分布或根本末知, <spanclass="math inline">\(E(X)=\mu,\operatorname{Var}(X)=\sigma^{2}\)</span>, 则 <spanclass="math inline">\(n\)</span> 较大时, <spanclass="math inline">\(\bar{x}\)</span> 的渐近分布为 <spanclass="math inline">\(N\left(\mu, \frac{\sigma^{2}}{n}\right)\)</span>,常记为 <span class="math inline">\(\bar{x} \dot{\sim} N\left(\mu,\frac{\sigma^{2}}{n}\right)\)</span> (中心极限定理）</li><li>实际上，如果 X 的分布本身不是正态分布，则 $ E({x})=,Var({x})= $仍然成立，只是不严格正态。而 n 足够大的时候，渐进为正态分布</li></ol></blockquote><ul><li>样本方差</li></ul><blockquote><p>样木本方差 <span class="math inline">\(s^{2}=\frac{1}{n-1}\sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{2}\)</span></p><p>设总体 <span class="math inline">\(X\)</span> 具有二阶矩, 即 <spanclass="math inline">\(E(X)=\mu,\operatorname{Var}(X)=\sigma^{2}&lt;+\infty\)</span>, <spanclass="math inline">\(x_{1}, x_{2}, \cdots, x_{n}\)</span>为从该总体得到的样本, <span class="math inline">\(\bar{x}\)</span> 和<span class="math inline">\(s^{2}\)</span> 分别是样本均值和样本方差, 则<span class="math inline">\(E(\bar{x})=\mu,\operatorname{Var}(\bar{x})=\frac{\sigma^{2}}{n},E\left(s^{2}\right)=\sigma^{2}\)</span> （无偏估计）</p><blockquote><p>注意，<span class="math inline">\(s^2\)</span> 是 <spanclass="math inline">\(\sigma^2\)</span> 的无偏估计，但是并不意味着 <spanclass="math inline">\(s\)</span> 是 <spanclass="math inline">\(\sigma\)</span> 的无偏估计</p><p>Var <spanclass="math inline">\((S)=E\left(S^{2}\right)-E(S)^{2}=\sigma^{2}-E(S)^{2}&gt;0\)</span>,所以 <span class="math inline">\(E(S)&lt;\sigma\)</span></p></blockquote><p><span class="math inline">\(X_{1}, X_{2}, \cdots, X_{n}\)</span>是来自均匀总体 <span class="math inline">\(X \sim U(-a, a)\)</span>的样本, 用矩估计法估计参数 <span class="math inline">\(a\)</span>。</p><p><spanclass="math inline">\(\operatorname{Var}(X)=\frac{a^{2}}{3}\)</span>, 令<span class="math inline">\(\frac{a^{2}}{3}=s^{2} \Rightarrow\hat{a}=\sqrt{3} s\)</span>，但不是无偏估计。</p><p>样本 <span class="math inline">\(k\)</span> 阶原点矩 <spanclass="math inline">\(a_{k}=\frac{1}{n} \sum_{i=1}^{n}x_{i}^{k}\)</span>, 样本 <span class="math inline">\(k\)</span> 阶中心矩<span class="math inline">\(b_{k}=\frac{1}{n}\sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{k}\)</span></p></blockquote><ul><li>次序统计量</li></ul><blockquote><p>对于次序统计量，利用习题课 1 上的 trick 即可</p></blockquote><ul><li>三大分布</li></ul><blockquote><ol type="1"><li><span class="math inline">\(X_{1}, X_{2}, \cdots, X_{n}\)</span>独立同分布, 服从 <span class="math inline">\(N(0,1)\)</span> 则 <spanclass="math inline">\(Y=X_{1}{ }^{2}+\cdots+X_{n}{ }^{2} \sim \chi_{n}{}^{2}\)</span> 或 <span class="math inline">\(\chi^{2}(n)\)</span>,称为自由度为 <span class="math inline">\(n\)</span> 的 <spanclass="math inline">\(\chi^{2}\)</span> 分布 —— <spanclass="math inline">\(n\)</span> 个独立同分布的标准正态分布之和为 <spanclass="math inline">\(n\)</span> 自由度的卡方分布</li><li><span class="math inline">\(t\)</span> 分布 <spanclass="math inline">\(X_{1} \sim N(0,1), X_{2} \sim \chi_{n}^{2}, X_{1},X_{2}\)</span> 相互独立 <spanclass="math inline">\(t=\frac{X_{1}}{\sqrt{X_{2} / n}} \simt(n)\)</span>, 称为自由度为 <span class="math inline">\(n\)</span> 的<span class="math inline">\(t\)</span> 分布 —— 标准正态分布除以独立的<span class="math inline">\(n\)</span> 自由度卡方分布除 <spanclass="math inline">\(n\)</span> 开根为 <spanclass="math inline">\(n\)</span> 自由度的 <spanclass="math inline">\(t\)</span> 分布</li><li><span class="math inline">\(F\)</span> 分布 <spanclass="math inline">\(X_{1}, X_{2}\)</span> 相互独立, <spanclass="math inline">\(X_{1} \sim \chi_{m}{ }^{2}, X_{2} \sim \chi_{n}{}^{2},F=\frac{X_{1} / m}{X_{2} / n} \sim F(m, n)\)</span> 称为自由度为<span class="math inline">\(m\)</span> 与 <spanclass="math inline">\(n\)</span> 的 <spanclass="math inline">\(F\)</span> 分布</li></ol></blockquote><blockquote><p>举个例子，构造分布：</p><p>设 <span class="math inline">\(X_{1}, X_{2}, \ldots, X_{8}\)</span>为相互独立的 <span class="math inline">\(N(0,1)\)</span> 随机变量, 则<spanclass="math inline">\(P\left(\frac{X_{1}-X_{2}}{\left|X_{1}+X_{2}+\cdots+X_{8}\right|}\geq ?\right)= 0.05\)</span></p><p>解: <span class="math inline">\(X_{1}-X_{2} \sim N(0,2), \quadX_{1}+X_{2}+\ldots+X_{8} \sim N(0,8)\)</span></p><p><span class="math inline">\(\operatorname{Cov}\left(X_{1}-X_{2},X_{1}+X_{2}\right)=0\)</span></p><p>构造 F 分布：</p><p><span class="math inline">\(\frac{\left(X_{1}-X_{2}\right)^{2} /2}{\left(X_{1}+X_{2}+\ldots+X_{8}\right)^{2} / 8} \sim F(1,1), \quadP\left(\frac{\left(X_{1}-X_{2}\right)^{2} /2}{\left(X_{1}+X_{2}+\ldots+X_{8}\right)^{2} / 8} \geqF_{0.9}(1,1)\right)=0.1\)</span></p><p><span class="math inline">\(P\left(\frac{\left(X_{1}-X_{2}\right) /\sqrt{2}}{\left|X_{1}+X_{2}+X_{3}+X_{4}\right| / 2 \sqrt{2}} \geq\sqrt{F_{0.9}(1,1)}\right)=0.05 \RightarrowP\left(\frac{X_{1}-X_{2}}{\left|X_{1}+X_{2}+X_{3}+X_{4}\right|} \geq\frac{\sqrt{F_{0.9}(1,1)}}{2}\right)=0.05\)</span></p><p><spanclass="math inline">\(P\left(\frac{X_{1}-X_{2}}{\left|X_{1}+X_{2}+X_{3}+X_{4}\right|}\geq \sqrt{10}\right)=0.05\)</span></p><p>构造 T 分布：</p><p><span class="math inline">\(\frac{\left(X_{1}-X_{2}\right) /\sqrt{2}}{\sqrt{\left(X_{1}+X_{2}+\ldots+X_{8}\right)^{2} / 8}} \simt(1), \quad P\left(\frac{\left(X_{1}-X_{2}\right) /\sqrt{2}}{\left|X_{1}+X_{2}+\ldots+X_{8}\right| / \sqrt{8}} \geqt_{0.95}(1)\right)=0.05\)</span></p><p><spanclass="math inline">\(P\left(\frac{X_{1}-X_{2}}{\left|X_{1}+X_{2}+X_{3}+X_{4}\right|}\geq \frac{t_{0.95}(1)}{2}\right)=0.05, \quadP\left(\frac{X_{1}-X_{2}}{\left|X_{1}+X_{2}+X_{3}+X_{4}\right|} \geq3.16\right)=0.05\)</span></p></blockquote><ul><li>分布反演</li></ul><blockquote><p>设随机变量 <span class="math inline">\(\xi\)</span> 服从自由度为<span class="math inline">\((1,1)\)</span> 的 <spanclass="math inline">\(F\)</span> 分布, 则 <spanclass="math inline">\(P(\xi \leq 1)=(\quad)\)</span></p><p>设 <span class="math inline">\(X_{1} \sim \chi^{2}(1), X_{2} \sim\chi^{2}(1), X_{1} 、 X_{2}\)</span> 相互独立, 所以</p><p><span class="math inline">\(P\left(X_{1} \leqX_{2}\right)=P\left(X_{1} \geq X_{2}\right)=\frac{1}{2}, \quad P(\xi\leq 1)=P\left(\frac{X_{1}}{X_{2}} \leq 1\right)=P\left(X_{1} \leqX_{2}\right)=\frac{1}{2}\)</span></p><hr /><p>设随机变量 <span class="math inline">\(T\)</span> 服从自由度为 1 的<span class="math inline">\(t\)</span> 分布, 则 <spanclass="math inline">\(P(T \leq 1)=(\quad)\)</span></p><p>设 <span class="math inline">\(X, Y\)</span> 相互独立, 且均服从 <spanclass="math inline">\(N(0,1)\)</span>, 则 <spanclass="math inline">\(\frac{X}{|Y|}\)</span> 服从自由度为 1 的 <spanclass="math inline">\(t\)</span> 分布, 于是</p><p><span class="math inline">\(\begin{array}{l} P(T \leq 1)=P(T \leq0)+P(0&lt;T&lt;1)=0.5+\frac{1}{2} P(|T|&lt;1) \\ =0.5+0.5 \timesP\left(X^{2}&lt;Y^{2}\right)=0.5+0.5 \times 0.5=0.75\end{array}\)</span></p><blockquote><p>这个稍微需要理解下，<span class="math inline">\(X\)</span>为负数时，<span class="math inline">\(T\)</span> 必小于 0，此即 <spanclass="math inline">\(P(T\le0)=\frac{1}{2}\)</span>。而 <spanclass="math inline">\(P(0\le T\le 1)=P(X\ge 0)\times p(X\le|Y|)=\frac{1}{2}\times P(X^2\le Y^2)=\frac{1}{4}\)</span></p><p>还有一个想法，<span class="math inline">\(P(X\le |Y|\)</span>按照全概率公式，分为 <span class="math inline">\(P(Y\le 0) \times P(X\le-Y|Y \le 0)+P(Y\ge 0)\times P(X\le Y|Y \ge0)\)</span>，这个方法很简单，重点是不要忘了全概率公式应该乘的是条件概率。</p></blockquote></blockquote><h1 id="参数点估计的方法与评价">参数点估计的方法与评价</h1><ul><li>矩估计</li></ul><blockquote><p>尽量用低阶矩来估计参数</p></blockquote><ul><li><ahref="https://zhuanlan.zhihu.com/p/26614750">极大似然估计</a></li></ul><blockquote><p>对于二元函数 <span class="math inline">\(p(x ,\theta)\)</span>输入有两个：<span class="math inline">\(\mathrm{x}\)</span>表示某一个具体的数据，<span class="math inline">\(\theta\)</span>表示模型的参数</p><p>如果 <span class="math inline">\(\theta\)</span> 是已知确定的，<spanclass="math inline">\(x\)</span> 是变量, 即为概率函数(probabilityfunction)，它描述对于不同样本点 <span class="math inline">\(x\)</span>,其出现概率是多少</p><p>如果 <span class="math inline">\(x\)</span> 是已知确定的，<spanclass="math inline">\(\theta\)</span>是变量，这个函数叫做似然函数(likelihoodfunction)，它描述对于不同的模型参数，出现 <spanclass="math inline">\(x\)</span> 这个样本点的概率是多少</p><p><strong>我们想办法让观察样本出现的概率最大</strong>，就是极大似然估计</p></blockquote><ul><li>对数似然函数</li></ul><blockquote><p><span class="math inline">\(\ln (L(\theta))\)</span>，由于 <spanclass="math inline">\(\ln x\)</span> 是 <spanclass="math inline">\(x\)</span> 的单调函数，使得 <spanclass="math inline">\(\ln (L(\theta))\)</span> 与 <spanclass="math inline">\(L(\theta)\)</span> 达到最大的 <spanclass="math inline">\(\theta\)</span>相同，常利用对数似然函数求解极大似然估计。</p></blockquote><ul><li>泊松分布与全损指数分布的极大似然估计</li></ul><blockquote><p><spanclass="math inline">\(\hat{\lambda_{Poisson}}=\overline{\boldsymbol{x}}\)</span>，<spanclass="math inline">\(\hat{\lambda_{Exponential}}=\frac{1}{\bar{x}}\)</span></p></blockquote><ul><li>有损指数分布的极大似然估计</li></ul><blockquote><p>设寿命小于 <span class="math inline">\(T\)</span> 的 <spanclass="math inline">\(r\)</span> 个观测值为 <spanclass="math inline">\(x_{1}, x_{2}, \cdots, x_{r}\)</span>, 对应的 <spanclass="math inline">\(r\)</span> 个 <spanclass="math inline">\(y_{k}\)</span> 的值</p><p>剩下的 <span class="math inline">\(n-r\)</span> 个 <spanclass="math inline">\(y_{k}\)</span> 的取值均为 <spanclass="math inline">\(T\)</span>, 每一个发生概率为 <spanclass="math inline">\(P(X \geq T)=e^{-\lambda T}\)</span></p><p>似然函数 <span class="math inline">\(L\left(\lambda ; y_{1}, y_{2},\cdots, y_{n}\right)=\lambda^{r}e^{-\lambda\left(x_{1}+x_{2}+\cdots+x_{r}\right)} \cdot e^{-\lambda(n-r)T}\)</span></p><p><span class="math inline">\(\ln L(\lambda)=r \ln\lambda-\lambda\left(x_{1}+x_{2}+\cdots+x_{r}\right)-\lambda(n-r)T\)</span></p><p><span class="math inline">\(\begin{array}{l} \frac{d \lnL(\lambda)}{d\lambda}=\frac{r}{\lambda}-\left(x_{1}+x_{2}+\cdots+x_{r}+(n-r)T\right)=0 \\ \Rightarrow \hat{\lambda}=r/\left[x_{1}+\cdots+x_{r}+(n-r) T\right] \end{array}\)</span></p></blockquote><ul><li>均匀分布的极大似然估计</li></ul><blockquote><p>参数 <span class="math inline">\(a, b\)</span> 的极大似然估计 <spanclass="math inline">\(\hat{a}=\min \left(\boldsymbol{X}_{1},\boldsymbol{X}_{2} \cdots, \boldsymbol{X}_{n}\right), \hat{b}=\max\left(\boldsymbol{X}_{1}, \boldsymbol{X}_{2} \cdots,\boldsymbol{X}_{n}\right)\)</span></p><p><strong>极大似然估计得到的不一定是无偏估计</strong></p></blockquote><ul><li>柯西分布的极大似然估计</li></ul><blockquote><p>Cauchy 分布随机变量的期望不存在, 因此不能用矩估计法对参数 <spanclass="math inline">\(\theta\)</span> 进行估计</p><p>设 <span class="math inline">\(x_{1}, x_{2}, \cdots, x_{n}\)</span>为来自该总体的样本观测值</p><p>似然函数 <span class="math inline">\(L(\theta)=\prod_{k=1}^{n}f\left(x_{k} ; \theta\right)=\prod_{k=1}^{n}\frac{1}{\pi\left[1+\left(x_{k}-\theta\right)^{2}\right]}\)</span></p><p>对数似然函数 <span class="math inline">\(\lnL(\theta)=\sum_{k=1}^{n}-\left(\ln \pi+\ln\left(1+\left(x_{k}-\theta\right)^{2}\right)\right)\)</span></p><p>将上式对 <span class="math inline">\(\theta\)</span> 求导，并令其等于0</p><p><span class="math inline">\(\frac{d \ln L(\theta)}{d\theta}=-\sum_{k=1}^{n}\frac{x_{k}-\theta}{1+\left(x_{k}-\theta\right)^{2}}=0\)</span></p><p>方程无法的到解析解，需要用一定的计算方法近似求解</p></blockquote><ul><li>相合估计</li></ul><blockquote><p>定理: 设 <spanclass="math inline">\(\hat{\theta}_{n}=\hat{\theta}_{n}\left(x_{1},x_{2}, \cdots, x_{n}\right)\)</span> 是 <spanclass="math inline">\(\theta\)</span> 的一个估计量, 若 <spanclass="math inline">\(\lim _{n \rightarrow \infty}E\left(\hat{\theta}_{n}\right)=\theta \quad \lim _{n \rightarrow \infty}\operatorname{Var}\left(\hat{\theta}_{n}\right)=0\)</span>，则 <spanclass="math inline">\(\hat{\theta}_{n}\)</span> 是参数 <spanclass="math inline">\(\theta\)</span> 的相合估计。</p></blockquote><ul><li>无偏性与有效性</li></ul><blockquote><p>无偏性，保证没有系统偏差</p><p>设 <span class="math inline">\(\theta \in \Theta\)</span> 为末知参数,<span class="math inline">\(\hat{\theta}=\hat{\theta}\left(x_{1}, x_{2},\cdots, x_{n}\right)\)</span> 是 <spanclass="math inline">\(\theta\)</span> 的一个估计量，若对任意 <spanclass="math inline">\(\theta \in \Theta\)</span> 有 <spanclass="math inline">\(E(\hat{\theta})=\theta\)</span>，则称 <spanclass="math inline">\(\hat{\theta}\)</span> 是参数 <spanclass="math inline">\(\theta\)</span> 的无偏估计。</p><p>有效性，希望估计围绕参数波动的幅度越小越好。</p><p>设 <span class="math inline">\(\hat{\theta}_{1},\hat{\theta}_{2}\)</span> 是参数 <spanclass="math inline">\(\theta\)</span> 的无偏估计，如果对任意 <spanclass="math inline">\(\theta \in \Theta\)</span> 有 <spanclass="math inline">\(\operatorname{Var}\left(\hat{\theta}_{1}\right)\leq\operatorname{Var}\left(\hat{\theta}_{2}\right)\)</span>，且至少有一个<span class="math inline">\(\theta \in \Theta\)</span>使得上述不等号严格成立，则称 <spanclass="math inline">\(\hat{\theta}_{1}\)</span> 比 <spanclass="math inline">\(\hat{\theta}_{2}\)</span> 有效。</p><p>简单的应用：样本数量的增加会改善估计。</p></blockquote><ul><li><strong>极大似然估计</strong>得到的不一定是无偏估计</li></ul><blockquote><p><span class="math inline">\(X_{1}, X_{2}, \cdots, X_{n}\)</span>是来自均匀总体 <span class="math inline">\(U(0, \theta)\)</span>的样本，参数 <span class="math inline">\(\theta\)</span>的极大似然估计量 <span class="math inline">\(\tilde{\theta}=\max _{1\leq k \leq n} X_{k}\)</span>, 考查无偏性。</p><p>计算 <span class="math inline">\(\tilde{\theta}=\max _{1 \leq k \leqn} X_{k}\)</span> 的分布函数，当 <span class="math inline">\(0 \leq y\leq \theta\)</span> 时, 由样本的独立同分布性质，可知其分布函数（CDF）为<span class="math display">\[F_{\dot{\theta}}(y)=P(\tilde{\theta} \leq y)=P\left(\max _{1 \leq k \leqn} X_{k} \leq y\right)=\prod_{k=1}^{n} P\left(X_{k} \leqy\right)=\left(\frac{y}{\theta}\right)^{n}\]</span> <span class="math inline">\(\tilde{\theta}=\max _{1 \leq k\leq n} X_{k}\)</span> 的分布函数 <spanclass="math inline">\(F_{\tilde{\theta}}(y)=\left\{\begin{array}{c}0,y&lt;0 \\ \left(\frac{y}{\theta}\right)^{n}, 0 \leq y \leq \theta, \\ 1,y&gt;\theta\end{array}\right.\)</span> 于是 <spanclass="math inline">\(\tilde{\theta}\)</span> 的概率密度（PDF）为 <spanclass="math inline">\(f_{\tilde{\theta}}(y)=\left\{\begin{array}{c}\frac{n}{\theta^{n}}y^{n-1}, y \in[0, \theta] \\ 0, \text { 其它 }\end{array}\quad\right.\)</span> 因此, 我们有 <span class="math display">\[\begin{aligned}E(\tilde{\theta}) &amp;=\int_{-\infty}^{+\infty} y f_{\tilde{\theta}}(y)d y=\int_{0}^{\theta} y \frac{n}{\theta^{n}} y^{n-1} d y \\&amp;=\frac{n}{\theta^{n}} \int_{0}^{\theta} y^{n} dy=\left.\frac{n}{\theta^{n}} \cdot \frac{y^{n+1}}{n+1}\right|_{0}^{\theta}=\frac{n}{n+1} \theta\end{aligned}\]</span> <span class="math inline">\(E(\tilde{\theta})=E\left(\max _{1\leq k \leq n} X_{k}\right)=\frac{n}{n+1} \theta\)</span>，统计量 <spanclass="math inline">\(\max _{1 \leq k \leq n} X_{k}\)</span> 不是参数<span class="math inline">\(\theta\)</span> 的无偏估计，<spanclass="math inline">\(\frac{n+1}{n} \max _{1 \leq k \leq n}X_{k}\)</span> 则为无偏估计，称为无偏校正。</p></blockquote><ul><li>正态分布的极大似然估计</li></ul><blockquote><p>所以参数 <span class="math inline">\(\mu\)</span> 和 <spanclass="math inline">\(\sigma^{2}\)</span> 的极大似然估计量为 <spanclass="math inline">\(\hat{\mu}=\bar{X}, \hat{\sigma}^{2}=\frac{1}{n}\sum_{i=1}^{n}\left(X_{i}-\bar{X}\right)^{2}\)</span>（与 <spanclass="math inline">\(s^{2}=\frac{1}{n-1}\sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{2}\)</span> 完全没关系，而<span class="math inline">\(s^2\)</span> 是 <spanclass="math inline">\(\sigma^2\)</span> 的无偏估计）</p><p>注意，估计的不是 <span class="math inline">\(\sigma\)</span>，而是<span class="math inline">\(\sigma^2\)</span></p></blockquote><ul><li>均方误差</li></ul><blockquote><p><span class="math display">\[\begin{aligned}\operatorname{MSE}(\hat{\theta})=E(\hat{\theta}-\theta)^{2}&amp;=E[(\hat{\theta}-E(\hat{\theta}))+(E(\hat{\theta})-\theta)]^{2} \\&amp;=\operatorname{Var}(\hat{\theta})+(\boldsymbol{E}(\hat{\theta})-\theta)^{2}\end{aligned}\]</span> 若 <span class="math inline">\(\hat{\theta}\)</span> 是参数<span class="math inline">\(\theta\)</span> 的无偏估计, 则 <spanclass="math inline">\(\operatorname{MSE}(\hat{\theta})=\operatorname{Var}(\hat{\theta})\)</span></p><p>注: 很多时候, 无偏估计的均方误差会小于有偏估计的均方误差,但二者之间并没有严格的对应关系，例如书上 324 页（第三版 286-287 页）例6.4.1 即给出一个有偏估计均方误差小于无偏估计均方误差的实例。</p></blockquote><h1 id="参数区间估计">参数区间估计</h1><ul><li>置信系数</li></ul><blockquote><p>抽取 n 个样本得到一个区间估计, 将这样的估计重复足够多次, 至少 <spanclass="math inline">\(1-\alpha\)</span> 比例的估计区间包含真实的 <spanclass="math inline">\(\mu\)</span> 值。这里置信系数是 <spanclass="math inline">\(0.9544\)</span>, 即大约 <spanclass="math inline">\(95.44 \%\)</span> 估计区间包含真实的 <spanclass="math inline">\(\mu\)</span> 值。</p><p>或者说，这种抽样方法得到的这些区间至少有 <spanclass="math inline">\(1-\alpha\)</span> 的概率包含真实的 <spanclass="math inline">\(\mu\)</span> 值。</p><p>末知参数本身是确定的值, 不带有随机性。随机性是由区间引入的。</p></blockquote><ul><li>下侧 <span class="math inline">\(\alpha\)</span> 分位数</li></ul><blockquote><p><span class="math inline">\(\Phi(d)=1-\frac{\alpha}{2}, \quadF(c)=\frac{\alpha}{2} \quad \Rightarrow \quadd=\Phi^{-1}\left(1-\frac{\alpha}{2}\right), \quadc=\Phi^{-1}\left(\frac{\alpha}{2}\right)\)</span></p><p>标准正态分布的 <spanclass="math inline">\(1-\frac{\alpha}{2}\)</span> 分位数和 <spanclass="math inline">\(\frac{\alpha}{2}\)</span> 分位数，<spanclass="math inline">\(d=u_{1-\frac{\alpha}{2}}, \quadc=u_{\frac{\alpha}{2}}=-u_{1-\frac{\alpha}{2}}\)</span></p><p>在此基础上，可以看出 <spanclass="math inline">\(P(u_{\frac{\alpha}{2}}\le Z\leu_{1-\frac{\alpha}{2}})=P(|Z|\leu_{1-\frac{\alpha}{2}})，u_{\alpha}=-u_{1-\alpha}\)</span></p><p>最主要的还是理解分位数的反函数定义，小于 <spanclass="math inline">\(\alpha\)</span> 分位点的概率是 <spanclass="math inline">\(\alpha\)</span></p></blockquote><blockquote><p>标准正态分布的 <span class="math inline">\(\alpha\)</span> 分位点记为<span class="math inline">\(u_{\alpha}\)</span></p><p><span class="math inline">\(n\)</span> 个自由度的 <spanclass="math inline">\(\chi^{2}\)</span> 分布的 <spanclass="math inline">\(\alpha\)</span> 分位点记为 <spanclass="math inline">\(\chi_{\alpha}^{2}(n)\)</span></p><p><span class="math inline">\(n\)</span> 个自由度的 <spanclass="math inline">\(t\)</span> 分布的 <spanclass="math inline">\(\alpha\)</span> 分位点记为 <spanclass="math inline">\(t_{\alpha}(n)\)</span></p><p><span class="math inline">\((m, n)\)</span> 自由度的 <spanclass="math inline">\(F\)</span> 分布的 <spanclass="math inline">\(\alpha\)</span> 分位点记为 <spanclass="math inline">\(F_{\alpha}(m, n)\)</span></p><p><span class="math inline">\(X\)</span> 为一连续分布随机变量, 如果<span class="math inline">\(P(X \geq a)=\alpha\)</span>, <spanclass="math inline">\(a\)</span> 称为上侧 <spanclass="math inline">\(\alpha\)</span> 分位数</p></blockquote><ul><li>统计抽样定理</li></ul><blockquote><p>设 <span class="math inline">\(x_{1}, x_{2}, \cdots, x_{n}\)</span>是来自正态总体 <span class="math inline">\(N\left(\mu,\sigma^{2}\right)\)</span> 的样本, 其样本均值和样本方差分别为: <spanclass="math inline">\(\bar{x}=\frac{x_{1}+x_{2}+\cdots+x_{n}}{n}\)</span>和 <span class="math inline">\(s^{2}=\frac{1}{n-1}\sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{2}\)</span>, 则有</p><ol type="1"><li><span class="math inline">\(\bar{x}\)</span> 与 <spanclass="math inline">\(s^{2}\)</span> 相互独立</li><li><span class="math inline">\(\bar{x} \sim N\left(\mu,\frac{\sigma^{2}}{n}\right)\)</span></li><li><span class="math inline">\(\frac{(n-1) \cdot s^{2}}{\sigma^{2}}\sim \chi^{2}(n-1)\)</span></li></ol></blockquote><ul><li>方差已知区间估计</li></ul><blockquote><p>总体 <span class="math inline">\(N\left(\mu, \sigma^{2}\right),\sigma^{2}\)</span> 已知，<span class="math inline">\(\mu\)</span>末知，<span class="math inline">\(x_{1}, x_{2}, \cdots, x_{n}\)</span>是简单随机样本, 求 <span class="math inline">\(\mu\)</span> 的1- <spanclass="math inline">\(\alpha\)</span> 置信区间</p><p><spanclass="math inline">\(\frac{\bar{x}-\mu}{\sqrt{\frac{\sigma^{2}}{n}}}\)</span>可作为枢轴量, <spanclass="math inline">\(Z=\frac{\bar{x}-\mu}{\sqrt{\frac{\sigma^{2}}{n}}}=\frac{\sqrt{n}(\bar{x}-\mu)}{\sigma}\sim N(0,1)\)</span></p><p>构造出枢轴量之后，<spanclass="math inline">\(P\left\{|\frac{\sqrt{n}(\bar{x}-\mu)}{\sigma}|\leq u_{1-\frac{\alpha}{2}}\right\}=1-\alpha\)</span></p></blockquote><ul><li>方差未知区间估计</li></ul><blockquote><p>总体 <span class="math inline">\(X \sim N\left(\mu,\sigma^{2}\right), \sigma^{2}\)</span> 末知</p><ol type="1"><li>求参数 <span class="math inline">\(\mu\)</span> 的 <spanclass="math inline">\(1-\alpha\)</span> 置信区间</li></ol><p><span class="math inline">\(\bar{x} \sim N\left(\mu,\frac{\sigma^{2}}{n}\right), \quad \frac{\bar{x}-\mu}{\sigma / \sqrt{n}}\sim N(0,1)\)</span></p><p><span class="math inline">\(\bar{x}\)</span> 与 <spanclass="math inline">\(s^{2}\)</span> 相互独立, 且 <spanclass="math inline">\(\frac{(n-1) \cdot s^{2}}{\sigma^{2}} \sim\chi^{2}(n-1)\)</span>，<spanclass="math inline">\(\frac{\frac{\bar{x}-\mu}{\sigma /\sqrt{n}}}{\sqrt{\frac{(n-1) \cdot s^{2}}{\sigma^{2}}}}\)</span> 可以将<span class="math inline">\(\sigma\)</span> 的影响消去。</p><p><span class="math display">\[\frac{\frac{\bar{x}-\mu}{\sigma /\sqrt{n}}}{\sqrt{\frac{(n-1)s^2}{\sigma^2} /(n-1)}}=\frac{\bar{x}-\mu}{s/ \sqrt{n}}=\frac{\sqrt{n}(\bar{x}-\mu)}{s} \sim t(n-1)\]</span> 形式上是非常好记下来的。</p><p><span class="math inline">\(-t_{1-\frac{\alpha}{2}}(n-1) \leq\frac{\sqrt{n}(\bar{x}-\mu)}{s} \leqt_{1-\frac{\alpha}{2}}(n-1)\)</span></p><p><span class="math inline">\(\bar{x}-\frac{s}{\sqrt{n}}t_{1-\frac{\alpha}{2}}(n-1) \leq \mu \leq \bar{x}+\frac{s}{\sqrt{n}}t_{1-\frac{\alpha}{2}}(n-1)\)</span></p><ol start="2" type="1"><li>求 <span class="math inline">\(\sigma^{2}\)</span> 的 <spanclass="math inline">\(1-\alpha\)</span> 置信区间</li></ol><p><span class="math inline">\(\frac{(n-1) s^{2}}{\sigma^{2}} \sim\chi^{2}(n-1)\)</span> 可作为枢轴量，<spanclass="math inline">\(\left(\chi_{\frac{\alpha}{2}}^{2} \leq \frac{(n-1)s^{2}}{\sigma^{2}} \leq\chi_{1-\frac{\alpha}{2}}^{2}\right)=1-\alpha\)</span> <spanclass="math display">\[P\left(\frac{(n-1) s^{2}}{\chi_{1-\frac{\alpha}{2}}^{2}} \leq \sigma^{2}\leq \frac{(n-1) s^{2}}{\chi_{\frac{\alpha}{2}}^{2}}\right)=1-\alpha\Rightarrow \sigma^{2} \in\left[\frac{(n-1)s^{2}}{\chi_{1-\frac{\alpha}{2}}^{2}}, \frac{(n-1)s^{2}}{\chi_{\frac{\alpha}{2}}^{2}}\right]\]</span> <strong>去除未知参数的影响</strong></p></blockquote><ul><li>Behrens-Fisher 问题</li></ul><blockquote><p><span class="math inline">\(x_{1}, \cdots, x_{m}\)</span>来自正态总体 <span class="math inline">\(N\left(\mu_{1}, \sigma_{1}{}^{2}\right), y_{1}, \cdots, y_{n}\)</span> 来自正态总体 <spanclass="math inline">\(N\left(\mu_{2}, \sigma_{2}{ }^{2}\right), \mu_{1}、 \mu_{2}\)</span> 末知， <span class="math inline">\(\sigma_{1}{}^{2}=\sigma_{2}{ }^{2}=\sigma^2\)</span> 末知，求 <spanclass="math inline">\(\mu_{2}-\mu_{1}\)</span> 的 <spanclass="math inline">\(1-\alpha\)</span> 置信区间。</p><p><span class="math inline">\(\bar{x} \sim N\left(\mu_{1},\frac{\sigma^{2}}{m}\right), \bar{y} \sim N\left(\mu_{2},\frac{\sigma^{2}}{n}\right), \quad \bar{x}-\bar{y} \simN\left(\mu_{1}-\mu_{2},\frac{\sigma^{2}}{m}+\frac{\sigma^{2}}{n}\right)\)</span></p><p><span class="math inline">\(\frac{(m-1) s_{x}^{2}}{\sigma^{2}} \sim\chi^{2}(m-1), \frac{(n-1) s_{y}^{2}}{\sigma^{2}} \sim \chi^{2}(n-1),\quad \frac{(m-1) s_{x}^{2}}{\sigma^{2}}+\frac{(n-1)s_{y}^{2}}{\sigma^{2}} \sim \chi^{2}(m+n-2)\)</span></p><p><span class="math display">\[\frac{\frac{(\bar{x}-\bar{y})-\left(\mu_{1}-\mu_{2}\right)}{\sigma\sqrt{\frac{1}{m}+\frac{1}{n}}}}{\sqrt{\frac{(m-1) s_{x}^{2}+(n-1)s_{y}^{2}}{\sigma^{2}}/(m+n-2)}}=\frac{\sqrt{m+n-2}}{\sqrt{\frac{1}{m}+\frac{1}{n}}} \cdot\frac{(\bar{x}-\bar{y})-\left(\mu_{1}-\mu_{2}\right)}{\sqrt{(m-1)s_{x}^{2}+(n-1) s_{y}^{2}}} \sim t(m+n-2)\]</span> <strong>这个问题还可以用渐进正态分布来处理</strong></p><p><spanclass="math inline">\(\frac{\bar{x}-\bar{y}-\left(\mu_{1}-\mu_{2}\right)}{\sqrt{\sigma_{x}^{2}/ m+\sigma_{y}^{2} / n}} \sim N(0,1), \quad\frac{\bar{x}-\bar{y}-\left(\mu_{1}-\mu_{2}\right)}{\sqrt{s_{x}^{2} /m+s_{y}^{2} / n}} \sim N(0,1)\)</span></p></blockquote><ul><li>正态方差之商的区间估计</li></ul><blockquote><p>例 <span class="math inline">\(x_{1}, \cdots, x_{m}\)</span>来自正态总体 <span class="math inline">\(N\left(\mu_{1},\sigma_{1}^{2}\right), y_{1}, \cdots, y_{n}\)</span> 来自正态总体 <spanclass="math inline">\(N\left(\mu_{2}, \sigma_{2}{ }^{2}\right)\)</span>,<span class="math inline">\(\mu_{1} 、 \mu_{2}\)</span> 末知， <spanclass="math inline">\(\sigma_{1}{ }^{2} 、 \sigma_{2}{ }^{2}\)</span>末知, 求 <span class="math inline">\(\sigma_{1}{ }^{2} / \sigma_{2}{}^{2}\)</span> 的区间估计。</p><p><span class="math display">\[\begin{array}{l}\frac{(m-1) s_{1}{ }^{2}}{\sigma_{1}{ }^{2}} \sim \chi^{2}(m-1), \quad\frac{(n-1) s_{2}{ }^{2}}{\sigma_{2}{ }^{2}} \sim \chi^{2}(n-1) \\\Rightarrow \quad F=\frac{s_{1}{ }^{2} / \sigma_{1}{ }^{2}}{s_{2}{ }^{2}/ \sigma_{2}{ }^{2}} \sim F(m-1, n-1)\end{array}\]</span></p></blockquote><ul><li>指数分布的区间分布</li></ul><blockquote><p><span class="math inline">\(x_{1}, \cdots, x_{n}\)</span>来自指数总体 <spanclass="math inline">\(\operatorname{Exp}(\lambda)\)</span>, 求参数 <spanclass="math inline">\(\lambda\)</span> 的区间估计</p><p>可以证明 <span class="math inline">\(X=2\lambda\left(x_{1}+\cdots+x_{n}\right) \sim \chi^{2}(2 n) \Rightarrow 2n \lambda \bar{x} \sim \chi^{2}(2 n)\)</span></p><p><span class="math inline">\(P\left(\chi_{\frac{\alpha}{2}}^{2}(2 n)\leq 2 n \lambda \bar{x} \leq \chi_{1-\frac{\alpha}{2}}^{2}(2n)\right)=1-\alpha\)</span> <span class="math inline">\(\Rightarrow\chi_{\frac{\alpha}{2}}^{2}(2 n) \leq 2 n \lambda \bar{x} \leq\chi_{1-\frac{\alpha}{2}}^{2}(2 n)\)</span> <spanclass="math inline">\(\Rightarrow \lambda\in\left[\chi_{\frac{\alpha}{2}}^{2}(2 n) / 2 n \bar{x},\chi_{1-\frac{\alpha}{2}}^{2}(2 n) / 2 n \bar{x}\right]\)</span></p></blockquote><ul><li>均匀分布的区间估计</li></ul><blockquote><p><span class="math inline">\(F_{x_{(j)}}(x,\theta)=\left(\frac{x}{\theta}\right)^{n}, \quadY=\frac{x_{(n)}}{\theta}, \quadF_{Y}(y)=P(Y&lt;y)=P\left(\frac{x_{(n)}}{\theta}&lt;y\right)=y^{n}\)</span></p><p><span class="math inline">\(\frac{x_{(n)}}{\theta}\)</span>可作为枢轴量</p><p><span class="math inline">\(P\left(c \leq \frac{x_{(n)}}{\theta} \leqd\right)=d^{n}-c^{n}=1-\alpha \Rightarrow \frac{x_{(n)}}{d} \leq \theta\leq \frac{x_{(n)}}{c}\)</span></p><p>可取 <span class="math inline">\(d=1, c=\sqrt[n]{\alpha}, \quad\theta \in\left[x_{(n)},\frac{x_{(n)}}{\sqrt[n]{\alpha}}\right]\)</span></p></blockquote><ul><li>基于渐进分布的两点分布区间估计</li></ul><blockquote><p>例 样本 <span class="math inline">\(X_{1}, \cdots, X_{n}\)</span>来自两点分布总体 <span class="math inline">\(\boldsymbol{b}(1,\boldsymbol{p})\)</span>, 求 <spanclass="math inline">\(\boldsymbol{p}\)</span> 的区间估计。解：样本均值的期望、方差分别为 <span class="math inline">\(E(\bar{X})=p,\operatorname{Var}(\bar{X})=\frac{p(1-p)}{n}\)</span> 根据中心极限定理当<span class="math inline">\(n\)</span> 较大时, 有近似分布 <spanclass="math inline">\(\bar{X} \dot{\sim} N\left(p,\frac{p(1-p)}{n}\right)\)</span>, 标准化后得到枢轴量 <spanclass="math inline">\(\frac{\bar{X}-p}{\sqrt{\frac{p(1-p)}{n}}}\dot{\sim} N(0,1)\)</span> <span class="math display">\[P\left(\left|\frac{\bar{X}-p}{\sqrt{p(1-p) / n}}\right| \leq u_{1\frac{\alpha}{2}}\right) \approx 1-\alpha, \quad \text { 即}(\bar{X}-p)^{2} \leq u_{1-\frac{\alpha}{2}}^{2} \frac{p(1-p)}{n}\]</span> <spanclass="math inline">\(\frac{1}{1+c}\left(\bar{X}+\frac{c}{2}-\sqrt{\frac{\bar{X}(1-\bar{X})}{n}u_{1-\frac{\alpha}{2}}^{2}+\frac{c^{2}}{4}}\right) \leq p \leq\frac{1}{1+c}\left(\bar{X}+\frac{c}{2}+\sqrt{\frac{\bar{X}(1-\bar{X})}{n}u_{1-\frac{\alpha}{2}}^{2}+\frac{c^{2}}{4}}\right)\)</span></p></blockquote><h1 id="假设检验">假设检验</h1><ul><li>假设检验的基本步骤</li></ul><blockquote><ol type="1"><li>建立假设 <span class="math inline">\(\mathrm{H}_{0}: \theta \in\Theta_{0} \quad\)</span> VS <span class="math inline">\(\quad H_{1}:\theta \in \Theta_{1}\)</span>（原假设和备择假设不一定是对立的）</li><li>选择检验统计量, 给出拒绝域的形式——所谓拒绝域W是指使原假设被拒绝的样本观测值所在的区域, 有时也将 <spanclass="math inline">\(\overline{\mathbf{W}}\)</span> 称为接受域。</li><li>选择显著性水平 <span class="math inline">\(\alpha\)</span>(具体异常到什么程度拒绝原假设)。其定义为 <spanclass="math inline">\(\alpha=\max\left\{\mathrm{P}\left(\right.\right.\)</span> 拒绝 <spanclass="math inline">\(\mathrm{H}_{0} \mid \mathrm{H}_{0}\)</span> 为真<span class="math inline">\(\left.)\right\}=\max\left\{\mathrm{P}_{\theta}(\mathrm{X} \in \mathbf{W}),\boldsymbol{\theta} \in\Theta_{0}\right\}\)</span>，也即原假设成立时被拒绝的概率的最大值。（如果原假设是<span class="math inline">\(\mu \ge const\)</span>，那么 <spanclass="math inline">\(\alpha\)</span> 就是取最大值，一般就在 <spanclass="math inline">\(\mu=const\)</span> 时取到，如果原假设就是 <spanclass="math inline">\(\mu=const\)</span>，那么 <spanclass="math inline">\(\alpha\)</span> 就是 <spanclass="math inline">\(\mu=const\)</span> 时被拒绝的概率）</li><li>给出拒绝域的具体范围。</li></ol></blockquote><ul><li>两类错误</li></ul><blockquote><p>第一类错误 <spanclass="math inline">\(\alpha(\theta)=\mathrm{P}\left(\right.\)</span>拒绝 <span class="math inline">\(\mathrm{H}_{0} \mid\mathrm{H}_{0}\)</span> 为真 <spanclass="math inline">\()=\mathrm{P}_{\theta}(\mathrm{X} \in \mathrm{W}),\theta \in \Theta_{0}\)</span></p><p>第二类错误 <spanclass="math inline">\(\beta(\theta)=P\left(\right.\)</span> 接受 <spanclass="math inline">\(H_{0} \mid H_{1}\)</span> 为真 <spanclass="math inline">\()=P_{\theta}(X \in \bar{W}), \theta \in\Theta_{1}\)</span></p><p>举个例子：</p><p>对均匀总体 <span class="math inline">\(U(0, \theta)\)</span>做假设检验, 原假设与备择假设分别为 <span class="math inline">\(H_{0}:\theta=5, H_{1}: \theta&lt;5\)</span>, 以 <spanclass="math inline">\(x_{(n)}=\max \left\{x_{1}, \cdots,x_{n}\right\}\)</span> 为检验统计量, 显著性水平 <spanclass="math inline">\(\alpha=0.064\)</span>, 若样本容量 <spanclass="math inline">\(\boldsymbol{n}=\mathbf{3}\)</span>, 则拒绝域为</p><p>解: 只需要根据 <span class="math inline">\(\alpha\)</span>的定义，原假设为真时，拒绝检验统计量的最大概率。</p><p><spanclass="math inline">\(P\left(x_{(n)}&lt;c\right)=\left(\frac{c}{5}\right)^{n}=\alpha\Rightarrow\left(\frac{c}{5}\right)^{3}=0.064 \Rightarrow c=2,\quad\left\{\left(x_{1}, x_{2}, x_{3}\right):x_{(3)}&lt;2\right\}\)</span></p></blockquote><ul><li>U 检测（方差已知）</li></ul><blockquote><p>正态总体 <span class="math inline">\(N\left(\mu, \sigma^{2}\right),\mu\)</span> 末知, <span class="math inline">\(\sigma^{2}\)</span> 已知,对 <span class="math inline">\(\mu\)</span> 做检验 检 验 统 计 量 <spanclass="math inline">\(: u=\frac{\bar{x}-\mu_{0}}{\sigma /\sqrt{n}}=\frac{\sqrt{n}\left(\bar{x}-\mu_{0}\right)}{\sigma} \simN(0,1)\)</span></p><p><span class="math inline">\(H_{0}: \mu=\mu_{0} ; \quad H_{1}: \mu\neq \mu_{0} \quad\)</span> 拒绝域 <spanclass="math inline">\(\bar{x}&gt;\mu_{0}+\frac{\sigma}{\sqrt{n}}u_{1-\frac{\alpha}{2}}\)</span> 或 <spanclass="math inline">\(\bar{x}&lt;\mu_{0}-\frac{\sigma}{\sqrt{n}}u_{1-\frac{\alpha}{2}}\)</span></p><p><span class="math inline">\(H_{0}: \mu \geq \mu_{0} ; \quad H_{1}:\mu&lt;\mu_{0} \quad\)</span> 拒绝域 <spanclass="math inline">\(\bar{x}&lt;\mu_{0}-\frac{\sigma}{\sqrt{n}}u_{1-\alpha}\)</span></p><p><span class="math inline">\(H_{0}: \mu \leq \mu_{0} ; \quad H_{1}:\mu&gt;\mu_{0} \quad\)</span> 拒绝域 <spanclass="math inline">\(\bar{x}&gt;\mu_{0}+\frac{\sigma}{\sqrt{n}}u_{1-\alpha}\)</span></p></blockquote><ul><li>t 检测（方差未知）</li></ul><blockquote><p>正态总体 <span class="math inline">\(N\left(\mu, \sigma^{2}\right),\mu\)</span> 末知, <span class="math inline">\(\sigma^{2}\)</span> 末知,对 <span class="math inline">\(\mu\)</span> 做检验，检验统计量 <spanclass="math inline">\(t=\frac{\bar{x}-\mu_{0}}{s /\sqrt{n}}=\frac{\sqrt{n}\left(\bar{x}-\mu_{0}\right)}{s} \simt(n-1)\)</span> <span class="math display">\[\begin{array}{ll}H_{0}: \mu=\mu_{0} ; \quad H_{1}: \mu \neq \mu_{0} &amp; \text { 拒绝域} \bar{x}&gt;\mu_{0}+\frac{\sigma}{\sqrt{n}} t_{1-\frac{\alpha}{2}}(n-1)\text { 或 } \bar{x}&lt;\mu_{0}-\frac{\sigma}{\sqrt{n}}t_{1-\frac{\alpha}{2}}(n-1) \\H_{0}: \mu \geq \mu_{0} ; H_{1}: \mu&lt;\mu_{0} &amp; \text { 拒绝域 }\bar{x}&lt;\mu_{0}-\frac{\sigma}{\sqrt{n}} t_{1-\alpha}(n-1) \\H_{0}: \mu \leq \mu_{0} ; H_{1}: \mu&gt;\mu_{0} &amp; \text { 拒绝域 }\bar{x}&gt;\mu_{0}+\frac{\sigma}{\sqrt{n}} t_{1-\alpha}(n-1)\end{array}\]</span></p></blockquote><ul><li>p 值（更异常的概率）</li></ul><blockquote><p>检验的 p 值: 在一个假设检验问题中,利用样本观测值能够做出拒绝原假设的最小显著性水平;<strong>即原假设成立条件下,检验统计量出现在比观测值更异常的范围的概率的最大值</strong></p><p>所谓更异常，指的是更偏向备择假设的那个方向。</p><p>判断产品是否优质的问题 <span class="math inline">\(H_{0}: \mu \geq10\)</span> vs <span class="math inline">\(H_{1}: \mu&lt;10\)</span>;两次观测结果 <span class="math inline">\(\bar{x}=9.3,\bar{x}=10.15\)</span></p><p>p 值分别为 <span class="math display">\[\begin{array}{l}p_{1}=P(\bar{x} \leq 9.3)=P\left(\frac{\bar{x}-10}{1 / 2} \leq\frac{9.3-10}{1 / 2}\right)=\Phi(-1.4)=0.081 \\p_{2}=P(\bar{x} \leq 10.15)=P\left(\frac{\bar{x}-10}{1 / 2} \leq\frac{10.15-10}{1 / 2}\right)=\Phi(0.3)=0.618\end{array}\]</span></p></blockquote><h1 id="拟合优度检验与贝叶斯估计">拟合优度检验与贝叶斯估计</h1><ul><li>势函数</li></ul><blockquote><p>检验问题 <span class="math inline">\(\mathrm{H}_{0}: \theta \in\Theta_{0} \quad\mathrm{ VS } \quad \mathrm{H}_{1}: \theta \in\Theta_{1}\)</span> 拒绝域为 <span class="math inline">\(\mathrm{X} \in\mathrm{W}\)</span> 该检验的势函数: <spanclass="math inline">\(\mathbf{g}(\theta)=P_{\theta}(X \inW)\)</span></p><p>第一类错误 <spanclass="math inline">\(\alpha(\theta)=\mathrm{P}\left(\right.\)</span>拒绝 <span class="math inline">\(\mathrm{H}_{0} \mid\mathrm{H}_{0}\)</span> 为真 <spanclass="math inline">\()=\mathrm{P}_{\theta}(\mathrm{X} \in \mathrm{W}),\theta \in \Theta_{0}\)</span></p><p>第二类错误 <spanclass="math inline">\(\beta(\theta)=P\left(\right.\)</span> 接受 <spanclass="math inline">\(H_{0} \mid H_{1}\)</span> 为真 <spanclass="math inline">\()=P_{\theta}(X \in \bar{W}), \theta \in\Theta_{1}\)</span> <span class="math display">\[g(\theta)=\left\{\begin{array}{cc}\alpha(\theta), &amp; \theta \in \Theta_{0} \\1-\beta(\theta), &amp; \theta \in \Theta_{1}\end{array}\right.\]</span> 如果对任意的 <span class="math inline">\(\theta \in\Theta_{0}\)</span>，都有 <span class="math inline">\(\mathrm{g}(\theta)\leq \alpha\)</span>，则称该检验是显著性水平为 <spanclass="math inline">\(\alpha\)</span> 的显著性检验，简称显著性水平为<span class="math inline">\(\alpha\)</span> 的检验或水平为 <spanclass="math inline">\(\alpha\)</span> 的检验</p></blockquote><ul><li>拟合优度检验</li></ul><blockquote><p>K.Pearson 的 <span class="math inline">\(\chi^{2}\)</span> 检验</p><p>设总体服从离散分布：</p><p><span class="math inline">\(\begin{array}{cccc}\boldsymbol{X} &amp;\boldsymbol{x}_{1} &amp; \cdots &amp; \boldsymbol{x}_{k} \\\boldsymbol{P} &amp; \boldsymbol{p}_{1} &amp; \cdots &amp;\boldsymbol{p}_{k}\end{array}\)</span></p><p>进行 <span class="math inline">\(n\)</span> 次独立地观测, <spanclass="math inline">\(k\)</span> 个取值出现的频次分别为 <spanclass="math inline">\(N_{i}(i=1, \cdots, k)\)</span>, 则 <spanclass="math inline">\(X=\sum_{i=1}^{k} \frac{\left(N_{i}-np_{i}\right)^{2}}{n p_{i}}\)</span> 近似服从自由度为 <spanclass="math inline">\(k-1\)</span> 的 <spanclass="math inline">\(\chi^{2}\)</span> 分布。若需要通过样本估计 <spanclass="math inline">\(\mathrm{s}\)</span> 个参数，则 <spanclass="math inline">\(X=\sum_{i=1}^{\mathrm{n}} \frac{\left(N_{i}-Np_{i}\right)^{2}}{N p_{i}}\)</span> 近似服从自由度 <spanclass="math inline">\(\mathrm{k}-\mathrm{s}-1\)</span> 的卡方分布。</p></blockquote><ul><li>列联表检测</li></ul><blockquote><p>行 <span class="math inline">\(c_i\)</span>，列 <spanclass="math inline">\(d_i\)</span> <span class="math display">\[Y=\sum_{i=1}^{s} \sum_{j=1}^{t} \frac{\left(n_{i j}-n \cdot\frac{c_{i}}{n} \cdot \frac{d_{j}}{n}\right)^{2}}{n \cdot\frac{c_{i}}{n} \cdot \frac{d_{j}}{n}}=\sum_{i=1}^{s} \sum_{j=1}^{t}\frac{\left(n n_{i j}-c_{i} d_{j}\right)^{2}}{n c_{i} d_{j}}\]</span> 近似服从自由度为 <spanclass="math inline">\((s-1)(t-1)\)</span> 的 <spanclass="math inline">\(\chi^{2}\)</span> 分布</p></blockquote>]]></content>
    
    
    <summary type="html">梁老师教的蛮好，你把他 PF 了干嘛？</summary>
    
    
    
    <category term="课程" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    <category term="概统" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%BB%9F/"/>
    
    
    <category term="2022春季" scheme="http://example.com/tags/2022%E6%98%A5%E5%AD%A3/"/>
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>重力四子棋</title>
    <link href="http://example.com/2022/05/24/Lecture/2022%20Spring/Reinforcement/"/>
    <id>http://example.com/2022/05/24/Lecture/2022%20Spring/Reinforcement/</id>
    <published>2022-05-24T06:16:40.717Z</published>
    <updated>2022-10-03T13:30:46.361Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="重力四子棋">重力四子棋</h1><p><a href="https://zhaochenyang20.github.io/">Eren Zhao</a></p><p>赵晨阳 计 06 2020012363</p><h1 id="强化学习">强化学习</h1><h2 id="概念">概念</h2><p>强化学习是机器学习中的一个领域，强调如何基于环境而行动，以取得最大化的预期利益。其灵感来源于心理学中的行为主义理论，即有机体如何在环境给予的奖励或惩罚的刺激下，逐步形成对刺激的预期，产生能获得最大利益的习惯性行为。这个方法具有普适性，因此在其他许多领域都有研究，例如博弈论、控制论、运筹学、信息论、仿真优化、多主体系统学习、群体智能、统计学以及遗传算法。在运筹学和控制理论研究的语境下，强化学习被称作“近似动态规划”（approximatedynamicprogramming，ADP）。在最优控制理论中也有研究这个问题，虽然大部分的研究是关于最优解的存在和特性，并非是学习或者近似方面。在经济学和博弈论中，强化学习被用来解释在有限理性的条件下如何出现平衡。</p><p>在机器学习问题中，环境通常被规范为<strong>马尔可夫决策过程（MDP）</strong>，许多强化学习算法在这种情况下使用动态规划技巧。强化学习和标准的监督式学习之间的区别在于，它<strong>并不需要出现正确的输入/输出对，也不需要精确校正次优化的行为</strong>。</p><p>强化学习更加专注于在线规划，需要在探索（在未知的领域）和遵从（现有知识）之间找到平衡。强化学习中的“探索-遵从”的交换，在多臂老虎机（英语：multi-armedbandit）问题和有限MDP中研究得最多。</p><h2 id="强化学习的基本组件">强化学习的基本组件</h2><ul><li>环境/状态（标准的为静态stationary，对应的non-stationary）</li><li>agent（与环境交互的对象）</li><li>动作（action space，环境下可行的动作集合，离散/连续）</li><li>反馈（回报，reward，正是有了反馈，RL才能迭代，才会学习到策略链）</li></ul><h1 id="马尔可夫决策过程mdp">马尔可夫决策过程（MDP）</h1><h2 id="马尔可夫过程">马尔可夫过程</h2><p>在概率论及统计学中，马尔可夫过程（Markovprocess）又叫马尔可夫链(MarkovChain)，是一个具备了马尔可夫性质的随机过程，因为俄国数学家安德雷·马尔可夫得名。马尔可夫过程是不具备记忆特质的（memorylessness）。换言之，马尔可夫过程的条件概率仅仅与系统的当前状态相关，而与它的过去历史或未来状态，都是独立、不相关的。马尔可夫过程可以用一个元组表示，其中S 是有限数量的状态集，P 是状态转移概率矩阵。</p><h2 id="马尔可夫奖励过程">马尔可夫奖励过程</h2><p>马尔可夫奖励过程（Markov RewardProcess）在马尔可夫过程的基础上增加了奖励 R 和衰减系数 γ。R是一个奖励函数。S 状态下的奖励是某一时刻 t 处在状态 s 下在下一个时刻 t+1能获得的奖励期望（当进入某个状态会获得相应的奖励）。</p><h2 id="rl-与-mdp">RL 与 MDP</h2><p>在强化学习中，马尔可夫决策过程是对完全可观测的环境进行描述的，也就是说观测到的状态内容完整地决定了决策的需要的特征。几乎所有的强化学习问题都可以转化为MDP。</p><h1 id="蒙特卡洛方法mcm">蒙特卡洛方法（MCM）</h1><h2 id="简介">简介</h2><p>蒙特卡罗方法（Monte CarloMethod），也称统计模拟方法，是1940年代中期由于科学技术的发展和电子计算机的发明，而提出的一种以概率统计理论为指导的数值计算方法。是指使用随机数（或更常见的伪随机数）来解决很多计算问题的方法。</p><p>20世纪40年代，在冯·诺伊曼，斯塔尼斯拉夫·乌拉姆和尼古拉斯·梅特罗波利斯在洛斯阿拉莫斯国家实验室为核武器计划工作时，发明了蒙特卡罗方法。因为乌拉姆的叔叔经常在摩纳哥的蒙特卡洛赌场输钱得名，而蒙特卡罗方法正是以概率为基础的方法。</p><p>通常蒙特卡罗方法可以粗略地分成两类：一类是所求解的问题本身具有内在的随机性，借助计算机的运算能力可以直接模拟这种随机的过程。例如在核物理研究中，分析中子在反应堆中的传输过程。中子与原子核作用受到量子力学规律的制约，人们只能知道它们相互作用发生的概率，却无法准确获得中子与原子核作用时的位置以及裂变产生的新中子的行进速率和方向。科学家依据其概率进行随机抽样得到裂变位置、速度和方向，这样模拟大量中子的行为后，经过统计就能获得中子传输的范围，作为反应堆设计的依据。</p><p>另一种类型是所求解问题可以转化为某种随机分布的特征数，比如随机事件出现的概率，或者随机变量的期望值。通过随机抽样的方法，以随机事件出现的频率估计其概率，或者以抽样的数字特征估算随机变量的数字特征，并将其作为问题的解。这种方法多用于求解复杂的多维积分问题。</p><p>例如，下图阐释了如何利用蒙特卡洛方法来估算 <spanclass="math inline">\(\pi\)</span> 的值：</p><p><img src="https://zhaochenyang20.github.io/gif/pi.gif" style="zoom:70%;" /></p><h2 id="前景">前景</h2><p>就单纯的用蒙特卡洛方法来下棋（最早在1993年被提出，后在2001被再次提出），我们可以简单的用随机比赛的方式来评价某一步落子。从需要评价的那一步开始，双方随机落子，直到一局比赛结束。为了保证结果的准确性，这样的随机对局通常需要进行上万盘，记录下每一盘的结果，最后取这些结果的平均，就能得到某一步棋的评价。最后要做的就是取评价最高的一步落子作为接下来的落子。也就是说为了决定一步落子就需要程序自己进行上万局的随机对局，这对随机对局的速度也提出了一定的要求。和使用了大量围棋知识的传统方法相比，这种方法的好处显而易见，就是几乎不需要围棋的专业知识，只需通过大量的随机对局就能估计出一步棋的价值。再加上一些优化方法，基于纯蒙特卡洛方法的围棋程序已经能够匹敌最强的传统围棋程序。</p><p>既然蒙特卡洛的路似乎充满着光明，我们就应该沿着这条路继续前行。MCTS也就是将以上想法融入到树搜索中，利用树结构来更加高效的进行节点值的更新和选择。</p><h1 id="蒙特卡洛树搜索mcts">蒙特卡洛树搜索（MCTS）</h1><h2 id="简介-1">简介</h2><p>蒙特卡洛树搜索（Monte Carlo treesearch；MCTS）是一种用于某些决策过程的启发式搜索算法，最引人注目的是在游戏中的使用。一个主要例子是电脑围棋程序，它也用于其他棋盘游戏、即时电子游戏以及不确定性游戏。</p><h2 id="搜索步骤">搜索步骤</h2><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/MCTS.jpg" alt="MCTS" style="zoom:50%;" /></p><ul><li>选择(selection)：根据当前获得所有子步骤的统计结果，选择一个最优的子步骤。从根结点R开始，选择连续的子结点向下至叶子结点L。一般而言，让游戏树向最优的方向扩展，这是蒙特卡洛树搜索的精要所在。</li><li>扩展(expansion)：在当前获得的统计结果不足以计算出下一个步骤时，随机选择一个子步骤。除非任意一方的输赢使得游戏在L 结束，否则创建一个或多个子结点并选取其中一个结点 C。</li><li>模拟(simulation)：模拟游戏，进入下一步。在从结点C开始，用随机策略进行游戏，又称为playout或者rollout。</li><li>反向传播(Back-Propagation)：根据游戏结束的结果，计算对应路径上统计记录的值。使用随机游戏的结果，更新从C到R的路径上的结点信息。</li><li>决策（decision）：当到了一定的迭代次数或者时间之后结束，选择根节点下最好的子节点作为本次决策的结果。</li></ul><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/MCTS2.jpg" alt="MCTS" style="zoom:30%;" /></p><h2 id="具体算法">具体算法</h2><p>在开始阶段，搜索树只有一个节点，也就是我们需要决策的局面。</p><p>搜索树中的每一个节点包含了三个基本信息：代表的局面，被访问的次数，累计评分。</p><h3 id="选择">选择</h3><p>在选择阶段，需要从根节点，也就是要做决策的局面 R出发向下选择出一个最急迫需要被拓展的节点 N，局面 R是每一次迭代中第一个被检查的节点；</p><p>对于被检查的局面而言，他可能有三种可能：</p><ol type="1"><li>该节点所有可行动作（即所有子节点）都已经被拓展过</li><li>该节点有可行动作（还有子节点）还未被拓展过</li><li>这个节点游戏已经结束了(例如已经连成四子的四子棋局面)</li></ol><p>对于这三种可能：</p><ol type="1"><li>如果所有可行动作都已经被拓展过，即所有子节点都有了战绩，那么我们将使用UCB 公式计算该节点所有子节点的 UCB值，并找到值最大的一个子节点继续向下迭代。</li><li>如果被检查的节点 A 依然存在没有被拓展的子节点 B (也即还有战绩为 0/0的节点)，那么我们认为 A 节点就是本次迭代的的目标节点，紧接着对 A进行扩展。</li><li>如果被检查到的节点是一个游戏已经结束的节点。那么从该节点直接记录战绩，并且反向传播。</li></ol><h3 id="扩展">扩展</h3><p>在选择阶段结束时候，我们查找到了一个最迫切被拓展的节点N，以及他一个尚未拓展的动作 A。在搜索树中创建一个新的节点 <spanclass="math inline">\(N_A\)</span> 作为N的一个新子节点，<spanclass="math inline">\(N_A\)</span> 的局面就是节点 N 在执行了动作 A之后的局面。</p><h3 id="模拟">模拟</h3><p>为了让 <span class="math inline">\(N_A\)</span>得到一个初始的评分,我们从 <span class="math inline">\(N_A\)</span>开始，让游戏随机进行，直到得到一个游戏结局，这个结局将作为 <spanclass="math inline">\(N_A\)</span> 的初始战绩，采用 <spanclass="math inline">\(\frac{胜场}{总次数}\)</span>来记录。</p><h3 id="反向传播">反向传播</h3><p>在 <span class="math inline">\(N_A\)</span>的模拟结束之后，它的父节点 n 以及从根节点到 N的路径上的所有节点都会根据本次模拟的结果来添加自己的累计评分，注意评分具有交替性。如果在选择阶段直接造成了游戏结局，则跳过模拟，根据该结局来更新评分。</p><h3 id="决策">决策</h3><p>每一次迭代都会拓展搜索树，随着迭代次数的增加，搜索树的规模也不断增加。当到了一定的迭代次数或者时间之后结束，选择根节点下最好的子节点作为本次决策的结果。</p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/MCTS4.jpg" alt="MCTS" style="zoom:37%;" /></p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/MCTS3.jpg" alt="MCTS" style="zoom:50%;" /></p><p>简化后的中文流程图如下：</p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/MCTS5.png" alt="MCTS" style="zoom:37%;" /></p><h1 id="uct">UCT</h1><h2 id="ucb1">UCB1</h2><p><span class="math display">\[UCB1 = V_i + c\sqrt{\frac{\ln{N}}{n_i}}\]</span></p><ul><li><span class="math inline">\(V_i\)</span> 表示当前节点 i的战绩。</li><li><span class="math inline">\(N\)</span>为当前节点的父节点被访问的次数。</li><li><span class="math inline">\(n_i\)</span>为当前节点i被访问的次数。</li><li>c 为探索参数，在实际中通常可凭经验选择。c越大，就会越照顾访问次数相对较少的子节点。</li></ul><h2 id="mcts-ucb1">MCTS + UCB1</h2><p>UCT 算法（Upper Confidence Bound Apply toTree）即上限置信区间算法，是一种博弈树搜索算法，该算法将蒙特卡洛树搜索方法与UCB公式结合，在超大规模博弈树的搜索过程中相对于传统的搜索算法有着时间和空间方面的优势。</p><p>即：MCTS + UCB1 = UCT</p><p>算法中的 UCB 公式可替换为：UCB1-tuned 等</p><p>UCT 提供了比传统树搜索更好的方法。</p><h3 id="优点">优点</h3><ul><li><p>Aheuristic 启发式</p><p>MCTS不要求任何关于给定的领域策略或者具体实践知识来做出合理的决策。这个算法可以在没有任何关于博弈游戏除基本规则外的知识的情况下进行有效工作；这意味着一个简单的MCTS实现可以重用在很多的博弈游戏中，只需要进行微小的调整，所以这也使得 MCTS是对于一般的博弈游戏的很好的方法。</p></li><li><p>Asymmetric 非对称</p><p>MCTS执行一种非对称的树的适应搜索空间拓扑结构的增长。这个算法会更频繁地访问更加有趣的节点，并聚焦其搜索时间在更加相关的树的部分。这使得MCTS 更加适合那些有着更大的分支因子的博弈游戏，比如说 19X19的围棋。这么大的组合空间会给标准的基于深度或者宽度的搜索方法带来问题，所以MCTS的适应性说明它（最终）可以找到那些更加优化的行动，并将搜索的工作聚焦在这些部分。</p></li><li><p>任何时间</p><p>算法可以在任何时间终止，并返回当前最有的估计。当前构造出来的搜索树可以被丢弃或者供后续重用。（对比dfs暴力搜索）</p></li><li><p>简洁</p><p>算法实现非常方便（ http://mcts.ai/code/python.html ）</p></li></ul><h3 id="缺点">缺点</h3><p>UCT 有缺点很少，但这些缺点也可能是非常关键的影响因素。</p><ul><li><p>行为能力</p><p>UCT算法，根据其基本形式，在某些甚至不是很大的博弈游戏中在可承受的时间内也不能够找到最好的行动方式。这基本上是由于组合步的空间的全部大小所致，关键节点并不能够访问足够多的次数来给出合理的估计。</p></li><li><p>速度</p><p>UCT搜索可能需要足够多的迭代才能收敛到一个很好的解上，这也是更加一般的难以优化的应用上的问题。例如，最佳的围棋程序可能需要百万次的交战和领域最佳和强化才能得到专家级的行动方案，而最有的GGP实现对更加复杂的博弈游戏可能也就只要每秒钟数十次（领域无关的）交战。对可承受的行动时间，这样的GGP可能很少有时间访问到每个合理的行动，所以这样的情形也不大可能出现表现非常好的搜索。</p></li></ul><h1 id="具体实现">具体实现</h1><ul><li>为了简洁优雅地实现我的 MCTS 策略，我使用 <code>enhencement.h</code>来实现了 <code>Node</code> 类和 <code>UCT</code> 类</li><li><code>Node</code> 类接口如下：</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">  <span class="title">double</span> <span class="title">profit</span>;</span>                  <span class="comment">// 当前节点的胜率</span></span><br><span class="line">  <span class="keyword">int</span> visit;                        <span class="comment">// 总访问次数</span></span><br><span class="line">  <span class="keyword">int</span> ban_x, ban_y;            <span class="comment">// 被去除的点位</span></span><br><span class="line">  <span class="keyword">int</span> height;                      <span class="comment">// 棋盘高度</span></span><br><span class="line">  <span class="keyword">int</span> width;                       <span class="comment">// 棋盘宽度</span></span><br><span class="line">  <span class="keyword">int</span> expandableNodeNum;            <span class="comment">// 可扩展节点数</span></span><br><span class="line">  <span class="keyword">int</span> position_x, position_y;  <span class="comment">// 落子位置</span></span><br><span class="line">  <span class="keyword">bool</span> expanded;                 <span class="comment">// 是否已经扩展</span></span><br><span class="line">  <span class="keyword">bool</span> chance;                  <span class="comment">// 是否为己方棋子</span></span><br><span class="line">  <span class="keyword">int</span>** boardStatus;  <span class="comment">// 当前局面状况</span></span><br><span class="line">  <span class="keyword">int</span>* topStatus;     <span class="comment">// 当前每一列顶部状况</span></span><br><span class="line">  Node* parent;  <span class="comment">// 父节点</span></span><br><span class="line">  Node** children;     <span class="comment">// 子节点</span></span><br><span class="line">expand; <span class="comment">// 扩展，用于 treePolicy 中调用</span></span><br><span class="line">Node <span class="comment">// 构造函数</span></span><br><span class="line">  ~Node <span class="comment">// 析构函数</span></span><br><span class="line">  <span class="keyword">int</span>* expandableNodeID;  <span class="comment">// 从当前节点开始可扩展节点的行号</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">must</span><span class="params">(chance)</span><span class="comment">// 判定需要紧急处理的棋局情况，例如三子共线</span></span></span><br><span class="line"><span class="function">  bestChild</span>; <span class="comment">// 在所有子节点中选择 UCB1 值最高的节点</span></span><br></pre></td></tr></table></figure><ul><li><code>UCT</code> 类接口如下：</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UCT</span></span></span><br><span class="line"><span class="class">  <span class="title">width</span>, <span class="title">height</span>;</span>  <span class="comment">// 棋盘规格</span></span><br><span class="line">  ban_x, ban_y;   <span class="comment">// 被去除的点位</span></span><br><span class="line">  expanded;      <span class="comment">// 是否已经展开</span></span><br><span class="line">  Node* root;<span class="comment">// 根节点</span></span><br><span class="line">UCT <span class="comment">// 构造函数</span></span><br><span class="line">  ~UCT <span class="comment">// 析构函数</span></span><br><span class="line">  middle_the_best <span class="comment">// 用来实现下文所述的中庸之道</span></span><br><span class="line">  search <span class="comment">// 在时间限制内不断运行伪代码，之后给出根节点的最佳子节点</span></span><br><span class="line">  treePolicy <span class="comment">// 即伪代码中的 treePolicy，不再赘述</span></span><br><span class="line">  defaultPolicy <span class="comment">// 即伪代码中的 defaultPolicy，不再赘述</span></span><br></pre></td></tr></table></figure><h1 id="可行的优化方向">可行的优化方向</h1><p>总地来说，本次实验采用的是MCTS算法。在实现我认为有如下细节可以优化：</p><h2 id="反向传播时的参数更新">反向传播时的参数更新</h2><p>与马老师课堂所讲述方法略有不同，在具体实现时，我令 Rollout过程中，己方赢的回报为 1，对手赢的回报为 -1，平局回报为 0。</p><p>该回报值反向地沿当轮迭代的路径从被 Rollout节点向根节点传播。具体来说，如果一个节点是极大节点（说明其父节点为极小节点），则该节点的值减去回报值；如果一个节点是极小节点，则该节点的值加上回报值。</p><p>选择上述反向传播的更新方法时，UCB评估算式对于所有节点都是一样的，不必区分极大与极小节点。（相反，若在反向传播过程中没有区分极大与极小节点，则UCB算式需要区分。）</p><h2 id="三连攻防">三连攻防</h2><p>参考 <code>judge.cpp</code> 中已经实现了的判定输赢所用的<code>userWin</code> 与 <code>machineWin</code>函数，二者判定了四点共线的情况。</p><p>联系到在下五子棋的过程中，每当出现三个点连成一片时，就需要执行攻防策略了，四子棋中理应如此。然而四子棋需考虑重力因素，因此具有独特的攻防特性。</p><p>具体而言，我在 <code>Node</code> 类中实现了 <code>must</code>函数，用于判定是否有地方三子共线且是敌方是否能连上第四子。如果敌方能够立刻连上第四子，则我方直接跳过模拟过程，堵住敌方的第四子，此所谓三连攻防问题。</p><h2 id="中庸之道">中庸之道</h2><blockquote><p>中庸之为德也，其至矣乎，民鲜久矣！——《论语》</p><p>“本手、妙手、俗手”是围棋的三个术语。本手是指合平棋理的正规下法；妙手是指出人意料的精妙下法；俗手是指貌似合理，而从全局看通常会受损的下法。对于初学者而言，应该从本手开始，本手的功夫扎实了，棋力才会提高。一些初学者热衣于追求妙手，而忽视更为常用的本手。本手是基础，妙手是创造。一般来说，对本手理解深刻，才可能出现妙手；否则，难免下出俗手，水平也不易提升。——《2022年全国卷新高考 I 卷语文作文试题》</p></blockquote><p>在五子棋中，一般而言，向棋盘中间挺进的落子更容易成为妙手，而越往角落挺进的棋子，多为不得已为止，大抵为本手，更有很大可能沦为俗手。</p><p>在四子棋的对弈过程中，也有类似的规律，由于重力原因，四子棋的棋盘中央即为棋盘底部的中央，于是我考虑<code>defaultPolicy</code>随机走子的基础上，更改底部各子的权重，增大中部的权重，更容易将棋子下在中部，这样下出妙手的可能性更高，提高了有效模拟的比例。</p><p>具体而言，假设棋盘宽度为 <spanclass="math inline">\(2k+1\)</span>，则底部棋盘的权重从左侧到右侧依次为$1,2,k,k+1,k,,2,1 $，倘若棋盘宽度为 <spanclass="math inline">\(2k\)</span>，则权重为 <spanclass="math inline">\(1,2,\cdots,k,k,\cdots,2,1\)</span>，并按此权重选择棋子，具体的选择方法参考<code>middle_the_best()</code> 函数。</p><h2 id="信息储存">信息储存</h2><p>基本的实现过程中，每个棋子都储存了一次整个棋盘的信息，可以预料到会造成大量的内存浪费。可以在每轮迭代之前创建一个初始棋盘（自行实现的Board类，存储处于某种状态的棋盘），每轮迭代开始时复制一个初始棋盘。由于MCTS算法在搜索树中的路径是一直向下的，因此可以根据节点（Node类）存储的其相对于父节点多走的一步棋的信息，边向下搜索边更新棋盘。这样不用每个节点存储一个棋盘，占用大量空间。</p><p>另外，考虑到对于搜索树上的节点，如果采用 C++ 中 new的方式每次逐个创建，则会由于 new操作的常数以及访问不连续的地址浪费较多时间。可以考虑利用内存池的方法来优化这一内存损耗。</p><h2 id="最终策略选择">最终策略选择</h2><p>我在最终一步选择了 UCB1 值最大的节点，达到了 90%以上的胜率。然而如果仅仅将这一步改为选择被访问次数最多的节点，在 Saiblo网站上使用 50 个样例 AI 进行评测的正确率就会由 90% 以上下降到 50%左右。</p><p>鉴于实现策略存在明显错误的 AI 在 Saiblo 网站上的正确率仍为40%-50%（此现象为通过一些尝试发现），可知后一种选择方式是极其糟糕的。最终选择还是UCB 评估值最大策略。</p><h2 id="参数优化">参数优化</h2><p>本次实验主要能够调整的参数是 <code>timelimit</code> 与 UCB1 算法中的<code>C</code> 值。</p><p>对于时限参数，这一参数显著收到了测评机稳定性的影响。某天晚上我测试时，将<code>timelimit</code> 设置为 <code>2.7 * CLOCKS_PER_SEC</code>，拿到了97% 的胜率，第二天上午再原样测试，胜率显著降低，直接到了60%，而失败原因为大量的 TLE。</p><p>起初我试图联系平台助教，请求修复这个bug，然而我事后想想，作为一个运维工作中，服务器波动实属正常。我应该尽力从算法和C++ 语言特性去优化我的AI，而不是限制运维人员，遂放弃了苛责服务器的想法。</p><p>接着是 <code>C</code>值，受限于批量测试次数有限，我只能手动调整参数，在服务器性能较好的一天晚上，我以<code>2.7 * CLOCKS_PER_SEC</code> 为时限，与实力较为强劲的 15个机器人对弈，得到的结果如下：</p><table><thead><tr class="header"><th>C 参数</th><th>胜率</th></tr></thead><tbody><tr class="odd"><td>0.7</td><td>70</td></tr><tr class="even"><td>0.6</td><td>76</td></tr><tr class="odd"><td>0.575</td><td>80</td></tr><tr class="even"><td>0.55</td><td>83</td></tr><tr class="odd"><td>0.525</td><td>73</td></tr><tr class="even"><td>0.5</td><td>66</td></tr></tbody></table><p>对打的 AI为：<code>&lt;&lt;Connect4_100&gt;&gt; &lt;&lt;Connect4_94&gt;&gt; &lt;&lt;Connect4_92&gt;&gt; &lt;&lt;Connect4_96&gt;&gt; &lt;&lt;Connect4_98&gt;&gt; &lt;&lt;Connect4_90&gt;&gt; &lt;&lt;Connect4_84&gt;&gt; &lt;&lt;Connect4_74&gt;&gt; &lt;&lt;Connect4_76&gt;&gt; &lt;&lt;Connect4_80&gt;&gt; &lt;&lt;Connect4_88&gt;&gt; &lt;&lt;Connect4_78&gt;&gt; &lt;&lt;Connect4_86&gt;&gt; &lt;&lt;Connect4_82&gt;&gt; &lt;&lt;Connect4_70&gt;&gt;</code></p><p>c 为探索参数，在实际中通常可凭经验选择。c越大，就会越照顾访问次数相对较少的子节点。一般而言，C越大越激进，反之则保守。我选择了相对激进的 0.7 作为最终参数。</p><h2 id="带策略出棋">带策略出棋</h2><p>无策略指在 Rollout过程中的每一步，采用完全随机的方式走子。而这一步可以优化为带策略出棋：</p><ol type="1"><li><p>遍历所有可能的走子方式。若当前角色能在某处落子后获胜，则本次模拟立即以这种方式结束，并返回相应的结果。（此即我所实现的 <code>must</code> 方法）</p></li><li><p>若当前角色没有能一步获胜的方法，则再次遍历所有可能的走子方式。若当前角色的对手能在某处落子后获胜，则该模拟回合当前角色立即抢占该位置，然后直接进入下一回合的模拟。</p></li><li><p>对于随机走子，可以尝试简单地更改权重，具体方法已在中庸之道一节描述。</p></li></ol><p>这三条最简单的策略其实带来了性能上的隐忧。每一模拟回合中的两轮遍历比随机走子多了一次棋盘宽度的遍历（随机走子也要先遍历一次得到所有可落子点），并且每次遍历中由于要尝试某处落子后某方是否能立即胜利，还要花费更多的时间去判断是否获胜。可以预料到将会高度地影响到能够进行的模拟次数。</p><p>我实现了 <code>must</code>方法后，发现对于对局结果影响差强人意，第二个方法实现了之后，反而胜率降低。第三个方法带来了稳定的提升。</p><p>由此可知，策略的存在牺牲了部分迭代次数，但提高了大量模拟中有效模拟（即贴近现实理性情况的模拟）次数的占比。因此，给定一定的时间资源，无法进行超大量模拟的前提下，把握好策略的复杂度，平衡迭代次数、模拟次数与有效率的trade-off，是优化 MCTS 算法的关键。</p><h2 id="其他技巧">其他技巧</h2><p>网站 https://www.xqbase.com/computer.htm上介绍了位棋盘的数据结构，可以用于加速胜负的判断，从而进一步提高迭代次数。不过由于时间精力所限，本次实验中没有实现。</p><h1 id="总结">总结</h1><p>最终胜率如下：</p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/IAI/win.jpg" alt="MCTS" style="zoom:20%;" /></p><p>本次四子棋实验中，我学习并实现了 MCTS算法，并在关于“随机模拟与策略”问题的实验和分析中加深了对该算法的理解，同时也练习了寻找问题并优化矛盾的思维方式。</p><h1 id="references">References</h1><p>Guillaume Chaslot, Mark Winands, H. Herik, Jos Uiterwijk, and BrunoBouzy. Progressive strategies for monte-carlo tree search. NewMathematics and Natural Computation, 04:343–357, 11 2008.</p>]]></content>
    
    
    <summary type="html">蒙特卡罗方法得名于发明者的叔叔，他经常在摩纳哥的蒙特卡洛赌场输钱...</summary>
    
    
    
    <category term="课程" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    <category term="深度学习" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="2022春季" scheme="http://example.com/tags/2022%E6%98%A5%E5%AD%A3/"/>
    
    <category term="科研" scheme="http://example.com/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>深度学习基础</title>
    <link href="http://example.com/2022/05/17/Lecture/2022%20Spring/binaryDivdence/"/>
    <id>http://example.com/2022/05/17/Lecture/2022%20Spring/binaryDivdence/</id>
    <published>2022-05-17T07:14:54.399Z</published>
    <updated>2022-12-30T13:12:01.673Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="readme">readme</h1><p>这一章马老师讲的很玄学，尽我所能写一写…</p><p>Credit to <a href="https://zhaochenyang20.github.io/">Eren Zhao</a>and <a href="https://saltyp0rridge.github.io/">saltyp0rridge</a>.</p><h1 id="what-is-neural-network">What is neural network？</h1><h2 id="术语">术语</h2><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/hidden.jpg" style="zoom:50%;" /></p><ol type="1"><li><strong>全连接神经网络</strong> —— 对 n-1 层和 n 层而言，n-1层的任意一个节点，都和第 n 层所有节点有连接。即第 n层的每个节点在进行计算的时候，<ahref="https://so.csdn.net/so/search?q=激活函数&amp;spm=1001.2101.3001.7020">激活函数</a>的输入是n-1层所有节点的加权，这个激活函数是非线性的，可作用于大多数场景，然而<strong>权重过多，计算量很大。</strong></li><li><strong>前馈神经网络</strong> ——在其内部，参数从输入层向输出层单向传播。有异于<ahref="https://zh.wikipedia.org/wiki/循环神经网络">循环神经网络</a>，它的内部不会构成<ahref="https://zh.wikipedia.org/wiki/環_(圖論)">有向环</a>。</li><li><strong>多层感知器</strong> ——（MultilayerPerceptron,缩写MLP）是一种前向结构的<ahref="https://zh.m.wikipedia.org/wiki/人工神经网络">人工神经网络</a>，映射一组输入向量到一组输出向量。MLP可以被看作是一个有向图，由多个的节点层所组成，每一层都全连接到下一层。除了输入节点，每个节点都是一个带有非线性激活函数的神经元（或称处理单元）。一种被称为<ahref="https://zh.m.wikipedia.org/wiki/反向传播算法">反向传播算法</a>的<ahref="https://zh.m.wikipedia.org/wiki/监督学习">监督学习</a>方法常被用来训练MLP。多层感知器遵循人类神经系统原理，学习并进行数据预测。它首先学习，然后使用权重存储数据，并使用算法来调整权重并减少训练过程中的偏差，即实际值和预测值之间的误差。主要优势在于其快速解决复杂问题的能力。多层感知的基本结构由三层组成：第一输入层，中间隐藏层和最后输出层，输入元素和权重的乘积被馈给具有神经元偏差的求和结点,主要优势在于其快速解决复杂问题的能力。MLP是<ahref="https://zh.m.wikipedia.org/wiki/感知器">感知器</a>的推广，克服了感知器不能对<ahref="https://zh.m.wikipedia.org/w/index.php?title=线性不可分&amp;action=edit&amp;redlink=1">线性不可分</a>数据进行识别的弱点。</li><li><strong>全连接层</strong> —— Fully Connected Layer 类似 FCN</li><li><strong>稠密层</strong> —— 即 FCL 的同义词</li></ol><h2 id="结构与激活函数">结构与激活函数</h2><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/nearun.jpg" style="zoom:25%;" /></p><p>通过增设 0 项可以统一形式，不必单独写偏置量。</p><p><img src="https://paddlepedia.readthedocs.io/en/latest/_images/identity.jpg" alt="图1 identity" style="zoom:33%;" /></p><h3 id="identity">Identity</h3><p>优点：适合于潜在行为是线性（与线性回归相似）的任务。</p><p>缺点：无法提供非线性映射，当多层网络使用identity激活函数时，整个网络就相当于一个单层模型。</p><h3 id="sigmoid">sigmoid</h3><p>一般论文中的 <span class="math inline">\(\sigma\)</span> 专指sigmoid。连续，用的多。</p><p>函数定义： <span class="math display">\[{ f }(x)=\sigma (x)=\frac { 1 }{ 1+{ e }^{ -x } }\]</span> 导数：</p><p><span class="math display">\[{ f }^{ &#39; }(x)=f(x)(1-f(x))\]</span><img src="https://paddlepedia.readthedocs.io/en/latest/_images/sigmoid.jpg" alt="sigmoid" style="zoom:33%;" /></p><p>优点： 1. <span class="math inline">\(sigmoid\)</span>函数的输出映射在 <span class="math inline">\((0,1)\)</span>之间，单调连续，输出范围有限，优化稳定，可以用作输出层； 2.求导容易；</p><p>缺点： 1.由于其软饱和性，一旦落入饱和区梯度就会接近于0，根据反向传播的链式法则，容易产生梯度消失，导致训练出现问题；2. Sigmoid 函数的输出恒大于0。非零中心化的输出会使得其后一层的神经元的输入发生偏置偏移（BiasShift），并进一步使得梯度下降的收敛速度变慢； 3.计算时，由于具有幂运算，计算复杂度较高，运算速度较慢。</p><h3 id="tanh">tanh</h3><p>取值范围在 <code>(-1, 1)</code>，可经过简单变换变成 sigmoid。</p><p>函数定义：</p><p><span class="math display">\[{ f }(x)=tanh(x)=\frac { { e }^{ x }-{ e }^{ -x } }{ { e }^{ x }+{ e }^{-x } }\]</span></p><p>导数：</p><p><span class="math display">\[{ f }^{ &#39; }(x)=1-f(x)^{ 2 }\]</span></p><p>函数图形如 <strong>图4</strong> 所示：</p><p><img src="https://paddlepedia.readthedocs.io/en/latest/_images/tanh.jpg" alt="tanh" style="zoom:33%;" /></p><p>优点： 1. <span class="math inline">\(tanh\)</span> 比 <spanclass="math inline">\(sigmoid\)</span> 函数收敛速度更快； 2. 相比 <spanclass="math inline">\(sigmoid\)</span> 函数，<spanclass="math inline">\(tanh\)</span> 是以 <spanclass="math inline">\(0\)</span> 为中心的；</p><p>缺点： 1. 与 <span class="math inline">\(sigmoid\)</span>函数相同，由于饱和性容易产生的梯度消失； 2. 与 <spanclass="math inline">\(sigmoid\)</span>函数相同，由于具有幂运算，计算复杂度较高，运算速度较慢。</p><h3 id="relu">ReLU</h3><p>线性整流函数，整流这个词来自二极管。</p><p>函数定义：</p><p><span class="math display">\[f(x)=\begin{cases} \begin{matrix} 0 &amp; x&lt;0 \end{matrix} \\\begin{matrix} x &amp; x\ge 0 \end{matrix} \end{cases}\]</span> 导数：</p><p><span class="math display">\[{ { f }(x) }^{ &#39; }=\begin{cases} \begin{matrix} 0 &amp; x&lt;0\end{matrix} \\ \begin{matrix} 1 &amp; x\ge 0 \end{matrix} \end{cases}\]</span><img src="https://paddlepedia.readthedocs.io/en/latest/_images/relu.jpg" alt="ReLU" style="zoom:33%;" /></p><p>优点： 1. 收敛速度快； 2. 相较于 <spanclass="math inline">\(sigmoid\)</span> 和 <spanclass="math inline">\(tanh\)</span> 中涉及了幂运算，导致计算复杂度高，ReLU可以更加简单的实现； 3. 当输入 <spanclass="math inline">\(x&gt;=0\)</span> 时，ReLU的导数为常数，这样可有效缓解梯度消失问题； 4. 当 <spanclass="math inline">\(x&lt;0\)</span> 时，ReLU 的梯度总是 <spanclass="math inline">\(0\)</span>，提供了神经网络的稀疏表达能力；</p><p>缺点： 1. ReLU 的输出不是以 <span class="math inline">\(0\)</span>为中心的； 2.神经元坏死现象，某些神经元可能永远不会被激活，导致相应参数永远不会被更新；3. 不能避免梯度爆炸问题；</p><h3 id="softmax">softmax</h3><p>在输出时，作用在整个层上，输出的和为 1，可视为概率。</p><p>softmax函数一般用于多分类问题中，它是对逻辑斯蒂（logistic）回归的一种推广，也被称为多项逻辑斯蒂回归模型(multi-nominallogistic mode)。假设要实现 k 个类别的分类任务，Softmax 函数将输入数据<span class="math inline">\(x_i\)</span> 映射到第 <spanclass="math inline">\(i\)</span> 个类别的概率 <spanclass="math inline">\(y_i\)</span> 如下计算：</p><p><span class="math display">\[y_i=soft\max \left( x_i \right) =\frac{e^{x_i}}{\sum_{j=1}^k{e^{x_j}}}\]</span></p><p>显然，<spanclass="math inline">\(0&lt;y_i&lt;1\)</span>。下图给出了三类分类问题的softmax 输出示意图。在图中，对于取值为 4、1和-4 的 <spanclass="math inline">\(x_1\)</span>、<spanclass="math inline">\(x_2\)</span> 和 <spanclass="math inline">\(x_3\)</span>，通过 softmax 变换后，将其映射到(0,1) 之间的概率值。</p><p><img src="https://paddlepedia.readthedocs.io/en/latest/_images/softmax.png" style="zoom: 43%;" /></p><p>由于 softmax 输出结果的值累加起来为1，因此可将输出概率最大的作为分类目标。</p><p>也可以从如下另外一个角度来理解：给定某个输入数据，可得到其分类为三个类别的初始结果，分别用<span class="math inline">\(x_1\)</span>、<spanclass="math inline">\(x_2\)</span> 和 <spanclass="math inline">\(x_3\)</span> 来表示。这三个初始分类结果分别是4、1和 -4。通过 Softmax函数，得到了三个类别分类任务中以概率表示的更好的分类结果，即分别以95.25%、4.71% 和 0.04% 归属于类别 1、类别 2 和类别3。显然，基于这样的概率值，可判断输入数据属于第一类。可见，通过使用Softmax 函数，可求取输入数据在所有类别上的概率分布。</p><h2 id="如何训练与损失函数">如何训练与损失函数</h2><h3 id="梯度下降法">梯度下降法</h3><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/grand.jpg" style="zoom:25%;" /></p><ol type="1"><li>梯度是指增长最快的方向，故而需要加上梯度的相反数</li><li>在多维情况下，梯度计算较为复杂，可以改为偏导数</li></ol><h3 id="手动计算">手动计算</h3><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/gradient.jpg" style="zoom:25%;" /></p><p>这张图对于 sigmoid 情况下的梯度下降说的很清楚。</p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/gradient3.jpg" style="zoom:25%;" /></p><p>注意，这里 k 是 j 的后续，而不前驱，也即右图中 k 在 j 上方。</p><h3 id="梯度下降算法">梯度下降算法</h3><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/gradient2.jpg" style="zoom:25%;" /></p><p><strong>批量梯度下降</strong></p><p>标准的梯度下降，即批量梯度下降（batch gradient descent,BGD），在整个训练集上计算损失函数关于参数 <spanclass="math inline">\(\theta\)</span> 的梯度。</p><p><span class="math display">\[\theta=\theta-\eta \nabla_{\theta}J(\theta)\]</span> 其中 <span class="math inline">\(\theta\)</span>是模型的参数，<span class="math inline">\(\eta\)</span> 是学习率，<spanclass="math inline">\(\nabla_{\theta}J(\theta)\)</span> 为损失函数对参数<span class="math inline">\(\theta\)</span>的导数。由于为了一次参数更新我们需要在整个训练集上计算梯度，导致 BGD可能会非常慢，而且在训练集太大而不能全部载入内存的时候会很棘手。BGD也不允许我们在线更新模型参数，即实时增加新的训练样本。</p><p>BGD 对于凸误差曲面（convex errorsurface）保证收敛到全局最优点，而对于非凸曲面（non-convexsurface）则是局部最优点。</p><p>缺点：收敛缓慢，容易陷入局部极值点</p><p><strong>随机梯度下降</strong></p><p>随机梯度下降（ stotastic gradient descent, SGD）则是每次使用一个训练样本 <span class="math inline">\(x^{i}\)</span>和标签 <span class="math inline">\(y^{i}\)</span> 进行一次参数更新。</p><p><span class="math display">\[\theta=\theta -\eta \cdot \nabla_{\theta}J(\theta;x^i;y^i)\]</span> 其中 <span class="math inline">\(\theta\)</span>是模型的参数，<span class="math inline">\(\eta\)</span> 是学习率，<spanclass="math inline">\(\nabla_{\theta}J(\theta)\)</span> 为损失函数对参数<span class="math inline">\(\theta\)</span> 的导数。BGD对于大数据集来说执行了很多冗余的计算，因为在每一次参数更新前都要计算很多相似样本的梯度。SGD通过一次执行一次更新解决了这种冗余。因此通常 SGD的速度会非常快而且可以被用于在线学习。SGD以高方差的特点进行连续参数更新，导致目标函数严重震荡。</p><figure><img src="https://paddlepedia.readthedocs.io/en/latest/_images/sgd.png"alt="sgd震荡" /><figcaption aria-hidden="true">sgd震荡</figcaption></figure><p>BGD 能够收敛到（局部）最优点，然而 SGD的震荡特点导致其可以跳到新的潜在的可能更好的局部最优点。已经有研究显示当我们慢慢的降低学习率时，SGD拥有和 BGD一样的收敛性能，对于非凸和凸曲面几乎同样能够达到局部或者全局最优点。</p><p><strong>Mini-batch 梯度下降</strong></p><p>Mini-batch gradient descent（ mini-batch gradient descent, MBGD）则是在上面两种方法中采取了一个折中的办法：每次从训练集中取出<spanclass="math inline">\(batchsize\)</span>个样本作为一个mini-batch，以此来进行一次参数更新。</p><p><span class="math display">\[\theta=\theta -\eta \cdot \nabla_{\theta}J(\theta;x^{(i:i+n);y^{(i:i+n)}})\]</span> 其中 <span class="math inline">\(\theta\)</span>是模型的参数，<span class="math inline">\(\eta\)</span> 是学习率，<spanclass="math inline">\(\nabla_{\theta}J(\theta;x^{(i:i+n);y^{(i:i+n)}}\)</span> 为损失函数对参数 <spanclass="math inline">\(\theta\)</span> 的导数，n 为Mini-bach的大小（batch size）。 batch size越大，批次越少，训练时间会更快一点，但可能造成数据的很大浪费；而 batchsize越小，对数据的利用越充分，浪费的数据量越少，但批次会很大，训练会更耗时。</p><p><strong>优点</strong></p><ul><li>减小参数更新的方差，这样可以有更稳定的收敛。</li><li>利用现在最先进的深度学习库对矩阵运算进行了高度优化的特点，这样可以使得计算mini-batch 的梯度更高效。</li></ul><p>样本数目较大的话，一般的 mini-batch 大小为 64 到512，考虑到电脑内存设置和使用的方式，如果mini-batch 大小是 <spanclass="math inline">\(2^n\)</span>，代码会运行地快一些。</p><p>MBGD 是训练神经网络时的常用方法，而且通常即使实际上使用的是MBGD，也会使用 SGD 这个词来代替。</p><h3 id="back-propagation"><strong>Back Propagation</strong></h3><p>误差反向传播算法，给出了一种计算偏导数的方法。</p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/BP.jpg" style="zoom:25%;" /></p><h2 id="cross-entropy">cross entropy</h2><p>在物理学中，“熵”被用来表示热力学系统所呈现的无序程度。香农将这一概念引入信息论领域，提出了“信息熵”概念，通过对数函数来测量信息的不确定性。</p><p>交叉熵（crossentropy）是信息论中的重要概念，主要用来度量两个概率分布间的差异。假定<span class="math inline">\(p\)</span> 和 <spanclass="math inline">\(q\)</span> 是数据 <spanclass="math inline">\(x\)</span> 的两个概率分布，通过 <spanclass="math inline">\(q\)</span> 来表示 <spanclass="math inline">\(p\)</span> 的交叉熵可如下计算：</p><p><span class="math display">\[H\left( p,q \right) =-\sum_x{p\left( x \right) \log q\left( x \right)}\]</span></p><p>交叉熵刻画了两个概率分布之间的距离，旨在描绘通过概率分布 <spanclass="math inline">\(q\)</span> 来表达概率分布 <spanclass="math inline">\(p\)</span>的困难程度。根据公式不难理解，交叉熵越小，两个概率分布 <spanclass="math inline">\(p\)</span> 和 <spanclass="math inline">\(q\)</span> 越接近。</p><p>这里仍然以三类分类问题为例，假设数据 <spanclass="math inline">\(x\)</span> 属于类别 <spanclass="math inline">\(1\)</span>。记数据 <spanclass="math inline">\(x\)</span> 的类别分布概率为 <spanclass="math inline">\(y\)</span>，显然 <spanclass="math inline">\(y=(1,0,0)\)</span> 代表数据 <spanclass="math inline">\(x\)</span> 的实际类别分布概率。记 $ $代表模型预测所得类别分布概率。</p><p>那么对于数据 <span class="math inline">\(x\)</span>而言，其实际类别分布概率 <span class="math inline">\(y\)</span>和模型预测类别分布概率 <span class="math inline">\(\hat{y}\)</span>的交叉熵损失函数定义为：</p><p><span class="math display">\[cross\ entropy=-y\times \log \left( \hat{y} \right)\]</span></p><p>很显然，一个良好的神经网络要尽量保证对于每一个输入数据，神经网络所预测类别分布概率与实际类别分布概率之间的差距越小越好，即交叉熵越小越好。于是，可将交叉熵作为损失函数来训练神经网络。</p><p><img src="https://paddlepedia.readthedocs.io/en/latest/_images/CrossEntropy.png" style="zoom:53%;" /></p><p>上图给出了一个三个类别分类的例子。由于输入数据 <spanclass="math inline">\(x\)</span> 属于类别 <spanclass="math inline">\(1\)</span>，因此其实际类别概率分布值为 <spanclass="math inline">\(y=(y_1,y_2,y_3)=(1,0,0)\)</span>。经过神经网络的变换，得到了输入数据<span class="math inline">\(x\)</span> 相对于三个类别的预测中间值 <spanclass="math inline">\((z1,z2,z3)\)</span>。然后，经过 <spanclass="math inline">\(Softmax\)</span>函数映射，得到神经网络所预测的输入数据 <spanclass="math inline">\(x\)</span> 的类别分布概率 <spanclass="math inline">\(\hat{y}=\left( \hat{y}_1,\hat{y}_2,\hat{y}_3\right)\)</span>。根据前面的介绍，<spanclass="math inline">\(\hat{y}_1\)</span>、<spanclass="math inline">\(\hat{y}_2\)</span> 和 <spanclass="math inline">\(\hat{y}_3\)</span> 为 <spanclass="math inline">\((0,1)\)</span> 范围之间的一个概率值。由于样本<span class="math inline">\(x\)</span>属于第一个类别，因此希望神经网络所预测得到的 <spanclass="math inline">\(\hat{y}_1\)</span>取值要远远大于 <spanclass="math inline">\(\hat{y}_2\)</span> 和 <spanclass="math inline">\(\hat{y}_3\)</span>的取值。为了得到这样的神经网络，在训练中可利用如下交叉熵损失函数来对模型参数进行优化：<span class="math display">\[cross\ entropy=-\left( y_1\times \log \left( \hat{y}_1 \right)+y_2\times \log \left( \hat{y}_2 \right) +y_3\times \log \left(\hat{y}_3 \right) \right)\]</span></p><p>在上式中，<span class="math inline">\(y_2\)</span> 和 <spanclass="math inline">\(y_3\)</span> 均为 <spanclass="math inline">\(0\)</span>、<spanclass="math inline">\(y_1\)</span> 为 <spanclass="math inline">\(1\)</span>，因此交叉熵损失函数简化为： <spanclass="math display">\[-y_1\times \log \left( \hat{y}_1 \right) =-\log \left( \hat{y}_1 \right)\]</span></p><p>在神经网络训练中，要将输入数据实际的类别概率分布与模型预测的类别概率分布之间的误差（即损失）从输出端向输入端传递，以便来优化模型参数。下面简单介绍根据交叉熵计算得到的误差从<span class="math inline">\(\hat{y}_1\)</span> 传递给 <spanclass="math inline">\(z_1\)</span> 和 <spanclass="math inline">\(z_2\)</span>（<spanclass="math inline">\(z_3\)</span> 的推导与 <spanclass="math inline">\(z_2\)</span> 相同）的情况。</p><p><span class="math display">\[\frac{\partial \hat{y}_1}{\partial z_1}=\frac{\partial \left(\frac{e^{z_1}}{\sum_k{e^{z_k}}} \right)}{\partial z_1}=\frac{\left(e^{z_1} \right) ^{&#39;}\times \sum_k{e^{z_k}-e^{z_1}\timese^{z_1}}}{\left( \sum_k{e^{z_k}} \right)^2}=\frac{e^{z_1}}{\sum_k{e^{z_k}}}-\frac{e^{z_1}}{\sum_k{e^{z_k}}}\times\frac{e^{z_1}}{\sum_k{e^{z_k}}}=\hat{y}_1\left( 1-\hat{y}_1 \right)\]</span></p><p>由于交叉熵损失函数 <span class="math inline">\(-\log \left( \hat{y}_1\right)\)</span> 对 <span class="math inline">\(\hat{y}_1\)</span>求导的结果为 <spanclass="math inline">\(-\frac{1}{\hat{y}_1}\)</span>，<spanclass="math inline">\(\hat{y}_1\left( 1-\hat{y}_1 \right)\)</span> 与<span class="math inline">\(-\frac{1}{\hat{y}_1}\)</span> 相乘为 <spanclass="math inline">\(\hat{y}_1-1\)</span>。这说明一旦得到模型预测输出<spanclass="math inline">\(\hat{y}_1\)</span>，将该输出减去1就是交叉损失函数相对于<span class="math inline">\(z_1\)</span> 的偏导结果。</p><p><span class="math display">\[\frac{\partial \hat{y}_1}{\partial z_2}=\frac{\partial \left(\frac{e^{z_1}}{\sum_k{e^{z_k}}} \right)}{\partial z_2}=\frac{0\times\sum_k{e^{z_k}-e^{z_1}\times e^{z_2}}}{\left( \sum_k{e^{z_k}} \right)^2}=-\frac{e^{z_1}}{\sum_k{e^{z_k}}}\times\frac{e^{z_2}}{\sum_k{e^{z_k}}}=-\hat{y}_1\hat{y}_2\]</span></p><p>同理，交叉熵损失函数导数为 <spanclass="math inline">\(-\frac{1}{\hat{y}_1}\)</span>，<spanclass="math inline">\(-\hat{y}_1\hat{y}_2\)</span> 与 <spanclass="math inline">\(-\frac{1}{\hat{y}_1}\)</span> 相乘结果为 <spanclass="math inline">\(\hat{y}_2\)</span>。这意味对于除第一个输出节点以外的节点进行偏导，在得到模型预测输出后，只要将其保存，就是交叉损失函数相对于其他节点的偏导结果。在<span class="math inline">\(z_1\)</span>、<spanclass="math inline">\(z_2\)</span> 和 <spanclass="math inline">\(z_3\)</span>得到偏导结果后，再通过链式法则将损失误差继续往输入端传递即可。</p><p>在上面的例子中，假设所预测中间值 <spanclass="math inline">\((z_1,z_2,z_3)\)</span> 经过 <spanclass="math inline">\(Softmax\)</span> 映射后所得结果为 <spanclass="math inline">\((0.34,0.46,0.20)\)</span>。由于已知输入数据 <spanclass="math inline">\(x\)</span>属于第一类，显然这个输出不理想而需要对模型参数进行优化。如果选择交叉熵损失函数来优化模型，则<span class="math inline">\((z_1,z_2,z_3)\)</span> 这一层的偏导值为<span class="math inline">\((0.34-1,0.46,0.20)=(-0.66,0.46,0.20)\)</span>。</p><p>可以看出，<span class="math inline">\(Softmax\)</span>和交叉熵损失函数相互结合，为偏导计算带来了极大便利。偏导计算使得损失误差从输出端向输入端传递，来对模型参数进行优化。在这里，交叉熵与<spanclass="math inline">\(Softmax\)</span> 函数结合在一起，因此也叫 <spanclass="math inline">\(Softmax\)</span> 损失（Softmax with cross-entropyloss）。</p><p><strong>softmax</strong>把分类输出标准化成概率分布，<strong>cross-entropy</strong>刻画预测分类和真实结果概率分布之间的相似度。</p><h1 id="训练优化">训练优化</h1><p>神经网络遇到的两大问题：梯度消失 + 过拟合</p><h2 id="梯度消失">梯度消失</h2><p>神经网络并非层数越深越好，层数越深，越越靠近输入处的神经元的梯度越小</p><p>比如用 sigmoid，<span class="math inline">\(\delta_h=o_h(1-o_h)\le\frac{1}{4}\)</span>，越乘梯度越小</p><p>解决思路：</p><ol type="1"><li><p>使用 ReLU 激活函数，ReLU 的导数为 1</p></li><li><p>优化网络结构</p></li></ol><blockquote><p>GoogLeNet：</p><p>配合 inception模块采用辅助输出，中途分支的输出对应更浅层的神经网络，训练时用三个输出共同计算Loss，辅助输出更靠近输入，可以缓解梯度消失问题</p><p>ResNet：</p><p>设输入为 <spanclass="math inline">\(\boldsymbol{x}\)</span>，假设我们希望学出的理想映射为<spanclass="math inline">\(f(\boldsymbol{x})\)</span>，从而作为激活函数的输入。左图虚线框中的部分需要直接拟合出该映射<spanclass="math inline">\(f(\boldsymbol{x})\)</span>，而右图虚线框中的部分则需要拟合出有关恒等映射的残差映射<spanclass="math inline">\(f(\boldsymbol{x})-\boldsymbol{x}\)</span>。残差映射在实际中往往更容易优化。实际中，当理想映射<span class="math inline">\(f(\boldsymbol{x})\)</span>极接近于恒等映射时，残差映射也易于捕捉恒等映射的细微波动。右图也是ResNet的基础块，即残差块（residualblock）。在残差块中，输入可通过跨层的数据线路更快地向前传播。</p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/res.svg" style="zoom:100%;" /></p></blockquote><h1 id="神经网络语言模型">神经网络语言模型</h1><h2 id="词向量">词向量</h2><p>词向量又称为词嵌入（wordembedding），是一种将单词表示为向量的方法。</p><p>嵌入：满足一定性质的一种变换。</p><h3 id="one-hot-编码">one-hot 编码</h3><ul><li>用与词表等长的向量表示一个词</li><li>向量只有一个元素为 1，其余为 0</li><li>第 i 个元素为 1 的向量用于表示词表中的第 i 个词</li></ul><p><strong>优点</strong></p><ol type="1"><li>编码简单</li></ol><p><strong>缺点</strong></p><ol type="1"><li>编码太长</li><li>无法度量词之间的相似性</li></ol><h3 id="分布式表示">分布式表示</h3><ul><li>一种压缩表示方法，将词映射到一个较短的向量，用向量的所有位联合表示一个词。</li><li>可根据需要指定向量的大小。</li><li>一般语义相近的词在空间中分布相近。</li></ul><h2 id="nnlm-模型">NNLM 模型</h2><p>neural network language model，这一块描述的我真的很不理解，私以为和Viterbi algorithm那章一样，希望通过神经网络来学习语句内词语的联系，也即前 n-1个词确定时，第 n 个词的分布概率。</p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/NNLM2.jpg" style="zoom:30%;" /></p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/NNLM.jpg" style="zoom:30%;" /></p><p>结合这两张图，还是蛮好理解的。</p><h3 id="如何训练">如何训练</h3><ol type="1"><li>通过让联合概率最大化估计概率的方法称作最大似然估计</li></ol><blockquote><p>联合概率分布一般含有参数，通过最大似然方法估计该联合概率的参数，对于神经网络语言模型就是估计网络的参数值</p></blockquote><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/MLP.jpg" style="zoom:40%;" /></p><h3 id="存在的问题">存在的问题</h3><ol type="1"><li>softmax 计算复杂度高</li><li>输出层神经元个数多，等于词表长度 k</li><li>全连接层参数较多</li></ol><h2 id="word2vec-模型">word2vec 模型</h2><p>经过简化的 NNLM 模型，连续词袋模型（CBOW）or 跳词模型（Skip-GramModel）</p><h3 id="cbow-模型">CBOW 模型</h3><p>对于第 t 个词 <span class="math inline">\(w_t\)</span>，考虑其前后各n 个词，我们假定语义信息是连续的，根据前后 n 个词能够推测出 <spanclass="math inline">\(w_t\)</span> 的语义信息。</p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/huffman.jpg" style="zoom:40%;" /></p><p>也即在此图中，直接将词向量相加得到 <spanclass="math inline">\(x_w\)</span>，当然，这里可以用同一套参数作用在词上，可以看成是一次卷积。</p><p>接下来，把得到的 tensor <span class="math inline">\(w_t\)</span>作为一棵霍夫曼树的输入，开始从霍夫曼树的顶部开始往叶节点走。</p><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/huffman2.jpg" style="zoom:35%;" /></p><p>注意，<span class="math inline">\(w_t\)</span>对应的词所在的位置实际上是确定的（在建树时就由词频决定了），故而 <spanclass="math inline">\(w_t\)</span> 到达 <spanclass="math inline">\(w_2\)</span>的路径是固定的。沿着这条路径，规定子节点在父节点的右侧则取 <spanclass="math inline">\(\sigma\)</span> ，反之则取 <spanclass="math inline">\(1-\sigma\)</span>。</p><ul><li>词 <span class="math inline">\(\mathrm{w}\)</span>的最大似然函数:</li></ul><p><span class="math display">\[\prod_{i=2}^{l_{w}} p\left(d_{i}^{w} \mid x_{w},\theta_{i-1}^{w}\right)=\prod_{i=2}^{l_{w}}\left[\sigma\left(x_{w} \cdot\theta_{i-1}^{w}\right)\right]^{1-d_{i}^{w}}\left[1-\sigma\left(x_{w}\cdot \theta_{i-1}^{w}\right)\right]^{d_{i}^{w}}\]</span></p><ul><li>定义损失函数（负对数似然函数）:</li></ul><p><span class="math display">\[\begin{aligned}\mathrm{L} &amp;=-\log \prod_{i=2}^{l_{w}} p\left(d_{i}^{w} \mid x_{w},\theta_{i-1}^{w}\right) \\&amp;=-\sum_{i=2}^{l_{w}}\left\{\left(1-d_{i}^{w}\right) \log\left[\sigma\left(x_{w} \cdot \theta_{i-1}^{w}\right)\right]+d_{i}^{w}\log \left[1-\sigma\left(x_{w} \cdot\theta_{i-1}^{w}\right)\right]\right\}\end{aligned}\]</span></p><p>再以此为基础，BP 更新参数。</p><p><strong>优点</strong></p><ol type="1"><li>每次只更新路径上的参数，也即每次只更新与该词有关的参数</li><li>越是常用的词距离根节点越近，参数越少</li></ol><h1 id="词向量应用模型">词向量应用模型</h1><h2 id="textcnn">TextCNN</h2><p><img src="https://zhaochenyang20.github.io/pic/lecture/2022_spring/deep_learning/textCNN.jpg" style="zoom:50%;" /></p><h2 id="rnn">RNN</h2><p>Recurrent Neural Network</p><p><span class="math inline">\(n\)</span> 元语法中，时间步 <spanclass="math inline">\(t\)</span> 的词 <spanclass="math inline">\(w_t\)</span>基于前面所有词的条件概率只考虑了最近时间步的 <spanclass="math inline">\(n-1\)</span> 个词。如果要考虑比 <spanclass="math inline">\(t-(n-1)\)</span> 更早时间步的词对 <spanclass="math inline">\(w_t\)</span> 的可能影响，我们需要增大 <spanclass="math inline">\(n\)</span>。但这样模型参数的数量将随之呈指数级增长。</p><p>而 RNN并非刚性地记忆所有固定长度的序列，而是通过隐藏状态来存储之前时间步的信息。</p><p>我们考虑输入数据存在时间相关性的情况。假设 <spanclass="math inline">\(\boldsymbol{X}_t \in \mathbb{R}^{n \timesd}\)</span> 是序列中时间步 <span class="math inline">\(t\)</span>的小批量输入，<span class="math inline">\(\boldsymbol{H}_t \in\mathbb{R}^{n \times h}\)</span>是该时间步的隐藏变量。与多层感知机不同的是，这里我们保存上一时间步的隐藏变量<spanclass="math inline">\(\boldsymbol{H}_{t-1}\)</span>，并引入一个新的权重参数<span class="math inline">\(\boldsymbol{W}_{hh} \in \mathbb{R}^{h \timesh}\)</span>，该参数用来描述在当前时间步如何使用上一时间步的隐藏变量。具体来说，时间步<span class="math inline">\(t\)</span>的隐藏变量的计算由当前时间步的输入和上一时间步的隐藏变量共同决定：</p><p><span class="math display">\[\boldsymbol{H}_t = \phi(\boldsymbol{X}_t \boldsymbol{W}_{xh} +\boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}  + \boldsymbol{b}_h).\]</span> 与多层感知机相比，我们在这里添加了 <spanclass="math inline">\(\boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}\)</span>一项。由上式中相邻时间步的隐藏变量 <spanclass="math inline">\(\boldsymbol{H}_t\)</span>和<spanclass="math inline">\(\boldsymbol{H}_{t-1}\)</span>之间的关系可知，这里的隐藏变量能够捕捉截至当前时间步的序列的历史信息，就像是神经网络当前时间步的状态或记忆一样。因此，该隐藏变量也称为隐藏状态。由于隐藏状态在当前时间步的定义使用了上一时间步的隐藏状态，上式的计算是循环的。使用循环计算的网络即循环神经网络（recurrentneural network）。</p><p>循环神经网络有很多种不同的构造方法。含上式所定义的隐藏状态的循环神经网络是极为常见的一种。在时间步<spanclass="math inline">\(t\)</span>，输出层的输出和多层感知机中的计算类似：</p><p><span class="math display">\[\boldsymbol{O}_t = \boldsymbol{H}_t \boldsymbol{W}_{hq} +\boldsymbol{b}_q.\]</span> 循环神经网络的参数包括隐藏层的权重 <spanclass="math inline">\(\boldsymbol{W}_{xh} \in \mathbb{R}^{d \timesh}\)</span>、<span class="math inline">\(\boldsymbol{W}_{hh} \in\mathbb{R}^{h \times h}\)</span> 和偏差 <spanclass="math inline">\(\boldsymbol{b}_h \in \mathbb{R}^{1 \timesh}\)</span>，以及输出层的权重 <spanclass="math inline">\(\boldsymbol{W}_{hq} \in \mathbb{R}^{h \timesq}\)</span> 和偏差 <span class="math inline">\(\boldsymbol{b}_q \in\mathbb{R}^{1 \timesq}\)</span>。值得一提的是，即便在不同时间步，循环神经网络也始终使用这些模型参数。因此，循环神经网络模型参数的数量不随时间步的增加而增长。</p><p><imgsrc="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.2_rnn.svg" /></p><h3 id="gru">GRU</h3><p>当时间步数较大或者时间步较小时，循环神经网络的梯度较容易出现衰减或爆炸。虽然裁剪梯度可以应对梯度爆炸，但无法解决梯度衰减的问题。通常由于这个原因，循环神经网络在实际中较难捕捉时间序列中时间步距离较大的依赖关系。</p><p>门控循环神经网络（gated recurrent neuralnetwork）的提出，正是为了更好地捕捉时间序列中时间步距离较大的依赖关系。它通过可以学习的门来控制信息的流动。其中，门控循环单元（gatedrecurrent unit，GRU）是一种常用的门控循环神经网络，它引入了重置门（resetgate）和更新门（updategate）的概念，从而修改了循环神经网络中隐藏状态的计算方式。</p><p>门控循环单元中的重置门和更新门的输入均为当前时间步输入 <spanclass="math inline">\(\boldsymbol{X}_t\)</span> 与上一时间步隐藏状态<spanclass="math inline">\(\boldsymbol{H}_{t-1}\)</span>，输出由激活函数为sigmoid 函数的全连接层计算得到。</p><p><imgsrc="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.7_gru_1.svg" /></p><p>具体来说，假设隐藏单元个数为 <spanclass="math inline">\(h\)</span>，给定时间步 <spanclass="math inline">\(t\)</span> 的小批量输入 <spanclass="math inline">\(\boldsymbol{X}_t \in \mathbb{R}^{n \timesd}\)</span>（样本数为 <span class="math inline">\(n\)</span>，输入个数为<span class="math inline">\(d\)</span>）和上一时间步隐藏状态 <spanclass="math inline">\(\boldsymbol{H}_{t-1} \in \mathbb{R}^{n \timesh}\)</span>。重置门 <span class="math inline">\(\boldsymbol{R}_t \in\mathbb{R}^{n \times h}\)</span> 和更新门 <spanclass="math inline">\(\boldsymbol{Z}_t \in \mathbb{R}^{n \timesh}\)</span> 的计算如下：</p><p><span class="math display">\[\begin{aligned}\boldsymbol{R}_t = \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xr} +\boldsymbol{H}_{t-1} \boldsymbol{W}_{hr} + \boldsymbol{b}_r),\\\boldsymbol{Z}_t = \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xz} +\boldsymbol{H}_{t-1} \boldsymbol{W}_{hz} + \boldsymbol{b}_z),\end{aligned}\]</span></p><p>其中 <span class="math inline">\(\boldsymbol{W}_{xr},\boldsymbol{W}_{xz} \in \mathbb{R}^{d \times h}\)</span> 和 <spanclass="math inline">\(\boldsymbol{W}_{hr}, \boldsymbol{W}_{hz} \in\mathbb{R}^{h \times h}\)</span> 是权重参数， <spanclass="math inline">\(\boldsymbol{b}_r, \boldsymbol{b}_z \in\mathbb{R}^{1 \times h}\)</span> 是偏差参数。多层感知机中介绍过，sigmoid函数可以将元素的值变换到 0 和 1 之间。因此，重置门 <spanclass="math inline">\(\boldsymbol{R}_t\)</span> 和更新门 <spanclass="math inline">\(\boldsymbol{Z}_t\)</span> 中每个元素的值域都是<span class="math inline">\([0, 1]\)</span>。</p><p>接下来，门控循环单元将计算候选隐藏状态来辅助稍后的隐藏状态计算。我们将当前时间步重置门的输出与上一时间步隐藏状态做按元素乘法（符号为<span class="math inline">\(\odot\)</span>）。如果重置门中元素值接近0，那么意味着重置对应隐藏状态元素为0，即丢弃上一时间步的隐藏状态。如果元素值接近1，那么表示保留上一时间步的隐藏状态。然后，将按元素乘法的结果与当前时间步的输入连结，再通过含激活函数tanh的全连接层计算出候选隐藏状态，其所有元素的值域为 <spanclass="math inline">\([-1, 1]\)</span>。</p><p><imgsrc="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.7_gru_2.svg" /></p><p>具体来说，时间步 <span class="math inline">\(t\)</span>的候选隐藏状态 <span class="math inline">\(\tilde{\boldsymbol{H}}_t \in\mathbb{R}^{n \times h}\)</span> 的计算为</p><p><span class="math display">\[\tilde{\boldsymbol{H}}_t = \text{tanh}(\boldsymbol{X}_t\boldsymbol{W}_{xh} + \left(\boldsymbol{R}_t \odot\boldsymbol{H}_{t-1}\right) \boldsymbol{W}_{hh} + \boldsymbol{b}_h),\]</span> 其中 <span class="math inline">\(\boldsymbol{W}_{xh} \in\mathbb{R}^{d \times h}\)</span> 和 <spanclass="math inline">\(\boldsymbol{W}_{hh} \in \mathbb{R}^{h \timesh}\)</span> 是权重参数，<span class="math inline">\(\boldsymbol{b}_h \in\mathbb{R}^{1 \times h}\)</span>是偏差参数。从上面这个公式可以看出，重置门控制了上一时间步的隐藏状态如何流入当前时间步的候选隐藏状态。而上一时间步的隐藏状态可能包含了时间序列截至上一时间步的全部历史信息。因此，重置门可以用来丢弃与预测无关的历史信息。</p><p>最后，时间步 <span class="math inline">\(t\)</span> 的隐藏状态 <spanclass="math inline">\(\boldsymbol{H}_t \in \mathbb{R}^{n \timesh}\)</span> 的计算使用当前时间步的更新门 <spanclass="math inline">\(\boldsymbol{Z}_t\)</span> 来对上一时间步的隐藏状态<span class="math inline">\(\boldsymbol{H}_{t-1}\)</span>和当前时间步的候选隐藏状态 <spanclass="math inline">\(\tilde{\boldsymbol{H}}_t\)</span> 做组合：</p><p><span class="math display">\[\boldsymbol{H}_t = \boldsymbol{Z}_t \odot \boldsymbol{H}_{t-1}  + (1 -\boldsymbol{Z}_t) \odot \tilde{\boldsymbol{H}}_t.\]</span></p><div data-align="center"><p><img width="500" src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.7_gru_3.svg"/></p></div><div data-align="center">门控循环单元中隐藏状态的计算</div><p>值得注意的是，更新门可以控制隐藏状态应该如何被包含当前时间步信息的候选隐藏状态所更新。假设更新门在时间步<span class="math inline">\(t&#39;\)</span> 到 <spanclass="math inline">\(t\)</span>（<span class="math inline">\(t&#39;&lt; t\)</span>）之间一直近似 1。那么，在时间步 <spanclass="math inline">\(t&#39;\)</span> 到 <spanclass="math inline">\(t\)</span> 之间的输入信息几乎没有流入时间步 <spanclass="math inline">\(t\)</span> 的隐藏状态 <spanclass="math inline">\(\boldsymbol{H}_t\)</span>。实际上，这可以看作是较早时刻的隐藏状态<span class="math inline">\(\boldsymbol{H}_{t&#39;-1}\)</span>一直通过时间保存并传递至当前时间步 <spanclass="math inline">\(t\)</span>。这个设计可以应对循环神经网络中的梯度衰减问题，并更好地捕捉时间序列中时间步距离较大的依赖关系。</p><p>我们对门控循环单元的设计稍作总结：</p><ul><li>重置门有助于捕捉时间序列里短期的依赖关系；</li><li>更新门有助于捕捉时间序列里长期的依赖关系。</li></ul><h3 id="lstm">LSTM</h3><p>long short-term memory，LSTM，比门控循环单元的结构复杂。</p><p>LSTM 中引入了3个门，即输入门（input gate）、遗忘门（forgetgate）和输出门（outputgate），以及与隐藏状态形状相同的记忆细胞（某些文献把记忆细胞当成一种特殊的隐藏状态），从而记录额外的信息。</p><p>与门控循环单元中的重置门和更新门一样，如图所示，长短期记忆的门的输入均为当前时间步输入<span class="math inline">\(\boldsymbol{X}_t\)</span>与上一时间步隐藏状态 <spanclass="math inline">\(\boldsymbol{H}_{t-1}\)</span>，输出由激活函数为sigmoid 函数的全连接层计算得到。如此一来，这 3 个门元素的值域均为 <spanclass="math inline">\([0,1]\)</span>。</p><div data-align="center"><p><img width="500" src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.8_lstm_0.svg"/></p></div><div data-align="center">长短期记忆中输入门、遗忘门和输出门的计算</div><p>具体来说，假设隐藏单元个数为 <spanclass="math inline">\(h\)</span>，给定时间步 <spanclass="math inline">\(t\)</span> 的小批量输入 <spanclass="math inline">\(\boldsymbol{X}_t \in \mathbb{R}^{n \timesd}\)</span>（样本数为 <span class="math inline">\(n\)</span>，输入个数为<span class="math inline">\(d\)</span>）和上一时间步隐藏状态 <spanclass="math inline">\(\boldsymbol{H}_{t-1} \in \mathbb{R}^{n \timesh}\)</span>。 时间步 <span class="math inline">\(t\)</span> 的输入门<span class="math inline">\(\boldsymbol{I}_t \in \mathbb{R}^{n \timesh}\)</span>、遗忘门 <span class="math inline">\(\boldsymbol{F}_t \in\mathbb{R}^{n \times h}\)</span> 和输出门 <spanclass="math inline">\(\boldsymbol{O}_t \in \mathbb{R}^{n \timesh}\)</span> 分别计算如下：</p><p><span class="math display">\[\begin{aligned}\boldsymbol{I}_t &amp;= \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xi} +\boldsymbol{H}_{t-1} \boldsymbol{W}_{hi} + \boldsymbol{b}_i),\\\boldsymbol{F}_t &amp;= \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xf} +\boldsymbol{H}_{t-1} \boldsymbol{W}_{hf} + \boldsymbol{b}_f),\\\boldsymbol{O}_t &amp;= \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xo} +\boldsymbol{H}_{t-1} \boldsymbol{W}_{ho} + \boldsymbol{b}_o),\end{aligned}\]</span></p><p>其中的 <span class="math inline">\(\boldsymbol{W}_{xi},\boldsymbol{W}_{xf}, \boldsymbol{W}_{xo} \in \mathbb{R}^{d \timesh}\)</span> 和 <span class="math inline">\(\boldsymbol{W}_{hi},\boldsymbol{W}_{hf}, \boldsymbol{W}_{ho} \in \mathbb{R}^{h \timesh}\)</span> 是权重参数，<span class="math inline">\(\boldsymbol{b}_i,\boldsymbol{b}_f, \boldsymbol{b}_o \in \mathbb{R}^{1 \times h}\)</span>是偏差参数。</p><p>接下来，长短期记忆需要计算候选记忆细胞 <spanclass="math inline">\(\tilde{\boldsymbol{C}}_t\)</span>。它的计算与上面介绍的3 个门类似，但使用了值域在 <span class="math inline">\([-1, 1]\)</span>的 tanh 函数作为激活函数。</p><div data-align="center"><p><img width="500" src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.8_lstm_1.svg"/></p></div><div data-align="center">长短期记忆中候选记忆细胞的计算</div><p>具体来说，时间步 <span class="math inline">\(t\)</span>的候选记忆细胞 <span class="math inline">\(\tilde{\boldsymbol{C}}_t \in\mathbb{R}^{n \times h}\)</span> 的计算为</p><p><span class="math display">\[\tilde{\boldsymbol{C}}_t = \text{tanh}(\boldsymbol{X}_t\boldsymbol{W}_{xc} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hc} +\boldsymbol{b}_c),\]</span></p><p>其中 <span class="math inline">\(\boldsymbol{W}_{xc} \in\mathbb{R}^{d \times h}\)</span> 和 <spanclass="math inline">\(\boldsymbol{W}_{hc} \in \mathbb{R}^{h \timesh}\)</span> 是权重参数，<span class="math inline">\(\boldsymbol{b}_c \in\mathbb{R}^{1 \times h}\)</span> 是偏差参数。</p><p><strong>记忆细胞</strong></p><p>我们可以通过元素值域在 <span class="math inline">\([0, 1]\)</span>的输入门、遗忘门和输出门来控制隐藏状态中信息的流动，这一般也是通过使用按元素乘法（符号为<span class="math inline">\(\odot\)</span>）来实现的。当前时间步记忆细胞<span class="math inline">\(\boldsymbol{C}_t \in \mathbb{R}^{n \timesh}\)</span>的计算组合了上一时间步记忆细胞和当前时间步候选记忆细胞的信息，并通过遗忘门和输入门来控制信息的流动：</p><p><span class="math display">\[\boldsymbol{C}_t = \boldsymbol{F}_t \odot \boldsymbol{C}_{t-1} +\boldsymbol{I}_t \odot \tilde{\boldsymbol{C}}_t.\]</span></p><p>遗忘门控制上一时间步的记忆细胞 <spanclass="math inline">\(\boldsymbol{C}_{t-1}\)</span>中的信息是否传递到当前时间步，而输入门则控制当前时间步的输入 <spanclass="math inline">\(\boldsymbol{X}_t\)</span> 通过候选记忆细胞 <spanclass="math inline">\(\tilde{\boldsymbol{C}}_t\)</span>如何流入当前时间步的记忆细胞。如果遗忘门一直近似 1 且输入门一直近似0，过去的记忆细胞将一直通过时间保存并传递至当前时间步。这个设计可以应对循环神经网络中的梯度衰减问题，并更好地捕捉时间序列中时间步距离较大的依赖关系。</p><div data-align="center"><p><img width="500" src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.8_lstm_2.svg"/></p></div><div data-align="center">长短期记忆中记忆细胞的计算</div><p><strong>隐藏状态</strong></p><p>有了记忆细胞以后，接下来我们还可以通过输出门来控制从记忆细胞到隐藏状态<span class="math inline">\(\boldsymbol{H}_t \in \mathbb{R}^{n \timesh}\)</span> 的信息的流动：</p><p><span class="math display">\[\boldsymbol{H}_t = \boldsymbol{O}_t \odot \text{tanh}(\boldsymbol{C}_t).\]</span></p><p>这里的 tanh 函数确保隐藏状态元素值在 -1 到 1之间。需要注意的是，当输出门近似 1时，记忆细胞信息将传递到隐藏状态供输出层使用；当输出门近似 0时，记忆细胞信息只自己保留。下图展示了长短期记忆中隐藏状态的计算。</p><div data-align="center"><p><img width="500" src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.8_lstm_3.svg"/></p></div><div data-align="center">长短期记忆中隐藏状态的计算</div><h3 id="双向循环网络">双向循环网络</h3><p>对于单向的循环网络，序列前面的内容被后面的内容淹没。而且，单向循环网络都假设当前时间步是由前面的较早时间步的序列决定的，因此它们都将信息通过隐藏状态从前往后传递。有时候，当前时间步也可能由后面时间步决定。例如，当我们写下一个句子时，可能会根据句子后面的词来修改句子前面的用词。双向循环神经网络通过增加从后往前传递信息的隐藏层来更灵活地处理这类信息。</p><div data-align="center"><p><img width="300" src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.10_birnn.svg"/></p></div><div data-align="center">双向循环神经网络的架构</div><p>下面我们来介绍具体的定义。</p><p>给定时间步 <span class="math inline">\(t\)</span> 的小批量输入 <spanclass="math inline">\(\boldsymbol{X}_t \in \mathbb{R}^{n \timesd}\)</span>（样本数为 <span class="math inline">\(n\)</span>，输入个数为<span class="math inline">\(d\)</span>）和隐藏层激活函数为 <spanclass="math inline">\(\phi\)</span>。在双向循环神经网络的架构中，设该时间步正向隐藏状态为<span class="math inline">\(\overrightarrow{\boldsymbol{H}}_t \in\mathbb{R}^{n \times h}\)</span>（正向隐藏单元个数为 <spanclass="math inline">\(h\)</span>），反向隐藏状态为 <spanclass="math inline">\(\overleftarrow{\boldsymbol{H}}_t \in \mathbb{R}^{n\times h}\)</span>（反向隐藏单元个数为 <spanclass="math inline">\(h\)</span>）。我们可以分别计算正向隐藏状态和反向隐藏状态：<span class="math display">\[\begin{aligned}\overrightarrow{\boldsymbol{H}}_t &amp;= \phi(\boldsymbol{X}_t\boldsymbol{W}_{xh}^{(f)} + \overrightarrow{\boldsymbol{H}}_{t-1}\boldsymbol{W}_{hh}^{(f)}  + \boldsymbol{b}_h^{(f)}),\\\overleftarrow{\boldsymbol{H}}_t &amp;= \phi(\boldsymbol{X}_t\boldsymbol{W}_{xh}^{(b)} + \overleftarrow{\boldsymbol{H}}_{t+1}\boldsymbol{W}_{hh}^{(b)}  + \boldsymbol{b}_h^{(b)}),\end{aligned}\]</span></p><p>其中权重 <span class="math inline">\(\boldsymbol{W}_{xh}^{(f)} \in\mathbb{R}^{d \times h}\)</span>、<spanclass="math inline">\(\boldsymbol{W}_{hh}^{(f)} \in \mathbb{R}^{h \timesh}\)</span>、<span class="math inline">\(\boldsymbol{W}_{xh}^{(b)} \in\mathbb{R}^{d \times h}\)</span>、<spanclass="math inline">\(\boldsymbol{W}_{hh}^{(b)} \in \mathbb{R}^{h \timesh}\)</span> 和偏差 <span class="math inline">\(\boldsymbol{b}_h^{(f)}\in \mathbb{R}^{1 \times h}\)</span>、<spanclass="math inline">\(\boldsymbol{b}_h^{(b)} \in \mathbb{R}^{1 \timesh}\)</span> 均为模型参数。</p><p>然后我们连结两个方向的隐藏状态 <spanclass="math inline">\(\overrightarrow{\boldsymbol{H}}_t\)</span> 和<span class="math inline">\(\overleftarrow{\boldsymbol{H}}_t\)</span>来得到隐藏状态 <span class="math inline">\(\boldsymbol{H}_t \in\mathbb{R}^{n \times 2h}\)</span>，并将其输入到输出层。输出层计算输出<span class="math inline">\(\boldsymbol{O}_t \in \mathbb{R}^{n \timesq}\)</span>（输出个数为 <span class="math inline">\(q\)</span>）：</p><p><span class="math display">\[\boldsymbol{O}_t = \boldsymbol{H}_t \boldsymbol{W}_{hq} +\boldsymbol{b}_q,\]</span> 其中权重 <span class="math inline">\(\boldsymbol{W}_{hq} \in\mathbb{R}^{2h \times q}\)</span> 和偏差 <spanclass="math inline">\(\boldsymbol{b}_q \in \mathbb{R}^{1 \timesq}\)</span> 为输出层的模型参数。不同方向上的隐藏单元个数也可以不同。</p>]]></content>
    
    
    <summary type="html">为班上同学开源的人智导笔记...</summary>
    
    
    
    <category term="课程" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    <category term="深度学习" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="2022春季" scheme="http://example.com/tags/2022%E6%98%A5%E5%AD%A3/"/>
    
    <category term="科研" scheme="http://example.com/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>中国顶尖大学新生比康奈尔新生优秀，但4年后被康奈尔毕业生超越</title>
    <link href="http://example.com/2022/05/07/%E9%9A%8F%E7%AC%94/%E5%8D%9A%E6%96%87/%E7%BE%8E%E5%9B%BD%E9%A1%B6%E5%B0%96%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%BA%90%E8%B7%9F%E6%B8%85%E5%8C%97%E5%A4%8D%E4%BA%A4%E6%AF%94%E6%80%8E%E4%B9%88%E6%A0%B7/"/>
    <id>http://example.com/2022/05/07/%E9%9A%8F%E7%AC%94/%E5%8D%9A%E6%96%87/%E7%BE%8E%E5%9B%BD%E9%A1%B6%E5%B0%96%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%BA%90%E8%B7%9F%E6%B8%85%E5%8C%97%E5%A4%8D%E4%BA%A4%E6%AF%94%E6%80%8E%E4%B9%88%E6%A0%B7/</id>
    <published>2022-05-07T14:17:15.505Z</published>
    <updated>2022-08-26T15:59:02.104Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1id="中国顶尖大学新生比康奈尔新生优秀但4年后被康奈尔毕业生超越">中国顶尖大学新生比康奈尔新生优秀，但4年后被康奈尔毕业生超越</h1><p>“中国顶尖大学新生比康奈尔新生优秀，但4年后被康奈尔毕业生超越。”这句话出自深耕中国高等教育十多年的美国教授约翰·霍普克罗夫特。先介绍一下这位美国教授：<img src="https://pic1.zhimg.com/50/v2-0e5ba3ad64dc2fc9d040428d40fc4e6d_720w.jpg?source=1940ef5c" data-size="small" data-rawwidth="795" data-rawheight="484" data-default-watermark-src="https://pic3.zhimg.com/50/v2-1addd9e7ccf29def339c821f01d6663c_720w.jpg?source=1940ef5c" class="origin_image zh-lightbox-thumb" width="795" data-original="https://pic1.zhimg.com/v2-0e5ba3ad64dc2fc9d040428d40fc4e6d_r.jpg?source=1940ef5c"/></p><p>霍普克罗夫特教授约翰·霍普克罗夫特，享誉全球的计算机科学家、教育家。他先后任职于美国普林斯顿大学、康奈尔大学，入选美国国家科学院、国家工程院院士。曾获图灵奖（1986）、冯诺依曼奖（2010）、美国工程院西蒙雷曼奖创始人奖（2017）等全球计算机科学领域重要奖项。50多年来，他培养的博士生中有十余位当选美国、英国、加拿大等发达国家院士，其中两名学生分别获得1986年和2021年的图灵奖。2011年，霍普克罗夫特教授加盟上海交通大学，亲自开展课程设计，招聘人才，并给本科生授课。今年，上海交通大学成立了以其命名的计算机“约翰班”。2016年，他获得外国专家在华贡献最高奖——“中国政府友谊奖”。2017年当选中科院外籍院士。一起来阅读霍普克罗夫特教授对中国高等教育的独特见解：</p><p>正文开始：</p><p>我从1964年开始给本科生授课，至今已经50多年了。我喜欢教学和科研，这是我至今还没有退休的原因。康奈尔大学的退休计划非常完善，我的工资不会因退休而降低。但是，如果退休了，我还能做些什么呢？我在小学、中学和大学阶段都遇到了非常棒的老师。他们真心希望我能获得成功。他们对我的人生产生了非常大的影响，我也希望能对其他人产生这样的影响。我真正参与中国的教育工作是在大约十年前。当时，中国教育部让我帮助他们提升大学教育水平。我和150名教师一起工作，尝试提高他们的教学技能。但后来我意识到这样的工作没什么效果，就建议取消了这个项目。随后，上海交大的校长找到了我。从那时起，我就一直与上海交大合作，帮助他们招聘教师，提高教育质量。</p><p><img src="https://pic2.zhimg.com/50/v2-58fffbaef369728e0eb676703b2f43d0_720w.jpg?source=1940ef5c" data-caption="" data-size="small" data-rawwidth="637" data-rawheight="390" data-default-watermark-src="https://pic3.zhimg.com/50/v2-b9208a3be4d1b9dedc95495cd390b474_720w.jpg?source=1940ef5c" class="origin_image zh-lightbox-thumb" width="637" data-original="https://pic2.zhimg.com/v2-58fffbaef369728e0eb676703b2f43d0_r.jpg?source=1940ef5c"/></p><h2id="中国顶尖大学新生比康奈尔新生优秀但4年后被康奈尔毕业生超越-1">中国顶尖大学新生比康奈尔新生优秀，但4年后被康奈尔毕业生超越</h2><p>我之前曾在大约15个不同的国家工作，以改善当地教育，包括巴西、智利、墨西哥、沙特阿拉伯、突尼斯和印度等。在这些国家，我帮助了一些学生和教师，但很难提高整体的教育质量。现在我明白了，除非政府高层想要改善教育，否则你是无能为力的。在中国，国家总理都将改善本科教育作为首要目标之一。所以在这里，我的工作有机会得到回报。我曾经带30个中国学生到美国待了一个月。他们中的一半人立即接受了美国的理念，开始好奇地探索自己感兴趣的研究方向。但另外一半人仍会问我：“今天我该做些什么？”所以一个主要的区别是，一些中国学生只会做你要求他们去做的事情。我在康奈尔和上海交大为大一新生讲授同样的课程。我发现上海交大的大一新生要比美国顶尖大学的更好。</p><p>我认为原因在于，美国有很多不错的大学，美国的人才分散在这些学校中，而在中国，最好的学生都集中在所谓的C9高校（中国顶尖大学联盟）里。因此，中国顶尖大学的新生比斯坦福大学、伯克利大学或康奈尔大学的新生更优秀。但4年后，我再次面对这些中国学生时，却发现康奈尔大学的学生已经超过了他们。这意味着中国的大学教育并不成功。过去20年里，中国的父母意识到他们的孩子需要大学文凭才能找到好工作。</p><p>于是，大学生数量急剧增加，大学教师也从30万增加到100万。而问题是，你们是从哪里找到这么多教员的？有相当多的中国学生到美国高校攻读博士学位，其中很多人更愿意留在美国。我认为原因在于，中国的高校不能提供他们想要的环境，筹集研究经费和发表论文的压力太大，很多年轻教员不得不为资深教师工作。这不是一个教育学生或者做基础研究的良好环境。在上海交大，我负责招聘计算机科学的教师。我无法改变整个学校的环境，但学校愿意为我招聘来的教师提供较为宽松的环境。结果也很好，我已经从美国招回了20名教员，我们很快还会再招10人左右。</p><p>如果我们的使命是培养下一代的人才，那么我们聘用教员时，他们已经做出了哪些研究成果不是最重要的，我们更希望这个人可以在整个职业生涯中都保持活跃。所以我们要寻找的是有创造力的人，他要能不断学习、保持活跃。在中国，评价高校教师和校长的标准应该改变。对于高校，提高学校的国际排名是一个错误的目标，因为这些排名都是基于研究经费和论文数量的。我们应该用本科教育质量来评价高校，而不是研究经费的多少和发表论文的数量。在中国，现在已经有了一些变化，我相信中国的高校将会快速发展。</p><p><img src="https://pic3.zhimg.com/50/v2-01ed77bdc77bc07c82c60d5f73bfb4e4_720w.jpg?source=1940ef5c" data-caption="" data-size="small" data-rawwidth="900" data-rawheight="518" data-default-watermark-src="https://pica.zhimg.com/50/v2-f8f2317c48cbe632af4f4fdcf136c8cd_720w.jpg?source=1940ef5c" class="origin_image zh-lightbox-thumb" width="900" data-original="https://pic3.zhimg.com/v2-01ed77bdc77bc07c82c60d5f73bfb4e4_r.jpg?source=1940ef5c"/></p><h2id="大学应专注教育和基础研究而不是应用研究">大学应专注教育和基础研究，而不是应用研究</h2><p>美国的大学和中国的大学还有一个不同之处。美国有足够多的科学家和工程师，因此如果我们需要开展应用研究来实现某个具体的社会目标，公司和研究机构可以雇到人才，来进行应用研究。而大学是不参与应用研究的。大学应该专注于教育和基础研究。例如，斯坦福大学在上世纪70年代建立了斯坦福研究所，把应用研究从学校转移到了这个独立的机构中。出于同样的目的，麻省理工学院建立了林肯实验室。但在中国，高校仍然需要为应用研究提供帮助。许多资深教师都积极参与其中。</p><p>问题是，应用研究可能干扰教育。如果一名导师在指导学生的同时也在开公司，那么当学生面临着做基础研究还是为公司工作的选择时，导师很可能会要求他们为公司工作。这是一种不应当被允许的利益冲突。中国已经意识到了这个问题，但可能需要10到20年才能作出改变。当中国培养了足够多的人才时，应用研究就应该搬出大学。在美国，美国国家科学基金会（NSF）资助基础研究，不是因为它们希望完成一个特定的研究项目，而是因为它们希望被资助的教师能培养出下一代的人才。教师们可以研究任何他们感兴趣的课题。事实上，这是美国做过的最好的投资之一。我们在许许多多的随机方向上进行研究，偶尔在某个方向上，会有人做出足以创造一个全新行业的成果，从而为社会提供数百万的工作岗位，以及数十亿美元的经济回报。</p><h2 id="大学专业招生应考虑社会需求">大学专业招生应考虑社会需求</h2><p>在上海交大，我担任JohnHopcroft计算机科学中心的主任。这个中心没有学生，它负责为计算机科学系和其他相关项目聘用教师。我们已经使教学质量大幅提高，很多毕业生已经去美国大学攻读博士学位。我希望在最后，我们可以提升整个上海交大计算机科学系的水平。这些精英班的教学水平是和美国顶尖大学相当的，它们正在培养出世界级水平的学生。但是，每个这样的班级通常只有25到30名学生，所以这并不能解决中国的问题。中国必须拓展精英班，最终提高对所有学生的教学水平。中国有这么多有才华的学生，如果能把精英班扩大到所有人，中国的大学将跻身世界顶尖高校之列。我认为一旦改进本科教学，培养出更好的本科生，那么研究生的质量就会随之提高，研究生教育也会自动改善。但这需要几年时间才能实现。目前中国社会对计算机科学人才的需求远远大于国家目前的设定的大学计算机专业招生计划。因为国家不允许计算机学院扩大规模，所以许多高校会在计算机学院之外，创建人工智能（AI）、系统科学等其他院系来解决这个问题。这与美国的情况不同。</p><p>在美国，一个院系可以决定自己的规模。康奈尔大学有60个系，但有多达10%的学生都是计算机学院的。学生们会用脚投票。在全球信息革命的浪潮下，我们需要很多主修计算机科学的学生。创建其他实际上还是基于计算机科学的新院系并不明智。不过，我们可以建立一个包括很多不同专业的大的计算机科学学院。</p><h2id="本科生做研究不是好的经历应该允许学生先弄清自己喜欢什么">本科生做研究不是好的经历，应该允许学生先弄清自己喜欢什么</h2><p>理论上讲，我不认为本科生做研究是一种好的经历。我不鼓励他们这样做，除非他们想要继续深造，去美国大学攻读博士学位，那么他们最好发表过论文。但这是不幸的。如果我们允许学生进入一个大的学院，可以是工程学院，或者艺术和科学学院，允许他们在一两年的时间里弄清楚自己真正喜欢什么，这将是一个重大的进步。</p><p>中国的一些大学已经开始在一些学院这么做，但还没有发展到整个大学。在美国，学生不必上那么多的课。他们可以只选修相对较少的课程，我也鼓励他们这样做。但是出于各种原因，学生们还是觉得自己应该多学一些课程。事实上，我不认为上更多的课、经常熬夜就意味着他们能学得更多。我认为，如果他们少选一些课程，但是可以充分复习、充分领会课程的内容，反而可以学到更多东西。而且，如果他们没有那么重的课程，就可以更好地享受大学生活。或主动，或被动，美国和中国学生都选修了很多课程。我不确定我们要如何解决这个问题。</p><h2 id="中国大学应该多元化">中国大学应该多元化</h2><p>我认为多元化对于大学非常重要。在吸引留学生方面，中国高校可能会遇到一些困难。其中最大的困难是语言问题，中国大学里的大多数课程都是用中文授课的，大多数学生也是用中文互相交流，这会给外国学生带来困难。但现在已经有商业化的翻译设备，可以帮助解决这个问题。另外，外国学生可能会感到孤独。我们应该建立一些项目，帮助他们与中国学生彼此接触。</p><p>在招生方面，你们或许可以联系其他国家的教育部，请他们帮忙，因为很多国家都是愿意把学生送到中国来的。在最开始的几年，要吸引外国学生可能很难。但是一旦有最初的一批学生来了，他们就会通过互联网把相关的情况传回自己的国家，在这之后，就会有更多的当地学生了解中国，愿意来中国留学。如果能做好国际化，中国大学的水平一定会大大提高。6.大学老师的使命：培养下一代人才。好老师最重要的标志，是他/她是否关心学生的成功，而不在于他/她掌握多少知识，或者多么擅长讲课。我刚刚提到，我遇到了非常关心我的成功的老师。我上的是天主教小学，那里的老师们只有高中毕业，他们加入教会学校，是因为他们真的想帮助学生，而他们没有大学学位这件事其实根本不重要。他们想帮助我学习。他们希望我能有一个成功的人生。这是你能去评价的最重要的东西。</p><p>在我看来，教师的使命就是培养下一代的人才，所以有大学教师不去教书是一件很疯狂的事情。在美国，我们不会允许这样做。正如我提到的，我们应该逐步把从事应用研究的教师移出高校。我们首先选择要评价哪些课程。我们选的都是基础专业课，而不是小班课程。然后我们派评委去听课，对于每一门课程，会有两位评委去听两节不同的课，并进行打分。他们会针对教师是否熟悉讲义，讲义是否涵盖最新进展，教师是否与学生互动，以及有多少学生在听讲、有多少学生在玩手机等方面进行打分。最后，我们会选出最好的老师，并给他们颁奖。2018年，我们只评价了9所顶尖高校的课程。2019年，这个计划将扩展到约50所高校，并且奖励50名教师。有很多人参与了这个项目，我们正准备建立一个非营利组织来运作它。</p><p>事实上，我已经获得了政府的许可，来对中国50所顶尖大学的计算机科学教育进行评价和排名。我们将派45名评委到各个大学去，他们会坐在教室里听课并且打分。在第一年，也就是2019年，我们的排名结果不会公开；我们只把结果告诉各个大学的校长，让他们有一年的时间来改进，在这之后，2020年的排名结果将会公开。这个排名可以帮助高中毕业生和家长进行择校。获奖的教师会获得约7万元的奖励。这个项目由10家中国公司资助。我去拜访这些公司的时候，它们都非常爽快地愿意提供资助，因为对它们来说，这是一项很好的投资，如果我们改善了本科教育质量，它们就能够招聘到更好的人才。<img src="https://pic1.zhimg.com/50/v2-2400a9f52e6ca1c49cd201ae557bd6f9_720w.jpg?source=1940ef5c" data-caption="" data-size="small" data-rawwidth="900" data-rawheight="289" data-default-watermark-src="https://pic1.zhimg.com/50/v2-78a9285c02cbd48079cbc6229949ab5f_720w.jpg?source=1940ef5c" class="origin_image zh-lightbox-thumb" width="900" data-original="https://pic1.zhimg.com/v2-2400a9f52e6ca1c49cd201ae557bd6f9_r.jpg?source=1940ef5c"/></p><h2id="大学要教会学生更好地生活反对一些学生花太多时间学习">大学要教会学生更好地生活，反对一些学生花太多时间学习</h2><p>我认为我们真正要做的，是教育学生更好地生活。技术教育对学生就业和国家发展都很重要。但我们也需要提供更广泛的教育，包括历史教育、社会教育等，这会让人们有能力做出正确的决定，以应对这个不断变化的世界中的各种问题。教育的另一个目的是帮助人们享受生活的方方面面。我不认为人们可以完全理性地计划自己的生活。当有机会选择一种或另一种生活方式时，我认为你应该选择那个你真正喜欢的。如果生命只有一次，就应该充分享受它。所以，我反对一些学生花太多时间学习。我上小学时，早上9点开始上课，下午3点放学，没有作业。我很享受我的小学时期，通过与其他学生互动、打球和探索城市，我在课堂之外学到了很多东西。中国的小学生很忙。我不知道他们是否享受这种生活。现在确实有大量的科学研究成果，但你不可能全部学会。如果试图强迫别人去学他们学不会的东西，那是行不通的。更重要的是学会如何学习，以及不同的学科是如何组织起来的，这样当你需要的时候，就可以很快地找到并使用所需的内容。有实验表明，出生头两年对人类大脑的发育至关重要。要有稳定的环境和良好的营养，大脑才能学会如何学习。</p><p>只有这样，孩子们上小学之后才会有好的表现。如果计算一下投资回报比，你会发现为每个孩子创造稳定的环境是最划算投资之一，对中美两国都是如此。在中国，很多家庭中父母双方都有工作，孩子由祖父母照顾。祖父母也许能提供足够的食物，但那是不够的。孩子们需要更多的情感关怀和早期教育。当他们抬起头，他们会希望看到有人在身边，对他们回以微笑。这些问题不会马上解决。所以，我现在将重点放在本科教育上。解决本科教育之后，我会转向幼儿教育。这将是一个昂贵而复杂的项目，但我希望能做一些有用的工作。8.根据创造力和求知欲来评价研究人员，将极大有利于基础研究。我现在对深度学习很感兴趣。人们正在很多领域中应用深度学习，但没有人知道它背后的原理是什么。我想把研究重点放在这个问题上。</p><p>另外，如果深度学习只是纯粹实验性的，那么我们就很难向学生讲授它。所以我想知道它背后的理论基础，以便更好地教授我的学生。这对我来说是一个特别的动力。我认为最主要的问题是，中国是用发表论文来评价研究者的。但如果你要做基础研究，就很难发表论文。实际上，我在20世纪60年代获得普林斯顿大学教职的时候，没有发表过任何一篇论文。中国文化似乎更喜欢客观的衡量标准，比如论文和资助。如果你们能建立一个值得信赖的委员会，摆脱掉这两个指标，根据创造力和求知欲来评价研究人员，从长远看，这将极大地有利于基础研究。感谢教授对中国高等教育的关注和投入。</p><p>“在中国，现在已经有了一些变化，我相信中国的高校将会快速发展。”</p><p>共勉！</p>]]></content>
    
    
    <summary type="html">“在中国，现在已经有了一些变化，我相信中国的高校将会快速发展。”</summary>
    
    
    
    <category term="写作" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/"/>
    
    <category term="博文" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/%E5%8D%9A%E6%96%87/"/>
    
    
    <category term="人类社会观察" scheme="http://example.com/tags/%E4%BA%BA%E7%B1%BB%E7%A4%BE%E4%BC%9A%E8%A7%82%E5%AF%9F/"/>
    
    <category term="2022春季" scheme="http://example.com/tags/2022%E6%98%A5%E5%AD%A3/"/>
    
    <category term="课咨委" scheme="http://example.com/tags/%E8%AF%BE%E5%92%A8%E5%A7%94/"/>
    
  </entry>
  
  <entry>
    <title>求道之人，不问寒暑</title>
    <link href="http://example.com/2022/04/25/%E9%9A%8F%E7%AC%94/%E5%8D%9A%E6%96%87/%E6%B1%82%E9%81%93%E4%B9%8B%E4%BA%BA/"/>
    <id>http://example.com/2022/04/25/%E9%9A%8F%E7%AC%94/%E5%8D%9A%E6%96%87/%E6%B1%82%E9%81%93%E4%B9%8B%E4%BA%BA/</id>
    <published>2022-04-25T00:12:06.667Z</published>
    <updated>2022-08-26T16:06:07.342Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><ahref="https://zhuanlan.zhihu.com/p/23460569">原文链接</a>，自勉。</p><p>我还记得那个决定不给 NIPS投稿的傍晚。那时在车里，一个人待着，也不哭，也不笑，看着夕阳西下。七点多了，但因为是六月的关系，天还是亮着。周五傍晚，同事们都走完了，谷歌的校园里很安静，树叶在地上铺开，红的，黄的，绿的。耳朵里只有风吹过的声音。</p><p>老婆打电话过来，我说了一通为什么不投稿的原因，我说你指出的是对的，你说的有道理。我说话的时候非常冷静，她说你没事吧，我说我没事的。她挂了电话，宾州那里已经是快11点，该睡了，留我一个人在加州，看着这空无一人的校园。</p><p>我给我导师发了封信，说不投了，感谢这几天陪我改这篇糟糕的文章，他之前的建议也是不要急着投稿，我说我想了想，你是对的，我太急太赶了，很多事情要慢慢来。然后我放下电脑，点火，开车，启动，开上shoreline，开上101高速，在亮着灯的车流中穿行。忽然间，就没有执著投稿的念头了，什么也不想，什么也不做，任着车带我走街串巷，就好像一个再平凡不过的周末。</p><p>今天过去了，明天还有明天的事。能放下，才可重生。</p><p>做数学证明实在是一件非常可怕的任务，前一刻你以为自己胜券在握，后一时刻发现了一个错误否定全盘，立即如坠冰窟，像天塌下来似的；刚刚还像是孙猴子腾挪得舒爽了，觉得自己厉害无比，突然间发现一直在如来的五指山里转圈子，从没有踏出一步。如此几次，才觉得自我的渺小，自然的可怖。这种感觉，书上教不来，别人传达不到，唯有自己走到了，方才悟得。而一旦悟得了，就锋芒尽敛，再也没有傲慢的底气。</p><p>《棋魂》里面，佐为有一句话让我印象深刻。“你不害怕，是因为看不到我的剑锋，你害怕了，因为你看到了”。做研究也是如此，不仅先要看到剑锋，还要有迎难而上的勇气，无数次被打趴下后，再无数次从绝望中找到一丝希望，然后费尽九牛二虎之力，从密密麻麻的错误里，一点一点地挖出那米粒般的宝石来——对于证明而言，那必须是完美无瑕的，若有一点瑕疵，就与泥沙无异。这样的事情干得太多，也就无所谓希望和失望，坚持和放弃，我能知道的，就只是时刻做好被从头到脚彻底全盘否定的准备，时刻想着把草稿烧掉，推倒重来。时间久了，有一天我突然发现，我完全无法理解别人守成的习惯，为什么大家都宁愿抱残守缺，而不愿从头开始？</p><p>原来这么长时间，已经让我成了一个完全不同的人。</p><p>有人问我，梦想如何坚持？梦想破灭了怎么办？我想要回答，但是真要提笔的时候，又不知道如何说起。其实，这世界上没有破灭和未破灭这两种状态，没有是或非两种结论，这世界上有的，只是日升日落，人来人往。你说要有光，那就有光，光在你心里；你要追求什么，那东西就不曾离你而去；而你若忘却，它就消亡。所以，若是要坚持所谓的梦想，那么就如同小说中写的那样——</p><p>求道之人，不问寒暑。</p>]]></content>
    
    
    <summary type="html">原来这么长时间，已经让我成了一个完全不同的人...</summary>
    
    
    
    <category term="写作" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/"/>
    
    <category term="博文" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/%E5%8D%9A%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>大二学年总结</title>
    <link href="http://example.com/2022/04/24/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/04/24/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E6%80%BB%E7%BB%93/</id>
    <published>2022-04-24T13:17:30.403Z</published>
    <updated>2022-12-16T16:23:18.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>一年前的夏天，我偶然在文刀日肥上读到了一位我认识已久的学长所写的<ahref="https://mp.weixin.qq.com/s/AOgpaXc9Or84R20cVqEUsg">转系随笔</a>。尽管认识学长已久，我也深谙学长超强的学习能力和社工热忱，然而细细品读，哪怕我所敬佩的他们取得了让人惊叹的成就，他们也经历过一次次辗转反侧的迷茫与无助。</p><p>恰好，那个夏天的我经历着人生最为严重的一次迷茫与自我怀疑。我那时就暗暗在想，或许到了明年这个时候，我能够走出现在的困顿，也能够畅快淋漓地与夏天的迷茫与无助和解，也在文刀日肥上写写自己分流转系后的一整年。但是最后没这么干，因为不喜欢把我的想法和朋友圈的某些傻逼交流，毕竟我的朋友圈有上千人，许多人我并不熟识，贵物也有一堆。倘若你看见了这篇文章，至少你应该比较了解我的脾性，也不会对我多么阴阳怪气。如果你有兴趣，欢迎继续读下去。</p><p>在来到计算机系前，我的人生自然也有过许多次重大的选择，不过这些选择都可以概述为：用脚投票。</p><p>因为初中时优秀的朋友都去学习了竞赛，我先是用脚投票，学了竞赛。</p><p>因为高中老师从来只给我们宣传华子，我接着用脚投票，来了华子大学。</p><p>因为我从大一开始多次在知乎上看见痛斥分流的回答，我又用脚投票，来了计算机系。</p><p>用脚投票这几个字，完美的概述了我在来到计算机系之前的人生——</p><p>我从来没想过我是一个怎样的人，我做出决定的原因大多是因为我周围环境里的大多数都做出了某个选择，所以我也这么做。</p><p>直到来到计算机系。</p><p>如我所述，在去年夏天之前，尽管我一直用脚投票，然而我却不认为这有什么坏处。恰恰相反，用脚投票是一件很稳妥的事情——大家都卷绩点，我也卷，大家都卷实验室，我也卷，大家都卷社工，我也卷。我不能保证做别的事情会更好，但我一定保证做大家都做的事情不差。</p><p>直到来到计算机系之前，我做的都是大家做的事情。这条路的确不差，我大一时成绩尚可，在每门课上努力卷出一朵花来，社工也有计划地参加，甚至还谈了一次不短不长的恋爱…</p><p>学业，社工，爱情，科研，每一件都是那么宝贵，每一件事物都值得华子学生孜孜不倦地追求。每个人都在追求他们的路上，我也全力奔跑，尽管我并不知道这有什么意义，至少我知道，大家做的事情是不错的。这些事情，在大二有了很多改变…</p><h1 id="readme">Readme</h1><div class="note success modern"><p>总结下全文，其实无非是讲了自己的学业、科研、情感与选择。</p></div><p>本文充斥着一些注释。这些注释要么是政治敏感，要么是涉及到个人隐私，或者涉及到他人的隐私。有兴趣的话，可以试试读一读…</p><p>为什么想写学年总结呢，因为看到很多一直以来我非常仰慕的学长都喜欢在每个阶段结束总结上个阶段的许多事情。比如和我一样的青春伤痕文学家<a href="https://mashplant.online/">MashPlant学长</a>，每每看他的文字，总觉得除了我没有他那么强，他的心理和文字和我惊奇的相似。还有，我长期以来非常仰慕的<a href="https://trinkle23897.github.io/">n+e学长</a>，我也想成为像他一样科研强劲（虽然用他的话，他觉得自己不适合读博，在MILA的一个夏天就放弃科研了），爆杀各类体系结构课程（而数电和数电实验直接让我破防，产生了生理性不适），喜提巨额大包（而我只希望以后毕业了opt三年摆烂），在江湖上声名远扬（而我总觉得自己在各个圈子臭名昭著），还有感情生活（能在卷成麻花的北美相亲市场找到对象，而我几乎断言自己会孤单而度过一生）的人。</p><p>可惜我的能力总是有限的，实验室摸爬滚了一学年，连摸爬滚打的打都没有，我的感受如下图：</p><p><img src="https://zhaochenyang20.github.io/pic/embed/6_20_1.jpg" style="zoom:50%;" /></p><p>然后一年来自己摸鱼，同期我周围的人已经成为了神经网络训练师（<del>神奇宝贝训练师</del>），而我只配爬爬爬：</p><p><img src="https://zhaochenyang20.github.io/pic/embed/6_20_4.jpg" style="zoom:25%;" /></p><p><img src="https://zhaochenyang20.github.io/pic/embed/6_20_2.jpg" style="zoom:70%;" /></p><p>我混入其中，学业不顺，感情受到不可逆损伤，社工虽然有认真在做，但是没有塑造出自己的核心凝聚力，还是没有很让我满意的管理能力。我的感受大概是这样吧：</p><p><img src="https://zhaochenyang20.github.io/pic/embed/6_20_3.jpg" style="zoom:90%;" /></p><p>意外的混入其中，每每觉得周围的同龄人太强了，我…</p><p>行吧，读到这里，你大概知道这篇文章会讲些什么了。如果你愿意读完，或许我们能交个朋友，毕竟能忍受我这种青春伤痕废话文学的人的确不多…</p><p>如果你不知道如何读注释，那么建议你学习基本的前端知识，比如查看网页源代码…</p><p>这些文字是大二学年的总结，认真开始写是从 2022 年 6 月 15日考完人智导的夜里，想说的太多——</p><p>学业，社工，情感（不是感情），选择，社会理想，经济状况，心理状况，社会关系…</p><p>那就这样吧，照例，这句话留在这里，贯穿全文：</p><div class="note success modern"><p>成长就是背叛，没有其他的道路。没有离开，就没有到达...</p></div><p>这是过去一年的基调，我背叛了太多的欲念和世俗克奇，甚至背叛了我少时太多的心地善良和热忱待人，这个过程充斥着血肉撕裂的剧痛和对自身存在的质疑，甚至一度产生过非常多对中国社会的彻底绝望。然而虽然如此，没有离开，就没有到达。</p><p>如果用一种声音来总结去年的话，就是这首玫瑰少年了吧。套用我格外喜欢的《黑神话-悟空》里的句子：</p><div class="note info modern"><p>昔日龌龊不足夸，斗罢艰险再出发</p></div><div id="dplayer3" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer3"),"autoplay":true,"theme":"#FADFA3","loop":true,"lang":"zh-cn//语言","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"video":{"url":"https://zhaochenyang20.github.io/video/玫瑰少年.mp4","pic":"https://zhaochenyang20.github.io/pic/embed/7_9_1.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><h1 id="开端">开端</h1><p>人类的情感是颇为复杂的一件事情，这一部分只是记录了开端，我对感情长期处于偶尔积极，偶尔孤单而度过一生的状态，但是发自内心，我仍旧渴求着执子之手的伴侣…</p><p>后续的故事，可以参考<a href="##感情">感情</a>这一部分…</p><hr /><div class="note info modern"><p>满纸荒唐言，一把辛酸泪…</p></div><p><strong>这段话本来是放在注释里的，但是想了想，不必如此，遂公开大部分内容，仍然有部分内容不便公开，如果你愿意，请自行浏览。</strong></p><p><imgsrc="https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/pic_embed/22_09_03_1.jpg" /></p><hr /><p>亲爱的读者朋友，如果你读到这里有耐心打开注释，看到了我接下来的文字，非常感谢。你似乎看出了我的欲言又止…</p><p>既然你都读到这里了，请让我把这段话讲述完吧。过去一年我最平常的歌叫做《callyourname》，是我最爱的一部番——进击的巨人里的插曲。喜爱这个插曲的原因其一是原作中搭配有非常震撼的场景。其二，歌词表达了太多我的心声。</p><div class="note info modern"><p>She lost her brother a month ago</p><p>His picture on the wall</p><p>And it reminds me</p><p>When she brings me coffee she smiles</p><p>I Wish I could be with her till my last day</p><p>She said she gave all her love to me</p><p>We dreamt a new life</p><p>Some place to be at peace</p><p>But things changed,Suddenly</p><p>I lost my dreams in this disaster</p></div><p>这几行歌词几乎是我对开启我去年记忆的 A 的全部的记忆。当然，此处用 A来代指她，但她并不姓A。这么代指她，完全是出于我并不想记住她的种种，记住她具体的名字，她的生日，她的面目，她的微信名字，她喜欢的碳酸饮料，她最爱吃的听涛的腊汁肉拌面…记住这一切，对我早已毫无意义，我只是想抽象地记忆一个人的抽象类，然后把这个抽象类的一切函数标记上final。希望再也不会有人在我的生命中继承这个基类…</p><p>那么，开端要从何处叙述呢？</p><p>回到 2020 年的 11 月，我第一次在 wyp老师的程设课上认识她。认识她的第一天，她提到自己高中在华子的西操开运动会的事情，我知道她是个北京人，华子附中的。那时候刚刚到北京，我并没有对于北京人有太多恶意，我现在也不厌恶北京同学，只是我很麻木，对于中国的阶级矛盾尤其麻木。我有时甚至不免羡慕，这帮同学还能够偶尔回家陪伴爸妈。然而当我写下这段文字的时候，我已经有一整年没有回过家了，而且我家已经把我从小长大的房子卖了，为了供给我去塔国的学费。甚至物理意义上，我已经失去了我的家。</p><p>我那时还没有自己的唯物史观体系，也对阶级矛盾没有自己的认知。可能那一刻，我的心里只是隐隐有着一个念想，可能她从小到大接触的事物和我完全不一样，而她本身就在计算机系（无意冒犯软院，软院真的是一个非常团结有干劲的院系，不过是被高考和华子招生的恶味框架荼毒），应该会很强…</p><p>我莫名的加了她的微信，似乎也和刚上大学时心里憧憬的爱情有一定关系，然而其实刚上大学时，我心里总是抱着不切实际的幻想，希望能和认识的每个人交朋友，结交自己的人际圈，让我能够在这个院子里有自己的声音。总之，若干多个月后，我给A 表白时，从未想过这会是我人生第一段亲密关系的开始。再过 4个月后，我也没想过这是我大学乃至整个亲密关系认知史的悲剧的开端…</p><p>在认识 A之前，我也有过一些情感经历吧。但是这些情感经历最后，我都会和对方成为关系尚可的朋友，从未有像A 一样彻底删除一切联系方式，老死不相往来的经历。当然，我和 xyy也是删除了联系方式，老死不相往来，但是和 xyy并不是情感经历，是一种同是天涯沦落人的共同感受吧。xyy上了北大，我来了华子，后来的事情就是，我们也老死不相往来…</p><p>回到和 A的关系上，刚刚认识她的时候，当然我完全不可能预料到接下来一年的事情。我每每幻想我能够回到那天的程设课，抽自己一耳光，让自己一辈子远离那天坐在自己旁边的这个家伙…当然，我没法逆转过去。就像《IPad》里唱的那样</p><div class="note info modern"><p>I wish I could take my number back…</p></div><p>总之，我认识了 A，然后和 A简单的交流过。就是某天去跑协之前，我都忘了为什么会和 A聊起来。嗷！我想起来了，是因为我大一时还经常发朋友圈分享沙雕的单纯快乐。有一次wyp 老师的 OJ 题是一个回文质数的问题。我直接打表，用了 O(1)的时间就解决了，还洋洋得意地发了朋友圈…</p><p>我现在都记得，那条朋友圈截图的代码，数组的名字还是fuck，非常有我起名的特色。甚至一年半后我写软工，在 console.log里面写的输出都是 fuck I get…</p><p><img src="https://raw.githubusercontent.com/zhaochenyang20/zhaochenyang20.github.io/c5527f848b946088ea41d9325048146d35b5f740/pic/embed/7_9_2.jpg" style="zoom:40%;" /></p><p>回到那条朋友圈上，我在朋友圈发了自己打表的方法，得到了朋友圈一阵欢笑。A也莫名给我发消息，说这道题可以用 xxx 方法做。</p><p>我现在想起那天的事情，都觉得挺搞笑的，感到一些开心。开心的原因和 A没关系，更多是为我那时少年的热忱，对朋友圈里大量混蛋的信任，还愿意分享单纯的快乐和对生活的反叛，那时单纯温暖的少年心思令人不免动容。实际上，我已经很久没有这样的心思了。自从和A分手加上之后发生的很多事情，我对朋友圈大多数人都没有丝毫信任。一对一交流还行，但是人群真的都是一帮傻逼。</p><p>总之，那天 A 看了我的朋友圈，给我发消息，说这道题可以 xxx做法。我们聊了几句，我表达了对于北京天龙人的羡慕，毕竟自己很难回家一次，然后我就去跑步了。（我在大一上认识她前经常去跑协，无独有偶，大二上和她分手后我也经常去跑协）</p><div class="note info modern"><p>此处用天龙人指代北京同学实属抱歉，这是我和我周围很多北京的好朋友调侃时常用的话语，我的好友阿飞，纯纯来自人大附的北京人，祖上还姓过爱新觉罗，就经常自嘲为天龙人。如若我调侃北京同学为天龙人引起你的不适，实属抱歉。</p></div><p>之后的事情，就到了半期的时候，我晚上因为 wpy老师的大富翁破防，最后大富翁纯粹抄了 szz的代码，就改了个变量名（感谢大一的课还不查重）。结果那周四上午，我上胡杨老师的英语课，A给我发消息，问我大富翁怎么做。我给她口述了好几个易错点，然后就上课去了。我那时觉得很诧异，为什么A 会来问我，我们本来也不熟悉。</p><p>事后才知道，A会问别人，存粹是希望别人帮助她，而她如何对待别人，和别人如何对待她并无关系。分手后细细想来，她总给我一种把别人当做工具人的感觉，令我非常不快。当然，她固执地说这是因为什么狗日的消极自由。作为一个布尔什维克主义者，我只能对她这种被资本主义忽悠瘸了的zg，塔国的 fig licker表示彻底的反感。然而一想到伤害我最深的是我的政敌，我心里一时难以相信自己的愚蠢…</p><p>回到一开始，总之，A问我如何过大富翁，我给她讲了。她过了之后又问我如何复习微积分，我说我和我同学一起约自习复习线代，也可以一起约自习试试。她他妈的，居然，居然答应了。</p><p>直到我们分手，我才明白，她答应我不过是因为她的单纯，乃至天真…</p><p>然后，事情就是，从那天之后，我们经常约自习。2020年的冬天，我用生殖器思考问题，和她在一起呆了很久…</p><p>这里用生殖器思考是两层含义，其一是因为人的大脑是最大的生殖器官。其二是那时自己对人类的心思太单纯，总觉得人类能够和我共情，理解我的想法。然而人类之间除了没有生殖隔离，生殖器的差异实在太大了，我完全不能理解她的世界观，就像她完全不能理解我对阶级的憎恶和对解放全人类的执念…</p><p>话说到这儿，其实太狠了，本质上我也不是一个非常恶毒的人。我从不觉得自己是个好人，但是至少本性不坏。写这些只是把记忆留下来…</p><p>那我继续写，如果你看到这里还愿意继续看当然也很欢迎。好吧，其实似乎我所有注释的内容就是感情问题了。</p><p>anyway，之后的事情我似乎也记得不太清楚——这种感觉是很常见的，我中学时曾经感慨于一句话，当时只道是寻常，现在觉得，当时只道刻骨铭心，现在觉得无非也就这样。</p><p>接下来是 2021 年的冬天，我回四川，一边实践，一边思考和 A的关系，还有给父母、朋友也谈过这件事情。寒假还蛮辗转反侧的，毕竟第一次认真地想开启一段亲密关系。除夕当晚想要给她告白，后来失败了，大概是她没理我。</p><p>过年期间还有一个小插曲，A给我推荐了《进击的巨人》。那是我小时候和玩伴一起看的动画了，长大之后重新看，只觉得惊艳，讲了太多民族矛盾的问题。于是就到了开学，那时的我真是太热忱了。像小鸟一样回到了我并不喜爱的北京——当时也许还算喜欢吧，毕竟我逐渐意识到我会和北京人产生一些羁绊，现在只觉得这个城市不属于我，我也不属于这个城市。我的理想是通过发展生产力，消除所有的阶级矛盾，让北京人再也不是天龙人。这并不是想剥离他们如今的特权，而是让每个人都能享受到优质的教育和工作机会。</p><p>总之，那个冬天，我为了感情辗转反侧了很久，开学后见到了 A。那时候我和A的关系很不错，我们一起选课，一起上课，写作业，真的挺温暖的，在暧昧的时候和感情的开始。那周五的晚上，我和覃琦超在清华学堂写作业，遇到一个实践认识的朋友，然后她劝我快点表白。</p><p>于是在那一天，我清楚地记得那是 2021年的元宵，在紫荆的夜色下，我把她从楼上拉了下来。</p><div class="note primary modern"><p>音乐，一些共同的照片，我准备了很久，反复修改的语言，忐忑的心，边说边忘词，蜷缩坐在操场上，抱着腿，埋着头，面色赤红，断断续续的话，激动的语调…</p></div><p>天啊，我竟然还能回忆起那天的感受，真的是为那时热忱的少年心而感喟。而我已经很久没有这样的感觉了，实际上可能以后的人生也再不会有那种少年的热忱心思了。真的去了北美，可能真的是比较收入，然后相亲，就这样找一个没有记忆的人度过一生。</p><p>那天晚上，A给我说，可以试试。我和她相拥在一起，我从未有如此热爱过这个世界，握着她的手，那一刻我以为自己握住了整个世界。</p><p>说到底，A不是一个坏人，我也不是，可能真的是不合适吧。她渴求自由，渴求自由与民主。她的心思如同她的微信名字一样，属于美国，属于灯塔。而我，我也渴求自由，我渴求不受生产力约束的自由，每个人都平等，收入可观，生活幸福，我认可资本主义，但我更认同社会主义与共产主义，我希望解放全人类。</p><p>可是，和她在一起的时候，我还没有如今的想法。</p><p>我和 A 在一起了 4个月，从二月到六月，那是一段奇特而现在又显得过于平凡的日子。奇特的原因，可能是我第一次参与一段亲密关系，从物质，到心理，全盘和一个生命中的其他个体共享。我们会谈很多问题，谈到从小到大的事情，谈到读过的书，谈上过的课，还有很多性相关的内容。然而过于平凡的原因，是因为我发现无论是否处在一段亲密关系中，我都没法摆脱现实生活的重负，还会为华子惊人的学业压力而焦虑痛苦，这样的情绪也传染给了A。</p><p>好景不长，可能她觉得亲密关系让她很恐惧，而我确实是一个对人际关系依赖感特别强的人。我们因为一两件事情吵架。我现在都记得，看见她手上的手镯，总想着摘下来把玩，然后我们讨论起了那物什的价格，讨论起了一些经济观念的问题。然后，我们吵了第一次架…</p><p>我现在都忘了为什么会吵架，但是我们的确吵了起来，现在想来完全没有意义，但那时彼此都不成熟。这并不意味着她现在成熟了，至少我成熟了太多太多。</p><p>她不会吵架，我也不会，我们生了几天的闷气，其实我自己对这一切挺敏感吧，总之结果并不愉快。到了六月底，我们彻底吵了起来。吵起来的原因，这次我记得非常清楚，因为这和我的政治观点有很大的冲突。那是去年考完OOP的那天晚上，我兴奋地去找她，我们走在去南区底下的路上。她淡淡地说了一句话，</p><hr /><p><strong>一些注释…</strong></p><hr /><!--她妹妹出生在美国。--><p><!--那一刻，我的内心突然非常崩溃。我从小到大心中的某些执念突然崩塌了，我以为人生是公平的，我以为社会是公平的，但是那一刻，我的心里非常崩溃。她的妹妹上小学中段了，那么，在她妹妹出生的时候，还在严格的计划生育吧。她的妹妹在美国出生，逃脱了社会抚养费，还家在北京，中关村三小，彻底的天龙人，既得利益者。--></p><p><!--那天我们吵了很久，真的是因为我那时还是个小城市做题家心态，我没有对社会的认知。她妹妹出生在美国…我的世界观在这一刻崩塌…--></p><p>事后想来，我认识的大多北京同学，家里多少有这类的条件，这些无非就是第二阶级的人为了维持自身的阶级的选择，这绝对不值得提倡，但是的确没什么非法的勾当，就是因为我来自更低的阶级，我完全没有想到上层人的生活是如何的，偶然间我遇到了第二阶级的人，让我的阶级信仰崩塌了，彻底地崩塌。</p><p>更让我崩溃的是，她坚持认为这个国家侵犯了她的各种自由，她渴求自由与民主，就像托克维尔那个混蛋所写的美国。然而现在的塔国是什么样子，我只觉得作呕。很大程度上，她认为这个社会亏欠她良多，然而她却并不认为自己已经是这个社会的剥削者，有太多人因为她的家庭而受到剥削。计划生育是这个国家时代的伤痕，然而她认为那些因为计划生育而导致的惨剧都是人应有的报应，甚至反问我：“为什么不让这些人不出生呢？”</p><p>谈到这里，我感到无尽的愤慨，我为这个国家的人民供养了这种吸血鬼心态的肉食者感到悲愤，为我前半生的痛苦和兼济天下的理想感到不值，更产生了对A 以及她所代表的既得利益者的深恶痛绝。</p><p>我又想起一位马院的爷说过的话——</p><blockquote><p>有些时候华子的优势就不是为寒门学子准备的，所以很多人学校觉得收到压迫，是因为他们在哪儿都收到剥削。这是个资产阶级大学，我在马院都能拉pe，经管有几个人能做到？</p></blockquote><p>如今的我已经能在感情之外的大多事情做到随心所欲了，然而向着之后数十年望去，感情和阶级却是最让我感到恐惧和后怕的事情。并没有人能感受到我的内耗程度，我对未来也很迷茫。在可预见的将来，我还是会挣扎以维持世俗上的成功，然而内心的无限内耗又会在无尽的时刻将我吞没，尤其是在事业上受阻的时刻。</p><p>我在世俗上已经够了，却又远远不够，与此同时，大多人出于世俗，会觉得我已经够了。然而我之所以拼命追求世俗，是因为感情上长期的一事无成和内耗让我发现，相比之下，世俗都是更加容易追求的；物以类聚，没人受得了我的性格和理想，导致我会孤单而度过一生，而我恐惧孤单而度过一生，这会让我无比内耗，进一步加剧了我疯狂追求学业和研究，让我的性格和理想走向另一个极端，导致我的性格更加没人能够接受，如此恶性循环。</p><blockquote><p>我又想到了那句我很喜欢的，“我这种人，要是没有出生该多好啊”，我不会为了一个只认识几个月的人就寻死觅活，首先我不是为了她，而是为了我十年以来，以及未来可以预期的痛苦。</p></blockquote><p>我常常会恐惧为了某个人彻夜难眠的日子，每次回想到去年夏天，一度感叹于我是如何活下来的。谈到这里，我无法掩盖内心的绝望和长期以来的苦痛。</p><p>回到和 A的关系上，那天的我向她阐述计划生育给这个国家，给我的同胞，给我的故乡，给这片大陆上的绝大多人曾经带来的痛苦；我以为这些苦难，是时代带给我们的，我现在才想明白，并不是“我们“。计划生育的苦难，是带给我，和我的同胞的；而她——这个自以为人畜无害的既得利益者——根本就不是我的同胞，她根本不是一个中国人，她是个彻头彻尾的混蛋，无耻至极的民族败类。</p><p>她竟然问我——</p><div class="note info modern"><p>为什么不让这些人不出生呢？</p></div><p>是啊，为什么不让这些人不出生呢？如果我和我的同胞，我们的诞生就是卑微的，我们的生命就是卑贱的，我们终其一生不过是被她和她背后的阶级踩在脚下的奴隶，那么，为什么要让我们出生呢？</p><p>难道只有高贵的她、她的妹妹和她的家人，才配得上生命这个词，才能够来到这个世界上，才能够享受她以为被这个社会剥夺的自由吗？</p><p>时隔一年，我仍然能想起她那天的问题，那句话就像是在质问我，你有什么资格诞生在这个人世上？多谢她，在那之后，我很快就知道了我的人生与理想注定是徒劳而且痛苦，如果在我诞生前，能够得知如此事情，那么我不会选择来到这个世界上。</p><p>但是，我不容许她质疑我和我的同胞，我们诞生于此，我们能活在这个世界上，不依靠任何人的同情与施舍。我能够活下来，能够活到今天，是因为在我出生时，我的母亲与无数抗击非典的医护人员险些死在了病房旁；是因为在我六岁时，有数十万的人死在了我故乡方圆一百里内，他们的鲜血和肉躯让我活了下来；是因为我的父母在我中学时无数次奔波于川西的蜀道，哪怕这条道路每年都有数十人葬身山间。</p><p>如今我还在坚持我的抗争，我在为我和我的同胞抗争，哪怕死在如此道路上，我也要实现我的理想；然而，几天前，我甚至产生了原谅这个混蛋的想法，她绝不值得原谅，如若不是出于人性和法律的约束，将人类灭亡前的某一刻，我和我的同胞，一定会用最生不如死的方式让他们偿还这罪孽。</p><p>我知道我活下来多么不易，我也知道我的同胞活下来多么不易；我不容许肮脏卑鄙的及得利益者质疑我们生命的伟大；我总有一天要把他们踩在脚下，要让他们把做过的卑鄙龌龊的勾当全部偿还，要让他们忏悔数十年来践踏剥削我和我的同胞，要让他们以生不如死的方式赎还他们的罪孽！</p><p>最后，我在我的<ahref="https://zhaochenyang20.github.io/pdf/%E6%88%91%E4%BB%AC%E7%9A%84%E4%BC%9F%E5%A4%A7%E4%B8%8E%E6%B8%BA%E5%B0%8F.pdf">毛概论文</a>里以A 为原型，竭力地批判了此番小布尔乔亚的思想：</p><div class="hide-toggle" style="border: 1px solid lightblue"><div class="hide-button toggle-title" style="background-color: lightblue;"><i class="fas fa-caret-right fa-fw"></i><span>毛概论文节选</span></div>    <div class="hide-content"><div class="note modern"><p>意识形态输出是生产力水平客观决定的，不以人的主观意志为转移。舆论认为苏联输给了美国的和平演变，中国更应该管控社会舆论，避免重蹈覆辙。我认可中国应该管控社会舆论，然而原因并不如此。</p><p>物质水平发达地区必定会向物质水平落后地区输出自己的社会文化，或者说意识形态。而输出的结果必然是物质落后的一方在长期的相互输入中败下阵来。即便物质落后的一方暂时取得了政权意义的胜利，长期以来，自己的社会文化也会被物质先进的一方同化。古代，中国的北方少数民族若干多次取得了整个中国的政权，最后无不是自命为真龙天子，文化汉化。而苏联和美国相互输出意识形态，苏联也多次取得过不少胜利，比如连杜鲁门都不知晓曼哈顿计划的时候，斯大林早就对美国建造原子弹一清二楚，自然是苏联的意识形态成功输出给了曼哈顿计划的二号人物。然而，长期看来，就算无数西方知识分子认可了苏联的意识形态，认可了唯物史观，共产主义，也没能避免苏联因生产力水平落后而物质水平相对落后的局面。正因物质文化的落后，导致了苏联最后被美国和平演变，而非美国被苏联和平演变。在国内也是如此。尽管并不广为人知，但是越南和中国长期在中越边境相互输出意识形态。在九十年代，越南政府甚至拨款给中越边境的学校，让他们免费招收中国学生入学，学费远低于中国境内的学校。然而，那一时期，越南人均GDP 400 美元，中国人均 GDP 2400美元，即便越南一度在中越边境的意识形态战争中处于上风，最终也完全不可能培养出中国普遍的亲越南的意识形态。反而是到了这几年，中越边境人民普遍能够直观看到中国人民的物质水平远远超出越南，意识形态战争的结果不言而喻。同样的事情发生在世界各个角落，比如南北朝鲜边界，北朝鲜不得不对每个脱北者处以极刑。还有美墨边境，一墙之隔的加州发展水平碾压墨西哥，我不知道美国人是否亲墨西哥，但是至少边境的墨西哥人都拼了命的想翻过边境墙，即便在美国国内受到无数的压迫也要偷渡成为美国人。</p><p>从这一角度出发，无论中国如何加大外宣，如何强调统战价值，也没法改变当下国内有大量的高级知识分子亲美的事实。生产力落后，物质水平落后，即便能短暂胜利，长期来看也必将在意识形态的战争中失败。</p><p>当然，我能够理解国内的高级知识分子亲美，亲西方的言论，但是某些极端人士高呼逃离布尔什维克就是胜利，他们宁可去阿富汗，去墨西哥，去古巴。对于这样的人，我不否认真世界各国都有极端的反政府人士。但是口头这么说的绝大多数人，真的去了墨西哥会是什么样，我不想再叙述了，结果可想而知。</p><p>还有一些小布尔乔亚，自以为西方世界的民主自由就是臻宝，认为自己对美国的向往完全不是物质的，就是精神的，甚至为美国冠以灯塔这样虚伪的称呼，自己也为自己冠以灯塔的名号。我只能感叹其对生产力发展毫无认知，何其盲目而愚蠢。既然他们认为自己的追求不是物质的，那么我简要概括下美国的特点，自然其中剔除了所有的物质部分。</p><ol type="1"><li>小政府，基本不干预经济。</li><li>总统是选举出来的，国内有超过一个党派可能产生总统。</li><li>自由，很自由，言论自由，新闻自由，持枪自由，远比国内自由，满足他们渴望的一切自由。</li></ol><p>如果一个国家符合以上的特点，符合这些愚蠢的消极自由主义者们热爱的一切，他们就会前赴后继的想尽一切办法逃离中国所代表的布尔什维克世界，逃离社会主义初级阶段，而奔向这个国家。那么显然，这个国家不必是美国。我想说的是，这样的国家可到处都是呢！</p><p>我就知道一个国家，他坐落于非洲之角，亚丁湾旁，航运业发达，自古就是商业文明的必经之地。他符合以上的所有特点，不过就是比美国穷了一点。当然，之所以穷，可能也很大程度得益于美国的对外剥削。希望这些小布尔乔亚可以去这个国家，追求这个国家的自由民主，把他称为灯塔，而不是美国。</p><p>对了，这个国家叫做索马里…</p><hr /><p>这些宣称美国自由民主解放集权主义中国的人，他们真的有思考过中国的客观生产力和资本主义必然的对外剥削吗？当然，如果他们认知到了这一步，却仍然认为中国政府一无是处，埋怨自己出生在了中国。我的看法是，他们最好将一切怪罪于他们的父母，让他们没能出生在世界上物质最繁华的国家的统治阶级，而是出生在了一个欣欣向荣的初级社会主义国家，还需要进行广泛的生产力革命才能走向更高水平的社会繁荣。</p><p>人类社会的根本矛盾是经济利益，所谓的民族主义战争，所谓的意识形态战争，不过是经济利益战争的虚伪面具罢了。正如前文所述，一战是资本主义国家间互相想把对方变为自己的外部市场的战争，纯粹的经济利益战争。二战冠以了民族主义的旗号，冷战冠以了意识形态的旗号。结果一场俄乌冲突，赤裸裸的经济利益冲突，直接把人类的发展水平倒退回了一战水平。而冷战后的俄美矛盾，赤裸裸的揭露了人类社会的利益冲突，无疑是对东西方的共同背叛。原苏联人民认为，以前美苏矛盾是因为意识形态，如今我们都是资本主义，为什么压迫变本加厉。美国人民也受到了欺骗，以往压迫苏联是因为他们是集权主义，我们要对外输出自由民主。如今都输出成功了，为什么还有如此矛盾。普京认为，如果有人不怀念苏联，就是没有良心；如果有人想回到苏联，就是愚蠢。中文互联网上，人们怀恋苏联是敬畏布尔什维克伟大的共产主义理想，然而很多时候，前苏联国家怀念苏联，却仅仅是怀念苏联强横的国力，再没对布尔什维克的一丝敬意。伟大的布尔什维克，已经在生产力落后的东欧地区被判处了死刑。</p><p>而那些认为意识形态才是社会本质的小布尔乔亚，我只能为其叹息。</p></div></div></div><p>如果美式自由民主真的是拯救人类的灯塔，并且美国吸引人的本质不是罪恶深重的原始资本积累，那么请这位自诩灯塔的A 同学去利比里亚吧，何必去美国？如她所渴求，利比里亚的国名就来自她渴求的<strong>liberty</strong>，这个国家有和美国完全一样的宪法，仅仅是把她奉为圭臬的独立宣言上的阿美利卡改成了利比里亚而已。我祝愿她获得纯粹的自由和民主，不要掺杂一丝多余的源自掠夺和剥削的物质文化。</p><p>从上述你也可以看见，一年过去了，我仍旧很痛恨她的肉食者鄙的狭隘目光。最后想来，我们分开的原因，是因为我们不是同一个阶级的人，是因为彼此不能理解各自的阶级。而我再也无法认同她的原因，是因为现在的我已经是个彻底的布尔什维克主义者，我的想法超越了阶级，我想要解放全人类。她固然没这个想法，还是那个小布尔乔亚心态。</p><p>总之，现在回想起来，对于这段亲密关系，我倒没有什么怨言，也没有什么懊恼，甚至早就忘了那些情愫。唯一令我感到不满的是，那时的我没有如今的布尔什维克理想，没法理解阶级矛盾，她更没有，更不理解阶级矛盾。</p><p>如今的我，虽然命运似乎对这个可悲的布尔什维克主义者写下了你将孤单而度过一生的咒语，但是我坚信，我在为伟大的事业，为了解放全人类而斗争！</p><p>对于她，上帝原谅我，我真的谈不上有多么美好的祝愿。能够不加恶毒的诅咒，真的是我心地善良了…</p><h1 id="年夏天">2021 年夏天</h1><p>在绝望的<ahref="https://zhaochenyang20.github.io/2022/01/23/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/Call%20Me%20A%20Fool/#%E5%BC%80%E7%AB%AF">开端</a>之后，接下来就是2021年的夏天了。夏天很漫长，远远不只小学期。夏天却又很转瞬即逝，印象里除了煎熬和痛苦竟然没有其他内容。</p><p>夏天先是军训，军训期间其实非常不愉快。我总是间歇性亢奋，持续性低落，每天过的都不算愉快。印象里军训期间我找过A数次，那时满心以为这只是一次小矛盾罢了，并没有什么无法化解的矛盾。现在我才坚信，从我意识到阶级矛盾的那一刻开始，我和A 注定是两条路上的人，只是那时的我还囿于陈情，没能割舍那段情愫罢了。</p><p>军训结束了，真的很傻逼，从个人的角度，我真的很反感这样的活动。要说有什么收获的话，那就是军训期间认识了六班不少朋友，比如赵光宇，荃。军训完了之后，出了那个学期的成绩。不得不说，大一的确能卷出一朵花来，每门课都尽力地踏实学懂，成绩不好才奇怪。但是那时候觉得内卷这件事情让人身心疲惫。其实我现在看来，让人身心疲惫的是我不得不学习太多我毫无兴趣的课程，还要因为评分标准的问题没法绕过他，这才是让我身心疲惫的根源。从某种角度上，我很享受在我喜欢的事物上做到尽善尽美的感觉，譬如我的博客和github 上的开源项目。</p><p>那个夏天出了成绩后，我在自己的公众号上发表了自己对内卷的很多看法。现在想来，那些看法从来不错，只是不该说给一帮傻逼听。</p><div class="note success modern"><p>当我谈论自己出卖灵魂换得了绩点之后，很多人批评我，说我凡尔赛——大多数人出卖灵魂都没能换得绩点。</p><p>我的想法是——那不过是你从来没出卖过灵魂，要是你也能和我大一一样从来不打游戏，每天除了睡觉就是学，彻彻底底把灵魂出卖给上帝，甚至是出卖给魔鬼，怎么可能换不回绩点？</p></div><p>我把那些想法说给了一帮傻逼，惹来了一身麻烦，特别是被人挂树洞的感觉，真的很恶心，让我很长一段时间对于树洞这种匿名平台极度反感。其实本质上就是一帮乐子人，挺烦的，反正我很不喜欢。</p><p>找树洞的管理者删了帖子，我给他们说，你不删，我就报警了，结果他们就删了。现在我才明白，这帮管理者都在塔国，我报了警也没办法，不过确实他们也是心里觉得过去不吧，反正删了。</p><p>我后来才知道，树洞的开发者的本意就非常恶味，他想在全中国最高级的知识分子之间开展一次人类社会观察，洞察人类的喜乐哀愁，七情六欲与所有人性丑恶。老实说，调查这些事情很有价值，但是这些事情一瞬间调查完，很恶心，让我很长一段时间怀疑人性。我现在也很怀疑人性，但是我不怀疑我周围的朋友，我还是个与人为善的人，还有一丝热忱。</p><p>解决了这件事情后，我去了实践。这次实践我非常后悔，后悔的原因是我和 A都分手了，我还和她一块儿去实践，很恶心，过程让我很反胃，也有很多不愉快的事情。稍微愉快一些的事情，首先是我去找了李之端，端早已不是高三时我头脑里那个人了，多了好几分市井气息，也变得现实太多。她给我讨论了复旦的保研率，而我心里记得她似曾给我讲过她想保研去华子学哲学。我并不觉得她不好，而是世界就是这样。</p><div class="note info modern"><p>世间难能可贵，无非是少年对世界报以热忱…</p></div><p>但我和端还是好朋友，我其实很好奇如果高三毕业了她答应了我的告白，我们之间会发生什么。我当然不会认识A，可能会和陈顾俊一样，和他的对象保持数年的千里姻缘网线牵，又或者和大多数异地恋的人一样，很快就结束感情，毕竟是初恋，还是异地恋。然而，她没有，我们还是好朋友，我也记得她高三时给我的帮助。</p><p>和 A 不同，A只想着与别人相濡以沫，不如相忘于江湖。而我从来不是一个愿意和任何产生羁绊的人相忘于江湖的人。我和很多人的羁绊是缓慢淡去的，但是和A 是唯一一个断裂开的。</p><p>去上海的那次，我还和付昊天见了一面。他那是还没和他的前女友分手，我一心以为他的感情会很顺遂，一切都好，成为那么多异地恋的人里少数走到最后的人，然而他也没有。见到他的时候，我满心沉在和A的逝去的关系里，心情并不好。他的头发长了很多，我们在包图一起看书，我听了听课，看到坐在我前面的人在看宋天佑的无机化学。我又在包图的舒适区睡了一会儿，满心想着如何和A 复合的问题。</p><p>我们一起出去，在一家苍蝇馆子吃烧烤。让我感到很惊讶，繁华的上海竟然还有像成都一样的苍蝇馆子，那天吃的什么我也忘了，但是付昊天带着我骑共享电瓶车穿越交大闵行校区，兜风，还看到了交警，赶快跑，笑死我了…</p><p>结果到了 12月，付昊天来北京，给我说他和他前女友分手了。我目睹的长达八年的异地恋结束了，不免唏嘘不已。付昊天给我说，牵着她的手，就感觉已经度过了一生。但是这也是后话了，回到2021 年的夏天——之后，我从上海回了成都，又很快回了马尔康，结束了半年的飘荡。爸妈看见我失魂落魄的样子很担心，甚至外公也为我感到很难过。夏天回到了四川，我从网上的黄牛手里买了一部手机送给我爸，因为突然发现学习计算机就是不要太抄心钱的问题。</p><p>金钱观的改变可能是源于自己和 A的关系破裂有很多原因来自经济观念，我现在的经济观念彻底变了，可我觉得这都不重要了。</p><p>回四川，过了一段非常难受的日子，从没有这么难受过。那段时间暑培也没好好听，现在想来也听不懂。的确大一太菜了，对工程和开发一无所知，都去学数理基础去了。接着，北京出了疫情，我想办法赶快回了北京。虽然回北京也没做什么正经事，就是在找人聊天，治愈创伤。</p><p>从那个夏天开始，我才发现，当我再次见到A，见到那个我曾付出了无限热忱的人，心里只有无限的痛苦，我再也无法面对她，见到她就会剧烈的心痛。</p><p>小学期开学前，我把她的微信删了，删除的原因真的是因为见到她就会无比的难受，从任何角度都会无比痛苦。我删了她的微信，而后似乎还反复加回来过，直到现在彻底删了联系，老死不相往来。</p><p>小学期的记忆是破碎的，课程相关的问题都是抱大腿解决的，而我主要负责解决心理问题。</p><p>小学期学了 Qt，其实就是 C++工程实践。我自己的经验是，直接网上找黑马工程师的教学，画个一天速速刷一遍，然后直接上手项目，越上手越有感觉。千万不要抱有任何事情都要学懂的心思做事情。</p><div class="note success modern"><p>都上大学了，哪有什么日积月累的道理，都是突击速成。</p></div><p>可圈可点的是，Qt 的信号槽机制蛮好玩，和 React 的 hook 很像，但是没有hook那么智能和复杂。然后，做出一个可以对打的网络游戏很有成就感，虽然过程不是很愉快，也没学到啥东西。写了个2k 行代码，差不多了。属于是烂课，但是给分好。</p><p>唯一需要注意的是，socket 通信建议用一个 server 端，多个 client端来解决，既当运动员又当裁判很累人，开发程序也是如此。</p><p>Qt 主要的工作是 cyd 陪我的，他那个夏天给 yyjj表白被拒了，然后找我疗伤。属于是同是天涯沦落人…结果这个夏天，cyd都脱单了，草草草…</p><p>cyd 帮我 de 了很多神奇的bug，我们还一起去吃饭，看电影，很快乐。唯一的问题是，那个夏天我是在紫一度过的，因为回到紫二特别压抑，每天都想回到过去…</p><p>借用下我之前给我一个朋友说的话，如果想快点看 Python部分，可以跳过这段引用：</p><div class="hide-toggle" style="border: 1px solid lightblue"><div class="hide-button toggle-title" style="background-color: lightblue;"><i class="fas fa-caret-right fa-fw"></i><span>与 whr 的交流</span></div>    <div class="hide-content"><div class="note modern"><p>这么晚了，估计你都睡了吧。</p><p>诶，趁着你睡了，我信口说几句话，表达下自己的感受，希望能给你些帮助。</p><p>让我想想，总觉得我在分手后很长一段时间处于一个很低落的状态。</p><p>我一个人呆的时候，一直都挺消沉的。间歇性高亢，给自己打鸡血，相信自己一定会走出这次打击，相信自己一定会变得很强，然而一旦高亢的时候过了，大多时候都是低落的。</p><p>于是那时候经常找朋友聊天，哪里是聊天呢，纯粹是求助。那整个夏天，我刚刚分流到计算机系，搬了寝室，和室友也不熟。小学期的时候，每次去机房，见到她人都会极其的难受，心头一痛，我从没有这么真切的感受，心头一痛。</p><p>在那段时间，我不敢走出紫荆，不敢去机房，不敢骑车，不敢一个人独自待着。我所见到的每一处场景，都充斥着以往的记忆。要么是我从宿舍出发，一路小跑去见她，要么是我骑着车载着她一块儿上课，要么是就会见到她。</p><p>想到她的每一处，想到她的每一幕，想到她的每个瞬间，我都觉得难受到窒息。</p><p>这样的剧痛持续了整个夏天。一开始我还用酒精麻痹自己。后来一天晚上我喝了特别多，直到三点才被室友扛上了床。第二天清晨下雨我一觉醒来，觉得心忍不住的痛。我是半个成都人，成都多雨。平日里下雨天我总是很开心，像是回到了成都。结果那天下雨，我的心难掩剧痛，都不是心情了，是真的在痛。</p><p>那天上午，我一个人从床上掉下来，又踱步走到紫二楼顶，真的差点没跳下去。我都不明白是什么力量让我没跳下去，可能是我真的相信我活着还有更伟大的事物等着我，真的没从六楼跳下去。我走下楼，敲辅导员寝室的门。我说，我差点没自杀。</p><p>他们吓惨了，带我去北医六院做精神诊断。检测出中都抑郁 +精神衰弱。给我开了各种药，花花绿绿的五种。药效一个比一个强。医生说最强的一种吃了能然你马上全身疲软，没有一点想法，只想睡觉。不过副作用是睡的很久，一般得一两天，吃多了还是会死人。(我没学过生物学，不了解原理)</p><p>然后，辅导员把我带回学校，让我室友每天看着我，有啥事都给他们报道。我课也不去上，作业也很长时间没写。就这样待下去，每天基本就是睡觉。睡醒了吃饭，而后打起精神写些什么。突然想起以前了，特别难受，马上吃药。又睡了过去。</p><p>这么过了一周，我没那么难受了。但是经常做梦，要么是梦见回到了过去，要么是梦见了未来。但是梦都是相通的，无处不是她。</p><p>我还是很难受，有一天在树洞发言，幻想分流能不能可逆，我想回到过去。回到入学的那天，回到在软院的任何一刻。</p><p>那些树洞自然被人冲了，实际上后来也被人冲了。因为我又给自己打鸡血。</p><p>我那时候觉得，日子不会再差了，真的太糟糕了。</p><p>一年以后，我突然意识到：</p><p><img src="https://zhaochenyang20.github.io/pic/embed/5_12_2.jpg" style="zoom:50%;" /></p><p>我给你我看过这个图很多次吧。其实想表达的就是这种心情。原来这么时间，已经让我成为了完全不同的自己...</p><p>从去年开始，真的总结起来，就是：“你也走了很孤单的路吧”</p><p>我终于学会了和自己独处，和情绪共存，和过去和解。并不是我原谅了，而是我不在乎了。是的，我一生也不会原谅，因为所有伤害自己的人从未带有一丝善意。然而，我会不在乎。因为，那些伤害我的人和事物还停留在过去。在我接下来的一生里，他们就是那样了，不会再变化了。而我，早已不再是以前的我了。</p><p>我或许没有变好，但是我变强了。也许学业上还是很弱小，然而，心里真的是自己的巨人。</p><p>送你一段读书笔记：</p><blockquote><p>他想要成长，他必须蜕变。他不愿意再停留在过去，他想把跟自己的过去相连的东西都抛弃。如果他没有告发麦克，没有离开凯西，生活还会像往日一样继续，但他的心已经不在那里了。他已经要离开了，什么都留不住他了。他的灵魂会飞走，尽管他也不知道自己想飞到何处。他唯一知道的是，不能再在这里停留。</p><p>成长的蜕变，看似蝴蝶出茧，把丑陋的茧留在原地，自己就能翩翩飞走。但实际上没有那么容易。你和你的过去是紧紧地连在一起的，血肉相连。如果你想要挣脱出去，你一定要撕裂自己的肉，让自己的血流出。当你从过去的自我中爬出来时，你必定已是遍体鳞伤、血肉模糊。这就是成长的残酷现实，这就是青春的丑陋本色。</p><p>对抗这个世界很容易，但对抗你的过去、对抗你自己，背叛你的过去、背叛你自己，就没有那么轻松了。</p><p>因此，美国作家约翰.厄普代克说；“成长就是背叛，没有其他的道路。没有离开，就没有到达。”</p></blockquote><p>絮絮叨叨说了这么多，如果你看到这里，感谢你的倾听。如果你没看完，我也会写进日记里。</p><p>认识你快两年了吧，虽然不太熟，但是真的佩服你很厉害！</p><p>如果有什么伤心难过的事情，很欢迎来找我谈谈，且作安慰。</p><p>"在来到这里之前，你也走了很长，很孤单的路吧”</p><p>是的，很长，很孤单。但是走过了之后，我发现我早已不同了。</p><p>"你将孤单而度过一生"，是的。"我或许会很孤单，然而我会坚持地走完这段孤单的路”</p><p>直到有天会遇见等候已久的另一个人。那人会说，"在来到这里之前，我也走了很长很长，很孤单很孤单的路呢”</p><p>BEST WISHES</p><p>YOURS SINCERE EREN</p></div></div></div><p>接着是 Python 训练，不得不说，我一节课没听，一点影响没有。</p><p>实际上整个小学期我也没听课，一半的时间在北医六院和清华小清心瞎跑，开了1k多的治抑郁的药，还有特别强的强效镇静药。给我开药的医生笑着给我说，他们最擅长就是治疗失恋…</p><p>回到 Python 上，我那时只是觉得有些意思，但是很多道理自己不懂，requesthtml json django 啥的都不太理解，完全不会配环境，电脑上有 conda 也只用base，然后 wsl 啥的都不会，居然是跑的 windows 指令。但其实 python指令在哪儿跑都无所谓，所以小学期能凑合，在实验室打工半年才彻底理解了各种环境的关系。</p><p>Python 做了一次爬虫和 django，中间找 c7w 帮我解决分页器，找 lambda帮我写了 boostrap，找 ayf帮我写了爬虫。我主要负责抱着我的电脑在华子到处跑，换 ip。b 站封我的 ip一次，我就换个地方，打游击战。据悉爬的最厉害的一天，整个紫二都上不了 b站。</p><p>听说 csy 爬了 p站，不知道结果如何。我实在不敢想象如何给助教展示自己的 django…</p><p>说起来，伯阳爬了很多嘉心糖视频，我爬了好几个高校的视频，对比了下每个高校的视频简介和评论区出现卷字的频率。得到的结论貌似是北大&gt; 华子 &gt; 交大 &gt; 复旦 &gt; 南大 &gt; 人大….</p><p>Python还很好玩的，要我说，就该好好听暑培讲课，然后理解清楚爬虫在干什么，有清楚的逻辑。然后学习优雅的Python 码风。</p><p>一年前，我还听不懂暑培，一年后，我来讲暑培。这次是我讲Python。一年过去了，Python 成了我的母语。</p><p>小学期平平无奇的结束了，其实对我最艰难的是和自己的内心鏖战。心情从来没那么差过，最难受的时候总是有自杀的念头，得服用强效镇静剂才能克服。实际上四周只有两周在写代码，其他时候都在疗伤。物理意义和心理意义都是。</p><p>开学前看到了小学期成绩，军训 3.6，小学期本身4.0，还挺开心的，这么难的心里困难都克服了，很佩服自己（抱大腿的能力）。</p><h1 id="年秋季">2021 年秋季</h1><p>痛苦记忆的持续…</p><p>开学之初，发现在任何一节课上见到 A还是会让我极度难受。然而更要命的是，我居然还和 A选的课一模一样，直接破防。</p><p>开学第二周，彻底蚌埠住了，手动调了我所有的课表。如果不能和 A错开的课，就上网课。一开始我还上网课，后来直接腾讯会议录屏，然后找个时间二倍速听课解决。万万没想到，这是我大二学习的基调。</p><p>大一我还特别乖，所有课都去听，听不懂都去听，上课认真做笔记，偶尔摸摸鱼，有问题都去问老师。到了大二，所有课，能翘就绝对不去，除非必须签到，比如软工这种彻头彻尾的傻逼课。或者像图形学这种课，先把雨课堂答案搞到，然后直接到了对应的PPT 就把答案交了，每节课都是优秀学生。</p><p>总之，从大二开学，我就走上了再也不听课的不归路。一天不听课一天爽，一直不听课一直爽！</p><p>关于课程的测评，我待会展开写，具体谈谈大二上的感受——断裂的自我与不断的自我修复。</p><p>大二上参加了很多社工，一开始有乐学美工组，接着有科协兴趣小组，科协技能文档，课咨委，答疑坊小程序开发，新生志愿…</p><p>这些社工里面，除了乐学不是很有意思，其他都挺好的。主要是乐学，这帮人主要是做美工的，而我其实是对文字的艺术很感兴趣，和他们没啥关系。最后像做个清华重开模拟器，结果没做成，项目黄了，我就走了，没意思。</p><p>兴趣小组去了一两次，自己太菜了，跟不起走，就没去了，后来兴趣小组本身也凉了，今年咱网络部还得重新搞。</p><p>技能文档挺好的，把大一卷的 OOP 笔记 merge了进去，寒假还写了一篇推送。据悉是科协公众号有史以来阅读量最高的推送，很多人说我文笔很好。我的评价是，这个人的青春伤痕文学一直都可以的。</p><p>课咨委，很有意思，调研了很多事情，虽然开会比较繁琐，但是我很喜欢这种参与改革的感觉。说到底，我热衷于改革的原因就是布尔什维克主义啊，改革落后的生产制度和生产力之间的矛盾。确实也做出了些成果，还给了4k 人民币，相当于时薪 100，还不错…</p><p>小程序还行，说起来和答疑坊部分官僚主义者有些矛盾，真的很反感这帮官僚主义者，让我很反胃。虽然当时状态不好，但是轮不到某些混蛋用保护我的口吻来PUA我，说害怕我伤害被答疑者和自己。我为答疑坊干活，更多是出于金钱的诱惑和报答雷哥还有义淮哥的知遇之恩啊，真的非常感谢他们！</p><p>说起来，和答疑坊的部分官僚发生矛盾后，我才发现，我真的是太信任朋友圈的某些傻逼了，大多数的人都恨不得我永堕无劫之境，恨不得我死罢了…我那段时间删了很多人的微信，现在都有很多没有加回来，也没必要了…不过这么做真的不好，从那之后，我从义淮哥那儿学到了，少在朋友圈发表言论，成熟的人朋友圈频率都低于1 月 1 次。</p><p>和答疑坊闹掰之后，义淮哥来安慰我，给我推荐了好多书——《你不可不知的人性》《蔡康永的说话之道》等等，特别好的书，教会了我很多为人处事的道理…</p><p>我那之后还看了《浪潮之巅》，给了我很大的启发。让我看出清楚了为什么信息学是先进生产力，也让我对塔国的工业界产生了巨大的向往，逐渐决定了想要去留学然后工作的心。</p><p>回到社工上，和雷哥干活很快乐，学到了不少做人的道理，还见识了很多业界情况。</p><p>新生志愿没啥意思…</p><h2 id="奖学金答辩">奖学金答辩</h2><p>我都快忘了这茬子事情了，但是当时给我很大震撼。第一是周围人太强了，我真的没什么很明显的优势。现在觉得，我的优势大概是执着和决绝。可是这些优势给了我莫大的痛苦。</p><p>答辩准备了两天，发现自己大一除了卷了绩点啥也没干，社工为0，科研为负数，两个实践。</p><p>多亏了高中作文的文笔还留着，当众张口乱吹即可。今年要是还能答辩，打算继续试试看。我个人倒是觉得答辩很重要，棕榈的奖学金答辩自己也是全靠一张嘴。</p><p>认识了很多优秀的人，才发现自己不过如此。</p><p>答辩前觉得自己乱杀，结果被乱杀了一通，当时觉得自己绩点优势明显，结果别人就比我低了0.00 个绩点，草草草</p><p>不过现在想来，和我一起去的，大二一听，就知道全在吹牛了。没事，都大三了，我吹牛的本事可是颠覆性进步。</p><h2 id="选择">选择</h2><p>大二上坚定了想要出国的决心。其实决定就是在一瞬间，因为我突然意识到了，我可以远离人群，过上孤单的日子，我可以出国了。不过更本质的原因，是我很反感国内的阶级矛盾。具体的例子可以看<ahref="https://zhaochenyang20.github.io/2022/01/09/%E5%87%BA%E5%9B%BD/%E6%B2%99%E6%BC%A0%E9%87%8C%E7%9A%84%E7%BA%BD%E7%BA%A6%E5%9F%8E/">这篇文章</a>，不过原文因为政治相关，所以我加了密码。这里勉强摘录一段：</p><blockquote><p>在中国，这个社会太稳定了。北京上海这两座可憎的吃人的城市，住宅的稀缺性阻挡着所有人进入。同时还有严格的户籍、教育制度，这就像是在非洲建起了纽约，富丽堂皇允许你去贡献，但是你永远无法享受他的福利，而他却因为你的奋斗而跻身世界一流城市。</p></blockquote><p>总之，我坚定了出国，不过现在出国的心就是想要去学习最先进的生产力和生产制度，等到时机成熟后回国改造国内的社会。</p><h2 id="实验室">实验室</h2><p>进入实验室打工，一开始啥都不会，现在也啥都不会，学会了如何摸鱼划水摆烂…</p><p>真的不会科研，但是科研能学到很多东西。AIR很好，员工福利极佳，小老板昊哥巨强，主要还是我太菜了，不适合搞科研。</p><h2 id="娱乐活动">娱乐活动</h2><p>看书，看了很多书，《浪潮之巅》《你不可不知的人性》《蔡康永的说话之道》，还写了笔记。逐渐产生了对人类社会的完整认知。</p><h2 id="活动塌缩">活动塌缩</h2><p>因为不想去记忆里难受的地方，加之买了键盘，显示器，鼠标还有mac，我几乎每天除了去参加跑协活动，都待在紫二，还行。每天午休和晚休 4小时，再加上晚上睡 6 h，其实一天能休息 10 h，挺好的。</p><p>再也没去过四教，去四教很心痛。那学期去学堂也是，不过现在没感觉了。A对我的影响持续了非常久。</p><div class="note danger modern"><p>和她分开后，我才发现，一段不到一年的亲密关系，几乎需要我用一生去治疗裂痕。</p></div><h2 id="大雾-a-">大雾 A-</h2><p>一开始选了 ylx，后来因为和 A还有一帮计算机系的某些傻逼一节课，就退了，听 lambda 和刘文瑄的，选了dst。期中考的蛮好，拟合课件蛮成功，96分，下半学期从来没去过教室，再也没见过老师。期末考前又拟合一波，期末不咋地，大雾A- 草草收尾…</p><h2 id="dsa-b">DSA B</h2><div class="hide-toggle" style="border: 1px solid lightblue"><div class="hide-button toggle-title" style="background-color: lightblue;"><i class="fas fa-caret-right fa-fw"></i><span>DSA 后记</span></div>    <div class="hide-content"><div class="note modern"><p>我后来才知道了我 DSA 吃了 4 分 3.3 的原因。摘录自我和邓公的<ahref="https://zhaochenyang20.github.io/2022/07/23/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/talk_with_dg/">交流小记</a></p><blockquote><p>邓老师最后给我讲了讲我喜提 3.3的原因，其一是考试成绩不佳，其二是我的参与分在尹老师课堂被记为了 0分。虽然之前有学长给我说，我能够严格按照邓老师课堂的评分标准来评分，然而似乎的确不太能这么做。我感到心里一时很爽然，又觉得解脱了一些心结。</p><p>我给邓老师说，其实的确影响不大，我感觉在成绩上与人内卷的边际递减效应太过严重，我大二学年的成绩不如大一，然而我的确感觉有了前所未有的成长。</p><p>虽然把 DSA 从 3.3 抬到3.6，我几乎能够让我两年在班级的排名和年级的排名除二，然而这会对我有什么很本质的改变吗？我还是我，我的能力是我的，我的未来是我的，我的故事是我的，我将会继续前进下去。DSA这门课的成绩就这样吧，我已经感觉无所谓了。一方面，我的绩点焦虑已经被治好了。另一方面，除了绩点的条条框框，这世界还有千千万万。</p></blockquote></div></div></div><hr /><p>DSA 时隔一年后我才得知了那时的事情，下方是原本的总结：</p><p>惨死…上大学以来对我绩点造成最大影响的课，吃了四学分3.3，不过这么一想，A的绩点一定不好看，但是关我什么事情呢，我们本来就不是一个世界的人…</p><p>邓公讲的极其好，课程太难了，平时好好听了，期末也来不及复习，而且作业也很难，最后期末考的很糟糕，吃了第一门这么重的课3.3…</p><p>和邓公讨论了很多问题，从学业到选择，很受启发。关于邓公，可以看看<ahref="https://zhang-ming-rui.gitbook.io/when-rocket-launches/er-da-xue-chu-qi/jiao_liu_suo_ji_er_2014_2014_deng_jun_hui_lao_shi">这篇文章</a>，写的很客观。</p><h2 id="汇编-a-">汇编 A-</h2><p>zyh 讲的西撇，全靠自学CSAPP，听回放，问人…期末之前拟合了课件，好好学了一周，考了个 A-…</p><p>作业比较难，虽然这课才是体系结构入门，但是比数电好了无数倍，数电真的傻逼。听中介老师说，北大智能系学生都要学CSAPP，可以想见这门课的分量，而且学懂 CSAPP就足够体系结构入门了。PS：北大智能系学生不用修大四原理，听说是上两到三学期CSAPP，把一整本书扎扎实实学完。这让我越发觉得高考完了就该去隔壁信科然后去智能系。虽然智能系课也很烂，但是还是我喜欢的内容。就像我觉得贵系的人智导和人神其实和大多数课程一样，讲的内容还有待改善，但是我还是很喜欢（相比一系列你知道我想说的课）。</p><p>整体上，我对汇编（一字班的计算机系统入门）还是评价比较好，毕竟有 CMU15213 保底。听恩贤说 CMU 任何 track 的 MS入学第一个学期都要上这个课，不愧是宇宙第一技校。</p><p>这课大作业比较好玩，网上解析很多了，照着抄一遍都很有收获，这是我非常佩服CMU 的一点。CMU 的作业，你抄一遍都有收获，THU的作业，你做一遍都觉得反胃…PS：我的 attacklab 开源在了知乎上，有了 60多收藏，而且每年冬天都有很多人来收藏，楽</p><p>最后，讲个笑话——贵系很多课都有深厚的海外功底，但是老师基本还是要把海外的PPT 汉化的。比如，人家 PPT 上的数组名叫 UCB MIT CMU，国内还是要汉化为THU PKU 啥的。汇编是个例外，上课听见张老师讲，现在 CMU 数组 xxxx，而 UCB数组 xxx，给我听的挺楽的。</p><h2 id="自动机-w">自动机 W</h2><p>退课，考完期中，考的不咋地，87分，但是主要是后半学期压力太大，进了实验室事情太多了，加上坚定了想要出国，不在乎保研了，无所谓，毕业就行，自己不擅长的退课保平安就好了，大四精神PF 就行。</p><h2 id="游泳-a">游泳 A</h2><p>好课，老师挺烦的，考完期末就把我微信删了。老师删了我，我觉得他极度没素质，不过我删了别人，别人也会觉得我没素质吧。</p><p>大二上长跑12.22，差两秒满分，游泳满分，很舒服。别人周一早十在上汇编，我在游泳…</p><h2 id="多音-a-">多音 A-</h2><p>好课，罗薇老师讲的极其好，只有两个作业，我写了一个<ahref="https://zhaochenyang20.github.io/2022/01/08/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E9%9F%B3%E4%B9%90%E4%B8%AD%E7%9A%84%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/">和DSA 相关的作业</a>，然后 pre 随便水了水，给了 A-。</p><p>可惜这样的好课就是要认真听的，但是罗老师完全不在乎，我翘课一学期，去了两次，第一次，和期末展示…</p><h2 id="马原-a">马原 A</h2><p>王代月老师人很好，但是讲的太离谱了，基本的马克思主义原理，我啥都没听进去。直到大二下我才彻底掌握马克思主义原理。</p><p>随便卷了个pre，然后做了一次主持人，找老师讨论了两次问题，期末考试和张煜一起写的，给了我A。</p><h2 id="srt-a">SRT A</h2><p>和自己高中学姐一起做的项目，很有收获，比起系里的垃圾学术新星和 SRT好多了，很实在的项目。做了个日语语料库，主要就是数据分析 +爬虫，本来还想 RNN 分析下情感的，结果完全卷不过工业界，遂放弃。</p><p>搞了个 <ahref="https://github.com/zhaochenyang20/Analysis-of-National-Branding-Strategy-from-China-Japan-Media">SRTrepo</a>，可以看看。</p><h2 id="复变-a">复变 A+</h2><p>这是我拿过最侮辱我的 A+。杨大伯讲课还行，关键是期末考试占 100%的分，真的离谱…</p><p>理论上只用去一次课就行了，我还是去了一学期。我的建议是，期末前最后一节课去一次，然后把考纲背下来，就可以A+ 了…</p><p>这学期我还帮人期末突击复变，发现自己还没忘完，但是复变对 CS真的没有一点鸟用…</p><p>来个经典老图：</p><p><img src="https://zhaochenyang20.github.io/pic/embed/5_10_3.jpg" style="zoom:50%;" /></p><h1 id="冬天">2021 冬天</h1><p>干了很多事情，决定了出国的细节。</p><h2 id="选择-1">选择</h2><p>不得不说，这是上了大学后第一个没有浪费的假期，虽然做的事情和一开始的期望很不一样，但是很有价值。按照我一贯的观点——选择比努力重要——那么这个假期，我做了无比重要的事情——选择。</p><p>这部分内容，完全写在了<ahref="https://zhaochenyang20.github.io/categories/%E5%87%BA%E5%9B%BD%E5%BF%83%E8%B7%AF/">出国心路</a>里，希望不久的将来，这些资料能为贵系改革touch a torch</p><h2 id="认知">认知</h2><p>这里我想谈两个认知，第一是自我认知，这种认知是<ahref="https://zhaochenyang20.github.io/2022/02/03/%E5%87%BA%E5%9B%BD/%E7%94%B3%E8%AF%B7%E5%9B%9E%E5%BF%86%E5%BD%95/#%E4%B8%AD%E4%BB%8B%E7%A2%B0%E7%93%B7">在再来人那儿碰完瓷后</a>产生的。</p><h3 id="为什么想出国">为什么想出国</h3><p>参考<a href="未来">未来</a>部分。</p><h3 id="社会学认知">社会学认知</h3><p>在这个寒假，我初步建立起了完整的客观唯物主义价值观，能够对社会问题有更加深入客观的理解，不会被阴谋论和臆测带偏节奏，哪怕对于中国房市这样以往深恶痛绝的事物也有从社会学、经济学和历史学角度的认知，而改变了以往对中国三座大山的彻底敌视。</p><p>寒假主要的社会学认知在于</p><ul><li><p><ahref="https://zhaochenyang20.github.io/2022/02/02/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E9%92%A2%E9%93%81%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84/">对双元革命的理解</a></p></li><li><p><ahref="https://zhaochenyang20.github.io/2022/02/04/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E7%A4%BE%E4%BC%9A%E8%BE%BE%E5%B0%94%E6%96%87%E4%B8%BB%E4%B9%89/">对社会达尔文主义的反思</a></p></li><li><p><ahref="https://zhaochenyang20.github.io/2022/01/31/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E6%84%9F%E8%B0%A2%E9%99%88%E8%99%B9%E4%BC%8A%E4%B8%BA%E4%B8%AD%E5%9B%BDAI%E5%81%9A%E5%87%BA%E7%9A%84%E8%B4%A1%E7%8C%AE/">个人学术发展与子女教育的思考</a></p></li><li><p><ahref="https://zhaochenyang20.github.io/2022/01/14/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E5%A4%9A%E5%B7%B4%E8%83%BA%E5%B7%A5%E4%BD%9C%E6%9C%BA%E7%90%86/">对于多巴胺戒断的认知</a></p></li><li><p><ahref="https://zhaochenyang20.github.io/2022/03/08/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E5%A6%87%E5%A5%B3%E8%8A%82/">对于中国女权运动发展的认知</a></p></li></ul><p>还有一些颇有价值的社会认知资料，诸如读书笔记。整合在<ahref="https://zhaochenyang20.github.io/categories/%E4%B9%A6%E6%91%98/">书摘分类</a>当中，而b 站上许多精彩的视频，也收录在了 <ahref="https://zhaochenyang20.github.io/2022/02/03/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/movies/">movie博客</a>当中。</p><h2 id="探索">探索</h2><h3 id="家人">家人</h3><p>实际上家人才是最重要的，然而我总是忘记写，最后补在最开头。</p><p>寒假出于疫情，更是害怕和爸妈因为出国的事情争吵，所以没有回家过年。</p><p>除夕附近还很想念亲人，最后觉得独立在北京过年还行，也和爸妈一直在联系家常，没有让他们抄心，过年也给其他亲人送了祝福。</p><h3 id="科研">科研</h3><p>寒假在 AIR 的工作主要是调参，然后为了 ECCV的投稿做了一些准备，不得不为自己尚未对 CV 产生自己的理解感到遗憾，而torch 仍旧是自己的心病。</p><p>寒假里对组内的工作有了了解，从鹏飞、雪儿姐、田哥、寅君学长和昊哥他们那儿对于学术界的规则与残酷产生了朦胧的认知，对于未来出国后的选择有了更多认知。</p><h3 id="锻炼">锻炼</h3><p>寒假坚持了很久锻炼，开学当然没法这么玩了，但是的确每次锻炼都很舒适，可惜没能主要练习短跑和引体。</p><h3 id="社工">社工</h3><p>寒假的社工很多，占据的时间远超想象</p><div class="hide-toggle" style="border: 1px solid lightblue"><div class="hide-button toggle-title" style="background-color: lightblue;"><i class="fas fa-caret-right fa-fw"></i><span>寒假的社工</span></div>    <div class="hide-content"><div class="note modern"><ul><li><p>情系母校——写了<ahref="https://zhaochenyang20.github.io/tags/%E6%88%90%E5%A4%96/">三篇推文</a>，进行了<ahref="https://www.bilibili.com/video/BV1Hu411d756?spm_id_from=333.999.0.0">一次讲座</a>，push了 happy 组织工作，同时为全队建立了数据备份，从 <ahref="https://space.bilibili.com/176873733/video">b 站</a>到<ahref="https://cloud.tsinghua.edu.cn/d/629d34437a39481183c1/">云盘</a>，同时在成外的候鸟计划群里解答了很多问题，讲解了一些观点，认识了很多学弟学妹。除了情系母校，还和一多等中加班的成外校友建立了不错的connection，将来去了加拿大亦或是出国了会有更多的互助。</p></li><li><p>支教——从想要摆烂，到成为了小组的主要策划人，<ahref="https://lead-alley-0ca.notion.site/71d9200633f147b59c7152b866d70628">完善小组文档</a>，帮助组长完成了工作，最后全组的核心成果总结为了<ahref="https://cloud.tsinghua.edu.cn/d/4a3d224d0fe34cf09b5b/">云盘资料</a>，在这个过程中认识了可爱的组长小姐姐，并且越发感受到了自己的为人处事和社交能力，至于是否有管理能力还有待考量</p></li><li><p>答疑坊——这部分其实和软工小组混在一起，自己学习了雷哥搭建的文档思路，组织了小组第一次开发会议，并且多次push 我的组员们。个人的学习成果总结在了<ahref="https://zhaochenyang20.github.io/categories/%E5%89%8D%E5%90%8E%E7%AB%AF/">前后端分类</a>，而具体项目不便透露。</p></li><li><p>课咨委——为上个学期的采访工作进行了收尾，对课咨委这项贵系的改革 pivot任务充满了期待，希望自己能够为贵系改革提供自己微薄的贡献，而自己的<ahref="https://zhaochenyang20.github.io/categories/%E5%87%BA%E5%9B%BD%E5%BF%83%E8%B7%AF/">出国心路</a>希望能有幸为以后的贵系人touch a torch</p></li><li><p>酒井科协——在 yyj 和 holder c7w 等同学的帮助下，<ahref="https://docs.net9.org/languages/c-oop/">大一下学期所写的 OOP文档</a>成功部署到了 docs 9，由于自己在编写规范和 git部署上的能力不足，给组员产生了很多不便，希望自己之后的工作再接再厉。另一方面，oop文档的 readme算是对以往的一些事情做出了自己的和解，一生太短，来不及犹豫，诚然如此。最后，为技能文档的推广写了文案，纯粹出于情怀而写，虽然花费了一整天，然而非常开心。文案在用语部分参考了c7w 和夏老板的意见，进行了修改。最后的推广效果个人感觉非常开心，阅读量6000+ ，在贵系人的朋友圈刷屏，同时也在一字班的群里进行了推广。我的 oop文档也得到了一字班同学的更正，希望这份文档能为 oop 课程生态做出贡献。</p></li><li><p>乐学——很遗憾而又很快乐，退掉了这份社工。的确自己不喜欢这些宣传能力和艺术设计能力，最后期待已久的清华重生模拟器因为开发风险而被停掉，虽然对我而言开发此事还有所难度，然而被停掉实在遗憾。自己也不喜欢追求所谓10 w+ 的阅读量，技能文档文案 6000 +的阅读量已然让我很快乐了。最后退了这份划水一学期，想干活却没活干的社工。</p></li><li><p>push 了车队同学打卡，也 push了两个小学弟完成微积分作业，最后给一些朋友和一字班同学分享了我的<ahref="https://cloud.tsinghua.edu.cn/d/6dbd3f2689ca4addbebb/">史纲</a>和<ahref="https://zhaochenyang20.github.io/2022/02/03/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E4%BA%94%E9%81%93%E5%8F%A3%E4%BD%93%E6%A0%A1%E7%A7%8B%E5%AD%A3%E5%AD%A6%E6%9C%9F%E7%94%B7%E5%AD%90%E4%BD%93%E6%A0%A1%E4%BD%93%E8%82%B2%E8%AE%AD%E7%BB%83/">体育资料</a>，希望我的两个小学弟将来能建立成外的云盘</p></li><li><p>唯一划水的是实践，在一个台湾同学带队下去北京特斯拉玩了一圈，感觉还不错，自己还蛮喜欢特斯拉，最后写了<ahref="https://zhaochenyang20.github.io/2022/01/10/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/tesla/">一篇总结</a></p></li></ul></div></div></div><p>社工上追求完美主义无法避免，那么解决的方案是减少项目和放平心态</p><h3 id="社交">社交</h3><ul><li><p>认识了不少新朋友，然后在出国这件事情上有了更多队友</p></li><li><p>和之前的朋友们一直保持着良好的联系</p></li><li><p>值得高兴的是，除夕夜给诸多师友<ahref="https://zhaochenyang20.github.io/2022/01/31/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E6%96%B0%E5%B9%B4%E7%A5%9D%E7%A6%8F/">送上了祝福</a></p></li></ul><h3 id="srt">SRT</h3><ul><li><p>非常遗憾，假期开始就在 push瑞涵姐，结果到了写总结的时候都还没开工。</p></li><li><p>在开学前最后两周一定完成寒假任务，决然不可拖累大家。</p></li><li><p>实际上很快就做了不少活，<ahref="https://zhaochenyang20.github.io/2022/01/17/CS/%E5%85%B6%E4%BB%96/SRT/">具体的工作在这儿</a></p></li></ul><h2 id="学业">学业</h2><p>上学期的学业由于情感和社交等事情的重创，在开学一个月后才恢复了正常。然而上学期融入了社工和科研，加之花费了众多实践在读书、反思、自我认知和做决定上，因此花费在学业上的时间客观减少，学业成绩发生了很大的下滑，虽然仍在可控范围内，然而需要引起高度的注意。</p><p>上学期起初是由于心理原因，很多课程没法线下上课。到了后期逐渐发现了寝室学习+ 车队回放的妙处，这学期将继续尝试。</p><p>本学期的课程以科研 + 必修 +英语为核心，虽然压力很大，也有很多自己的期望，然而还是希望自己能够做到彼其于世，未数数然也！</p><h2 id="科研-1">科研</h2><p>上学期在 AIR 对 CV有了朦胧的认识，这学期继续坚持，并且以后的科研也该做到每一次探索以一个项目或者一篇论文收尾。</p><p>这学期的探索结束后，希望 summer 2022能够去微软亚研院进行期盼已久的实习。</p><h2 id="社工-1">社工</h2><p>时间和精力有限，学业科研社工 6 ：3：1 到 7：2：1</p><ul><li>答疑坊两周一次 + 小程序开发</li><li>课咨委保持工作，不必花费太多</li><li>技能文档小组，希望能够完成期待已久的 torch 入坟</li></ul><h2 id="探索-1">探索</h2><h3 id="家人-1">家人</h3><p>上学期终于一改报喜不报忧的坏习惯，每天都有和爸妈打电话，主要是聊日常，还算开心。印象中经常下了DSA课，在周三早十回宿舍的路上和爸妈打电话。还是蛮幸福的，虽然爸妈很多时候没法理解我，但是交流本身就是件珍贵的事情。</p><p>以后去交换而后出国，能物理意义陪伴爸妈的时间越来越少，还是要坚持多聊聊家常和近况。</p><h3 id="阅读">阅读</h3><p>坚持每天阅读，然而每天不得超过半小时，且记录笔记也要算入阅读时间</p><h3 id="人际关系">人际关系</h3><p>践行非暴力沟通，和朋友们保持良好的connection，尽量不要让感情、亲情、友情等相互影响，保持独立</p><h3 id="选择-2">选择</h3><p>不断地探索自己的科研能力，并且和更多决定出国的朋友进行交流</p><h3 id="写作">写作</h3><p>已经将读书笔记归入了阅读时间，那么除开读书笔记之外的阅读时间不应超过半小时</p><h3 id="锻炼-1">锻炼</h3><p>坚持包括体育课在内的每周三次锻炼，锻炼应该具有目的性，以练腿、引体和卧推为主，不要浪费在长跑上</p><h1 id="春天">2022 春天</h1><p>经过了 2021 年的破防，2022的我已经强大了无数倍——确实强大了很多，但还是很菜…</p><p>先扯淡吧，这学期实验室完全摆烂，啥都没干，因为软工太特么离谱了，我从寒假开始卷软工，开学还是非常痛苦。希望软工能平安A-，祈祷一个 A，结果听文琦说 A 很难，A+ 不指望，完蛋。给我 3.6，我就冲进fit 楼把给分的人宰了。</p><p>软工占的工作量太大了，一学期写完软工，基本很难干其他活了。社工的话，课咨委，答疑坊，programbuddy 干了些，简单写写个课程测评。</p><div class="note success modern"><p>终于 TNND 出分了，我草，吓死我了，赶快写总结，过了今晚就没法写了…</p></div><p>大二下因为软工和科英的事情，几乎没有干实验室的活，摆烂一学期。社工干的蛮多，答疑坊，课咨委，科协啥的。主要还是前两者，这学期初的时候加入了答疑坊的答疑队伍，现在答疑317小时，虽然大多都是我的小弟和朋友给我填的，但是的确干了很多，比如帮人从头到尾指导程设作业。课咨委调研了软工，彻头彻尾的傻逼，在软工细说。科协的话，我成功从网络部黑户跃升为了运营部副部长，挺搞笑的，和覃琦超继续一起干活。</p><p>最后，这个学期因为疫情反复，最后一段时间彻底上了网课，学校还给了两门课的PF 机会，我本来想退掉体育，然后发现教务不靠谱，给我记漏了…我 PF了数电和概统，概统可能有点亏，但是数电稳赚。我同学数电原始分 64， 给了2.3，我原始分 61，我草，给了 P，好爷数电 pf 了还 F 了，五班一同学没 pf还 F 了，真的惨…</p><p>疫情特别扯淡，导致我很久没去实验室。虽然我平时就听回放，但是全年级上网课还是很少见，老师不准进来，学生到线下听网课，傻逼吧。我和鲁大师在中厅度过了挺长一段时间，他看着我卷，我看着他卷。</p><h2 id="健美-a">健美 A</h2><p>好课，嗯是撸铁一学期，最后期末了考试也变简单了，俯卧撑 50个当引体向上 21 个。录了个贼社死的视频…</p><p>老师给分蛮好，最后视频特别摆烂，我和一个未央电电的同学一起录的，给了我96，实际上特别搞笑。我一开始完全做不完 50 个俯卧撑，于是先做 30个，然后手撑起来，就在那儿停着休息，继续录屏，然后休息几十秒，继续做。最后华为手机先把休息部分四倍速，再四倍数，看着就像手抖了一下，笑死我，还给老师解释说我手抖的厉害，哈哈哈。差点没找美院同学帮我剪视频。</p><p>总之，是好课，而且赶上了期末考试不用引体向上，短跑也没了，白捡一个A，这样算上来，我体育一学期 A-，两学期 A，一学期 B，除了 yty的傻逼篮球，其他都还好…</p><p>下学期还有游泳提高课，这暑假都深水区完了很久了，挺好玩的，每 1h 能游1km…</p><p>健美课还认识了一帮好朋友，主要是健美教室特别简陋，举单杠得三个人护着，于是四个人一组，一边聊天，一边举单杠。我总是多做几个，于是队友开玩笑，把偷偷多举几次单杠的行为类比为朋友圈里的Python 广告——室友都在打游戏，我在偷偷学 Python，卷死他们...</p><div class="note info modern"><p>大家都在摆烂，就赵哥偷偷在朋友圈学 Python...</p></div><p>久而久之，学 Python 就成了我们班一个梗，而且全班都知道我在偷偷学Python。刚好我这学期人智导还给班上讲了 Python，真就 Python和我缘分不浅啊。</p><p>体育小组的朋友有一个国际生，叫做Michael，中文名是米格尔，父母是温州人，自己在西班牙出生，和我讨论了很多欧洲好玩的话题，还讲了自己如何进入国内，他说再不进入国内，就打算从华子退学，去英国重开了。还有个好朋友是9字班降转到法学院的，我们管他叫法师，法师人很魔怔，朋友圈乌烟瘴气的，但是人很好玩。</p><p>还有个未央电的朋友，和 bb是一个班的，和我两学期体育课一模一样，是个答疑坊大佬，人超级好，很好玩，反正健美课课程体验蛮不错的~</p><h2 id="图形学-a">图形学 A</h2><p>虽说是门<del>给分</del>不错的课，但我水了一学期，上课都在学科英。早晨起床，迷迷糊糊刷牙，走在食堂的路上看看有无题目，然后回来补觉。到了PPT 对应的地方直接答题，从来没错过，每次都是优秀学生。</p><p>我真的栓 Q，感觉讲的蛮一般的，大量的讲 jittor 和深度学习，真的是 CVCG 不分家，不过传统图形学讲的很水。</p><p>作业，你说他布置的好吧，反正文档还可以，你说他不行吧，就是拧巴的难受，各种bug 很折腾，而且必须用 C++的框架，搞得我母语性厌烦。助教要求还很严格，最后出的图连斯坦福兔子的头顶高光都得一样，我一开始吃了两次憋，特别烦。一共四次小作业 +一个大作业。一开始小作业我还读文档，认真抄同学的，自己还改改。最后两次直接恩抄，开个git，改一行 commit 一次，然后把 lambda的代码改的面目全非。我还挺怕查重的，结果一点不查重。说到底，作业学会了如何用git 抄代码，这种方法在四子棋更是贯彻的淋漓尽致，笑死我了。</p><p>小作业检查特别离谱，我不喜欢，简直是用 numpy 逐像素在对拍，后来lambda 写了对拍器，听说是计 02 的孙天乐写的源码，我觉得NB。反正图形学小作业两分一个台阶的扣，而且不调分，我扣了四分，一开始焦虑惨了。</p><p>大作业因为自己没听一节课，没法做传统大作业，以前还有写 CUDA加速的，我对这个还蛮想去试试，毕竟实验室的 CUDA我从来没调通过，结果出了算法挑战大作业，真香。直接抱 lambda 和 c7w的大腿，他们负责了所有实验，我负责摇旗助威写报告，真是愧对，最后算法挑战赛草草得了个满分，走了。</p><p>看上去助教算法挑战赛给分极好，因为他直言应该没人复议成绩，草，就是 45分，毕竟过了 baseline 就给 35，然后还有报告分和开源分。</p><p>开源分把 c7w搞破防了，他最后一次作业开源没写好，扣了两分。我觉得纯傻逼，我们这么多人，c7w开源工作绝对全年级前三的水平。这就显得小作业 nt 了，用 jittor 和gitlink，全都是 ccf 的一些平台，要不是为了这比赛，狗都不用…</p><h2 id="科英-a-">科英 A-</h2><p>好课，可惜被我上水了。事情太多了，完全学不完，顶着软工一起上痛苦万分。结果软工写完就摆烂了。</p><p>最后给了我 A-，我不理解，难道我原始分这么低吗？我考完试还多卷了 15分走，结果最后是 A-。多卷 15 分是用于从 A- 到 A 的，所以看上去我原始分是B。感觉不对啊，挺不对劲的，但我也不知道王老师怎么算的分，有人200+，我特么 100 出头，草…</p><p>课程的话，整体很好。</p><div class="note info modern"><p>任选课，毕竟你来选他就是认同他的教学理念，否则凭什么选他？</p></div><p>科英在全校是出了名的硬课，甚至我觉得是唯一能学到英语的清华英语课，其他的，也就柏老师的课还行。不过这么硬，我也能水完，佩服我自己，哈哈哈</p><p>课程考核特别繁琐，各种书籍，实际上有 5本，我寒假搞了一本，开学学了《WPME》，那些学了好几本的大佬真的是神吧。还有考试，考试特别频繁，特别难。虽然就是考五本书的内容，可是我特么只学了一本啊，根本来不及学完，太累了。一开始考试还认真准备，后来直接让先考过的同学把答案和试卷发给我（王老师会共用同一套卷子X）</p><p>学的时候特别认真，每个词都查，然后找词根，认真背诵单词，但是课文存粹摆烂，头发掩着眼睛，然后眼睛直接瞟着原文在背诵，草。退课率很高，我感觉退了一半人，没法啊，不划水，太难了，而我能在科英划水，草。</p><p>中间几次作业靠四级成绩 649 免了，老师说四级 649 对标托福110，希望这个暑假可以成功。而且，没王老师的课，完全没法保持英语手感。最后在各方合作下，完成了科英，还和老师关系不错，很舒服。虽然上课一般，但是任务很地道，工作量稍微小点就更好了。</p><h2 id="软工-a">软工 A</h2><p>傻逼课，彻头彻尾的傻逼，看看我的<ahref="https://zhaochenyang20.github.io/2022/03/08/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E8%BD%AF%E5%B7%A5%E8%B0%83%E7%A0%94/">软工调研报告</a>就知道了。</p><p>的确傻逼，除了给分都是傻逼。</p><p>我从寒假开始找队友，然后寒假开始卷，学 CSS, HTML, JS,REACT，即便如此，开学前也对 REACT 一无所知，都是直接 Fly bitch的，妈的，Fly bitch 到了新高度</p><p>软工充分体现了队友的重要性，我的队友除了我自己找的光宇，其他都是很靠谱的大佬。光宇人也挺好的，就是太摆烂了，草</p><p>一开始和 lambda 组队，后来 lambda 和 c7w跑了，我又找了若愚，若愚很靠谱，是从电子系降转到贵系的大佬，我在奖学金答辩认识的，后来才知道人家是化学集训队保送的电子系，我不理解…反正若愚给我的感受是，en学，就是啥都认真学，从不摸鱼划水，不像我，能水则氵，刀尖跳舞…若愚负责数据库，很靠谱，很少出锅，而且人基本能联系上。</p><p>接着是蒋委员长，蒋委员长是从生医转到我们班的，顶级大佬，学车中学的OIer，硕果仅存来了 OIer心中的圣地——贵系。哎，这和我高中向往华子化学系和化工系有 g8区别…据悉是强基橄榄了一波浙江的OIer，然后他们又没法拿牌，因为浙江省队都是集训队，就让一堆人进不了贵系和信计，去了未央。委员长硕果仅存，考上了华子，一开始在生医，后来转来了贵系。而他的OIer 同学在未央，都去上了邓公的 DSA，据说给未央开的 DSA 更卷（含 OIer含量远超贵系，笑死我了</p><p>总之，委员长很强，特别强，啥都会，从数学到算法到开发，我不理解，他奶奶的，为什么OIer 还会开发。经常靠委员长 holder 全场，没他我们组完蛋了，从 CI/CD 到docker 都是他负责，太佩服了，虽然他码量不高，但是绝对是队伍核心。</p><p>然后是子睿，子睿是从经管降转来贵系的，他五个学期修了 163分，我草，什么变态，然后绩点 3.9守门员，上不去，但是不一定下不来，草</p><p>子睿不愧是 PPT 学院来的，各方面能力都挺好，做 PPT，汇报尤其NB。一开始小组 PPT 是他做的，汇报的视频和 DV剧也是他拍的，在此我要展示下，太牛了。</p><div><iframe src="//player.bilibili.com/player.html?aid=639219029&amp;bvid=BV1KY4y167rm&amp;cid=721932595&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?aid=256645096&amp;bvid=BV1Qa411f7ku&amp;cid=721934213&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?aid=341734720&amp;bvid=BV1gR4y1w72c&amp;cid=723226782&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div><p>属实是逆天的存在，为了防止渲染失败，我给个 URL list</p><div class="note info modern"><ol type="1"><li><ahref="https://www.bilibili.com/video/BV1gR4y1w72c?share_source=copy_web">项目成果</a></li><li><a href="https://www.bilibili.com/video/BV1Qa411f7ku/">DV剧本</a></li><li><ahref="https://www.bilibili.com/video/BV1KY4y167rm/">概念展示</a></li></ol></div><p>视频帅死了，子睿真的很强，人也性格很好，我们关系不错，一起搞数电实验啥的，经常一起聊润以后的生活，还有科研啥的。子睿经常给我痛斥经管和XX 专业，反正我对这俩专业都觉栓 Q…来张我和子睿的合照</p><!-- https://zhaochenyang20.github.io/pic/embed/5_13_8.jpg --><p>再来点软工的图吧，真的做的很好，虽然图片都是子睿用 AE做的，按说我们在科协卷出名了（这门课确实卷出名了…</p><p><img src="https://zhaochenyang20.github.io/pic/embed/5_7_1.jpg" style="zoom:30%;" /></p><p><img src="https://zhaochenyang20.github.io/pic/embed/5_12_1.jpg" style="zoom:50%;" /></p><p>然后是光宇，我们组的恶人和活宝，草。干的活最少，经常被我们骂。光宇是华子附中的，还是华子附中最强实验班的，和A不是一个班。按说我对北京人印象都不好，何况是华子附中，能接收光宇更多是先入为主知道他成绩好，人不错，还很靠谱。前俩都是对的，就是不靠谱。他不适合学计算机，不喜欢查资料，不喜欢读文档，老师讲的话就能学的很好，但是自己做就等着老师讲明白。在鬼系的fly bitch下，简直是离谱的没法。最后我们扛着他走，我经常破防，奶奶的…我确实脾气暴了些，光宇人还不错，不怄气，哈哈哈。现在我觉得还行，三月份真的破防。</p><p>没错，你发现了吧，我们组没找一个贵系土著，可能多少是出于对土著的戒心以及我很认可转系同学的实力…</p><p>然后就到我了，没错，这课卷出了新高度，霸榜了 commit 和merge，硬是撑起了全队（才怪</p><p>一开始啥都不会，后来掌握了一两个核心技术栈后，开始狂码，至少贡献了前端码量的2/5 和技术栈的1/3。一开始其实我蛮想看看自己适不适合做软件工程师，结果发现自己真的没法成宿成宿的coding，太痛苦了，从天亮写到晚上，然后又睡觉，一边睡觉一边眼前是绿油油的代码。大半夜梦到dictionary 能解决技术问题，三点钟起来把他写了，离谱死了</p><p>我从第 6 周开始翘课，一直写到 8周，把自己的部分完全写完了才收手，两周啥都没干，纯粹写代码 +应付作业，熬出头了决定了自己要搞科研…</p><p>软工毁了一个学期，草，但是认识了很多有趣的人，还有 tjy, ylc他们，哈哈哈</p><p>下面是我的霸榜瞬间…最后以为给分不咋地，祈祷 A-万岁，结果给了我们组全组 A，光宇 A-。lambda 他们组全组 A，c7w 和 lambdaA+…</p><p>不过他们确实NB，我们项目特别顶，绝对是难度最大的项目。码量前十我们项目有 5个，一共六个组，还有一个组集体退课了，草</p><p>最后一个组，只剩下 3 个人，全组 A-，太不容易了，草</p><p><img src="https://zhaochenyang20.github.io/pic/embed/4_22_1.jpg" style="zoom:27%;" /></p><p><img src="https://zhaochenyang20.github.io/pic/embed/4_22_2.jpg" style="zoom:25%;" /></p><div class="note danger modern"><p>一个软工笑话——</p><p>A 君和四个 XX 专业的同学组队软工，结果四个 XX 专业的同学 Vue小作业抄袭，总评被扣了 9 分。四人集体退课，然后倒逼 A 君也退课了…</p></div><!--寄经是什么贵物牛马？反正我不喜欢，--><p>上面这个 A 君不是 A，但是我蛮希望是 A 的。我对 A没有一丝善意，能不诅咒她即是我的高尚了…</p><p>对了，软工小作业特别傻逼，特别傻逼，特别傻逼…</p><p>特别是Vue，软工上课也傻逼，老师讲的狗屁东西，没一个人听，然后还强制纸质签到，搞得很严格似的。我一开始还坐在前排，但是偶尔会看见A，就很烦，后来就坐在角落。再后来，直接在隔壁学英语，签到了室友或者队友叫我，我就去签完到，就这样认识了刘好。</p><div class="note success modern"><p>再来个软工笑话——</p><p>签到完了，助教拿着签到纸走了。他走我也走…</p></div><p>我就这样翘了前半学期，后来集体讲座，讲的西撇。一帮业界的傻逼爹味十足，我听了反胃。就讲什么”你知道996 吗？“”你知道程序员 35岁失业吗？“云云，真的傻逼，还用你们这些乐色来讲？</p><p>反正我还是签完到就走，最后直接摆烂，让子睿帮我签到。真是多亏了子睿，感谢队友不杀之恩…</p><p>说起来，软工还有傻逼的例会，真的太 g8占时间了。每周从周一开始写功能，周二 HCI写软工，周三概统写软工，周四早晨科英写软工PPT，周四下午一个下午展示，晚上不敢写软工了，再写数电实验要完蛋了，周五检查完数电，上完课，又特么在写软工。周六周天把上周的作业补完，概统听一听，数电抄一抄。又开始写软工，沃日你妈，软工什么g8 傻逼，至少耗费我 180 个小时，按说有两倍造机的工作量。</p><h2 id="概统-p">概统 P</h2><p>好课，我给上水了，草草写了几篇笔记，可以看看。</p><p><ahref="https://zhaochenyang20.github.io/2022/06/06/Lecture/2022%20Spring/statistic/">统计部分</a>+ <ahref="https://zhaochenyang20.github.io/2022/02/23/Lecture/2022%20Spring/probability/">概率部分</a></p><p>梁老师讲课不错，我很喜欢，但是得益于贵系的优秀培养，我听不进去一节线下的课，每次都是拿着我的键盘坐在委员长旁边。他听课，我写软工，偶尔他指导我，我再用力敲击键盘，恶心下在场的所有人，心里没一点负罪感…</p><p>本来想好好学习下，好好卷卷的，结果有科英和软工，我不仅一学期实验室摆烂，连概统也在摆烂，没法啊。作业靠抄，然后听课复习，习题课没刷，心里发慌。虽然我看完了《概率导论》，的确是神书，但是感觉还是慌乱。期末前记了PF，也没开摆，居然认真复习了…</p><p>期末考试比较基础，但是有个排列组合的期望算不来，估计也没法拿4.0，不亏…</p><p>顺带，在答疑坊问人数学问题，极其舒适，而且感觉交流氛围很好。概率对机器学习和人工智障很有帮助，这的确不假…</p><h2 id="数电-p">数电 P</h2><p>傻逼课，我给上水了，而且生理性不适…</p><p>数电和体系结构也没个啥关系，鬼知道为啥学这玩意儿。搞得我机子也不想造。</p><p>每周就录屏，听回放，抄作业，期末考前花了一晚上看教材，第二天啥都会，写了60 多分，应该能过，不会挂科，反正 PF 了。</p><p>果不其然，真的是过了，原始分61，再多错一点我就挂科了，也许是老师饶了我，反正我知道刘好挂科了，而且一分不调，没几个4.0，和往年完全不一样，老师太不做人了…</p><p>说实话，傻逼，学了干吗？还不调分，作业又难又没人讲，我还是数电课代表…每周收集同学们的作业然后抄一份走，笑死我了…</p><p>一节课没去过，陶品和赵友健都没见过我，他们感恩吧…期末考试是喻老师监考的，所以真的一学期没见过老师。</p><h2 id="数电实验-a-">数电实验 A-</h2><p>傻逼课，他妈的实验没一点指导，全年级都在抄，以前的年级也在抄，老师都摆烂了。一开始两节课吹牛，啥都没干，吓唬人。</p><p>课程中间，拼了好几块巨大的电路板，贼 g8 麻烦，然后还很难带走。学了VHDL，屁用没有，毕竟之后都是用 verilog…</p><p>拼好了板子蛮有成就感，但是体验真的很差。</p><p>讲个笑话：</p><div class="note info modern"><p>我早八，tjy 下三，zgy 下四。周四晚上一起拼同一块版子，我上午检查了给tjy，他下午拿去检查，他完了给 zgy，zgy 完了再还给我，笑死我了…</p></div><p>最后因为疫情，实验室被锁了，导致我们得录视频，于是一个板子，我们拆了换个拼接方式，继续交上去，笑死我了…</p><h2 id="人机交互理论与实践-a-">人机交互理论与实践 A-</h2><p>还行，但是项目难度太大了，没大腿带完全学不下去。上课讲的蛮好的，毕竟是喻老师讲课，感受不错，全程书宁带飞我还有两个朋友。这课认识了一些好玩的人。</p><p>上课讲的中规中矩，人机交互的理论讲的蛮好，可惜我上课都在写软工，日啊！项目纯粹水，最后给了A-，说得过去。要说给下一届，真不一定推荐的。</p><p>人机交互认识了很多媒体所老师，感觉不错，什么王运涛啥的，对学生极好，子睿跟他搞研究，羡慕死了。可惜我不喜欢人机交互，感觉人机交互不是很本质，就是缝合怪。而且理论上的研究是我们设计，外包实现，结果因为我们实现不了，不得不设计的东西越来越low…</p><h2 id="人智导-a">人智导 A</h2><p>课不咋的，讲的东西太古董了，但是作业还行，能称得上入门吧。期末写了个<ahref="https://github.com/zhaochenyang20/IAI_2022">复习的repo</a>，已经祖传下去了。</p><p>大作业三次都不错，四子棋胜率98%，很有成就感，得分比卷了智能体的室友都高，哈哈哈。</p><p>课一节课没去过，期末考完了见了马老师一面，然后给他讲我想开源，就开了。算是给机器学习入个门，期末考试考的比较难，自己做的一般，不然就A+ 了。不过这门课让我爱上 Python 了。</p><p>期末考试自己没考虑到用棋牌的大小作为耗散值，而且 inception不会，全写的 pooling and convolution，如果当时会了就估计 A+了，小小的遗憾，一个学期没有 A+。</p><p>有趣的是，我在复习人智导期间，和几个好朋友一起组了个车队，人智导敢死队。我，cyy，tjy，czr，ylc还有博文，一起讨论了很多问题，比如 SVM凸优化啥的，还一起写了个笔记。大家一起干活贼快乐。</p><p>力忱人很好玩，我过了很久才知道他和 A是高中同学，但是我和他关系不错。</p><div class="note info modern"><p>力忱给我说，他是根据清华附中，计算机 + A 的昵称发现了 A竟然是他的高中同学，而 A 和他在高中没有说过一句话…</p></div><p>cyy 和 zgy 都想润去坡县，但是 zgy 挺摆烂的，cyy 已经去坡县暑研了。cyy人很好，我经常和他讨论润学，他可是润学大师了。还帮我辱骂贵系，真的舒服，贵系学习体验真的垃圾。</p><div class="note danger modern"><p>贵系不是希望你做的好，而是希望你做的比别人好...</p></div><p>来点贵系学习体验——来自大四老学长 cyy：</p><div class="hide-toggle" style="border: 1px solid  lightblue"><div class="hide-button toggle-title" style="background-color:  lightblue;"><i class="fas fa-caret-right fa-fw"></i><span>贵系学习体验</span></div>    <div class="hide-content"><div class="note danger modern"><p>不必这么悲观，可能只是因为在贵系的问题，选点其他系的课，可能生活更多彩了</p><p>我发现我大三开始把心态从我的问题改为贵系问题以后，生活就舒服多了</p><p>贵系学习体验太差，真不是你问题</p><p>今天我招生，才想到这个词，学习体验</p><p>年年劝退贵系了已经是</p><p>作为一个真正好的地方，应该是给同学们学习体验是好的，再不济他也应当在学业之外的行政上给同学们开绿灯，但是贵系突出一个不折磨人不罢休</p><p>在这种环境里，你只能把自己力所能及的做好，剩下的你就当他没有</p><p>那没有的东西我也没办法，就这样吧</p><p>虽然说有些过错甩锅贵系显得好像我输不起或者说嘴硬</p><p>但是实际上呢，就在一个环境下</p><p>我表现出什么东西跟环境有很大的关系</p><p>我无力改变贵系，那我只能想办法让自己与贵系独立</p><p>所以我对贵系的归属感不强</p><p>我出去可以说我是华大学子，专业是计算机</p><p>但我很少说我是计算机系的</p><p>所以放松点再做是好很多</p><p>有时候小摆烂一下再做工作，反而心态更好</p><p>做得更好</p><p>2022.3.14，我出国审批文件贵系第一次审核</p><p>2022.6.27，贵系通过我的出国审批文件</p><p>或者说，其实把贵系这个环境，看得太重了</p><p>其实到头来其实我做自己就行了，不必让环境满意我</p><p>你如果未来不想留在这个环境，你管他怎么想</p></div></div></div><p>说回到人智导——人智导三次作业比较有特色，第一次是拼音输入法，用维特比算法加上自己统计的模型训练就好了。我寻思能用神经网络简单迭代，就是eval 太慢了。我还给班上讲了，特别有成就感，感觉 Python真的是真爱。第二次是智障神经网络，特别离谱，上课讲个皮毛，结果大家都在抄代码，从CNN 抄到 LSTM，我先是抄了代码，卷了报告，最后给了94。一问才知道，人智导卷了 Bert 才给 95+，这不纯粹傻逼吗？你讲的那 g8玩意儿能让人理解 transformer 和 Bert，扯犊子，而且卷 Bert这件事一句话没提。最绝的还是下面这个笑话：</p><div class="note success modern"><p>人智导笑话一则——</p><p>刘文瑄同学的智障神经网络作业代码提交错了。大家都是提交清华云盘链接，他提交了清华云盘的上传链接，结果助教完全没找他麻烦。他都是后来复盘的时候发现，自己代码完全没交上去。这帮助教根本没看过代码…</p></div><p>我寻思，下次我口头说我实现了 Bert，二分类正确率 96%，应该就能拿到 96分了，我草。</p><p>最后一次作业是四子棋，你说有意思吧，就是实现了之后蛮有成就感，但是debug 极其困难，反正我直接抄的 cgj 的代码，用 git 逐次 commit，然后在linux 上对拍，最后改的面目全非，才敢交上去。实际上不用咋优化，胜率有个90+，然后我稍微优化了一个中庸之道，就 98了，按说往年报告更离谱，但我不知道咋卷了，理论上得用内存池优化，不要对C++ 多次 new 和 delete。反正写了个 AI 胜率 98，天梯上排名 80名，笑死我了。一个号一天可以测四次，于是我开了 5 个号...</p><p>最后再来人智导一打埂图：</p><div class="fj-gallery"><p><img src="https://raw.githubusercontent.com/zhaochenyang20/zhaochenyang20.github.io/c5527f848b946088ea41d9325048146d35b5f740/pic/embed/7_9_3.jpg" style="zoom:30%;" /></p><p><img src="https://raw.githubusercontent.com/zhaochenyang20/zhaochenyang20.github.io/c5527f848b946088ea41d9325048146d35b5f740/pic/embed/7_9_4.jpg" style="zoom:30%;" /></p><p><img src="https://raw.githubusercontent.com/zhaochenyang20/zhaochenyang20.github.io/c5527f848b946088ea41d9325048146d35b5f740/pic/embed/7_9_5.jpg" style="zoom:30%;" /></p><p><img src="https://raw.githubusercontent.com/zhaochenyang20/zhaochenyang20.github.io/c5527f848b946088ea41d9325048146d35b5f740/pic/embed/7_9_6.jpg" style="zoom:30%;" /></p><p><img src="https://raw.githubusercontent.com/zhaochenyang20/zhaochenyang20.github.io/c5527f848b946088ea41d9325048146d35b5f740/pic/embed/7_9_7.jpg" style="zoom:30%;" /></p><p><img src="https://raw.githubusercontent.com/zhaochenyang20/zhaochenyang20.github.io/c5527f848b946088ea41d9325048146d35b5f740/pic/embed/7_9_8.jpg" style="zoom:30%;" /></p><p><img src="https://raw.githubusercontent.com/zhaochenyang20/zhaochenyang20.github.io/c5527f848b946088ea41d9325048146d35b5f740/pic/embed/7_9_9.jpg" style="zoom:30%;" /></p><p><img src="https://raw.githubusercontent.com/zhaochenyang20/zhaochenyang20.github.io/c5527f848b946088ea41d9325048146d35b5f740/pic/embed/7_9_10.jpg" style="zoom:30%;" /></p><p><img src="https://raw.githubusercontent.com/zhaochenyang20/zhaochenyang20.github.io/c5527f848b946088ea41d9325048146d35b5f740/pic/embed/7_9_11.jpg" style="zoom:30%;" /></p>          </div><p>我得解释下，第一张是世界冥画，第二张是我和子睿的聊天记录，实际上还有更搞笑的。第四张是我的实验报告，上来就是本手妙手美团骑手。第五张上方是DIDL 的课件，下面是华子的课件... 第六张是二字班集训队大佬用 C++写神经网络手算梯度现场。第八张是一个埂图，貌似这只狗叫Chims。最后一张是我和子睿的聊天记录，zcy 年仅 19 岁就完成了 TNN神经网络的工作...</p><h2 id="毛概习思-a-">毛概习思 A-</h2><p>路子达老师讲的毛概不错，习思正不咋地。但我成为了完全的布尔什维克战士，写了两篇长文。一篇讲述<ahref="https://zhaochenyang20.github.io/2022/04/13/Lecture/2022%20Spring/%E6%88%91%E4%BB%AC%E7%9A%84%E4%BC%9F%E5%A4%A7%E4%B8%8E%E6%B8%BA%E5%B0%8F/">布尔什维克主义</a>，一篇讲述<ahref="https://zhaochenyang20.github.io/2022/06/16/Lecture/2022%20Spring/%E8%AF%B7%E4%BB%A5%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97%E5%91%BC%E5%94%A4%E6%88%91/">社会化抚养</a></p><p>给分居然不咋地，草，我认真卷了好久，小组讨论一直卷，我做 pre的习惯都出来了，感觉很有气场，而且深得老师认可…</p><p>小组讨论太离谱了，大家一起 py，都给 10 分，麻了，一开始还认真卷，结果TNND 集体摆。</p><p>无所谓了，反正我的布尔什维克理想完全成型了。</p><h1 id="经济">经济</h1><p>零零散散谈了这么多，还是集中写一些内容。</p><p>首先是经济：</p><p>我不得不说，和 A的很多矛盾来自我和她的金钱观念，和她分开后，自己的金钱观念倒是发生了很多改变。</p><p>改变的本质来自一件事 —— 我已经从家里经济独立了。</p><p>过去一年的收入蛮可观的：</p><ol type="1"><li>奖学金 1w</li><li>在 AIR 的工资，大概 1.2w</li><li>答疑坊的工资，每月 1.8k</li><li>课咨委的工资，一年 4k</li><li>其他途径零星搞的💰，大概 3k</li></ol><p>初步从家里经济独立，没有再要生活费和学费，然后一年花自己的钱买了很多设备。</p><p>我的 Mac —— 2021 款的 M1 MBP，花了1.3w，简直是我人生目前为止最满意的一笔消费，彻底改变了我的编程习惯，建立了我对linux 的体系化理解。</p><p>我的显示器，键盘，鼠标，支架，前后花了 3k。</p><p>我的 IPhone 13，最近刚买，找人从澳门买的澳版，花了8.3k，感觉没有鸿蒙好用，但是谁让鸿蒙出了大陆就是板砖呢…</p><p>我给我爸买了一部手机，他很喜欢的 huaweinavo，性能很不错，给他用很合适。给妈妈买了一些项链，打算回成都前去买些首饰送给她。</p><p>给各个亲戚朋友买了不少礼物，前前后后花了 1k 多。</p><p>自己经济独立了，才觉得花钱不是件心痛的事情，而且花自己赚的钱真的很爽。</p><p>接下来几年最大的经济开销应该还是去美国的启动资金，力争毕业了年入 25w刀，OPT 第一年把启动资金赚回来。</p><h1 id="人际关系情感与未来">人际关系、情感与未来</h1><p>过去一年逐渐把亲情、友情、爱情归一化了，虽然听着很奇怪，但是这样做也蛮幸福的。</p><p>去年秋天删了一堆微信好友，后来因为各种原因加回来了一些，现在也没加完，就这样了罢。</p><p>后来因为答疑坊的事情认识了雷哥和义淮哥，他们俩给了我非常多启发和帮助，真的非常感谢。</p><p>义淮哥带我读书，我们每周都会找个地方约饭，然后一起讨论一些课程，读书和生活的见闻。这么谈了好几次，我的心情好了不少，认识到了自己还不够成熟以面对复杂的人性，还需要对这个复杂的人类社会进行广泛的调研与总结。</p><p>雷哥那段时间一直在打工，我们聊了很多事情，从 CS到应润尽润，还有考驾照。他给了我很多工程的启发，也让我见识了真正的业界。后来还是发现自己卷不动，彻底放弃去打工的想法。</p><p>还认识了很多新朋友，比如我的学弟们，鲁大师和诗棋，虽然高中就知道彼此，但是来了华子才有了新的联系。还有，答疑坊认识了不少新朋友，有同样是志愿者的，还有低年级学弟学妹。</p><p>和 lambda，c7w，hjj成为了非常要好的朋友，非常感谢他们在过去一年里的不杀之恩。</p><p>顺带，我还养成了记下朋友生日的习惯，每个人的生日基本都记得。</p><p>还有一个外校的好朋友，不太好提到人家名字，是个非常温柔善良的小姐姐。江西人，我逐渐觉得我认识的每个江西人都很善良，总之我对江西人的评价算是所有地域最高的。</p><div class="note success modern"><p>我之前送给自己的一段话“我们这一生大多数时候都在当摆渡人，有时候是别人渡我，有时候是我渡别人，曾经他和我说‘就此告别吧，摆渡人就不上岸了’，后来我和别人说‘摆渡人就不上岸了’。那之后，我开始与自己和解，告诉自己珍惜当下就足够了，或许永远也不会有人陪我上岸，又或许我早已在岸上漫步，这一生太短，又何必去纠结那么多”</p></div><p>最后，还和成外的朋友有了新的联系。认识了一个中加班的同学，人在 IC 学AI，挺好玩的。和我聊了很多国外的事情。</p><h2 id="感情">感情</h2><p>情感上，大概是接受了自己会孤单而度过一生的结局吧，😓</p><p>我和 cyy 聊天，他觉得我和 A的关系就是一次蒙特卡洛搜索，我的评价是，人类的算力非常有限，根本不可能大量模拟，甚至模拟一次都让我没死掉。其次，和A 的关系回传的 profit导致我的模拟树受到了根本性损伤，发现自己根本不会像大一时那么对人际关系充满热忱，反而是挺消极的自我防护状态。</p><p>一整年认识了很多人（同性 or 异性），再没有一个能给我大一认识 A的时候的悸动感。并非是 A太惊艳了，而是我的心再也不会有那种感觉，对人类的热忱被她消耗殆尽。大多时候，对于感情的憧憬，都让我觉得随便是谁都行，但是真的聊一两句，总觉得完全不能彼此理解，甚至让我反胃。</p><p>大概就是——单身久了，看谁都可以。仔细想想，又觉得谁都不合适。</p><p>那我有什么办法呢，等着时间治愈我？也许不太现实，估计还是继续消极的在人世间寻觅吧。</p><p>不过这次，我有了新的评价指标：</p><div class="note info modern"><p>与我建立任何羁绊的人，朋友也好，恋人也罢，请认可我坚信的布尔什维克主义——我的一生在和A 分开之前，所想的不过是阶级的跃升，给予后人更好的生活。而和 A分开后，我彻底建立了我的布尔什维克观念。将以我的一生奉献给生产力的解放，用强大的生产力推翻现有一切不公的社会生产制度，推翻所有的阶级。</p></div><p>可悲的是，我即将前去生产力最发达，却又最反感社会主义的塔国继续我的学业，进行我对生产力的探索。以我对A的了解，这帮小布尔乔亚真的对于生产力毫无敬畏，对于自由民主的幻想总是让我感到可悲。</p><p>真的能在太平洋的彼岸找到人生的归宿吗，无论是心理、感情还是魂灵，对此我感到很怀疑。</p><p>但是 n+e 都脱单嘞，哈哈哈…</p><p>我其实是无所谓的，我总是这么告诉我自己…</p><hr /><p>2022 年 7 月 4 日，来补充一点感情的事故。</p><p>前天晚上，我莫名地遍历了一次我的列表和日记，其中竟然记录着至少 49次为感情而焦虑，其中至少有 3 次大型破防现场。第一次是 3 月初 HCI下课遇见 A 在跑步，直接破防；第二次是 5月初和外文系的同学的交流直接破防；第三次是 7月初因为联创面试的结果而破防，actually破防的次数不算高，就是很难受，每次破防都产生长久绝望的感觉。可我有什么办法呢…</p><p>好吧，其实还是得有办法的。让我细细回想下过去一年接触的异性，那么为什么没有产生亲密关系呢，各类原因如下：</p><div class="hide-toggle" style="border: 1px solid  lightblue"><div class="hide-button toggle-title" style="background-color:  lightblue;"><i class="fas fa-caret-right fa-fw"></i><span>你将孤单而度过一生</span></div>    <div class="hide-content"><div class="note info modern"><ol type="1"><li><p>和高年级同学注定不可能，这几乎是业界共识。</p></li><li><p>和低年级的同学交流彷如带娃。如果是计算机系的同学，我很难接收到正反馈，而且我已经没有任何心思再学习微积分和代数了，学习了对我的意义也不大。如果失去了这种机会，那么只能是怪我太过功利。然而感情很重要一点也是彼此满足彼此的价值实现吗？那么如果是低年级非计算机系的同学，很难产生共同语言，哪怕从爱好下手，几乎不可能。因为我是个很难在爱好上投入太多时间的人，在和A 的交往过程中，我看了 R&amp;M 和AOT，然而这真的是很奢侈，反观自己还是如此的菜，也许和花了不少时间在没有价值的爱好有一定关系。至今想起来，A认为我和她没有共同兴趣，想来也是，兴趣对我太奢侈了。我几乎是牺牲了一切学习以外的兴趣才得以苟活至此，那真的是很抱歉了。</p></li><li><p>和同年级的同学交流，首先是计算机系的同学。我的评价 ——什么贵物…好了，概括完了。actually，计算机系的女生几乎以北京人为主，天生就存在我极度厌恶的阶级感，尽管经过一年的时间，我已经对北京这座城市感到麻木，对于食利阶级、肉食者、既得利益者感到无感，我没有憎恨，也没有克奇，仅仅是厌倦与麻木。同届的人，几乎给我很强的贵物感。那么同届的其他院系的同学呢？交集为Python，其他就没了。所以过去一年，我帮助很多人配过 Python环境，但是至今也是工具人身份。我没有自己强烈的兴趣，也并不愿意培养。这样的生活还会持续很久。</p></li><li><p>其实留在华子的最后两年，对我而言，感情真的是奢侈品。因为我很不希望因为我选择出国而左右对方。一方面，你可以说我是人渣，另一方面，我的善良每每令我动容，即便在感情中我一直是被辜负的那方，但是我仍旧不希望因为自己而改变一个人的轨迹与她的选择。我真的很善良，善良的我想还是孤单而度过一生为好。想来和A闹崩的导火索就是因为出国的选择。当然，让她快速坚定决定出国的人是我，那为什么是我呢？因为狗日的高中的经历罢了，他让我明白选择是世界上最奢侈，最宝贵的事物，也让我渴望做出无比正确的选择。反之，这让我大一很焦虑，也传给了A。现在想来，我真的不该怪罪A，我指的是在交往过程中吧。不是因为她很好，而是其他人更烂。又或者说，在从小到大的任何环境里，我几乎都是最拼命于事业的人，很难用自己的标准去judge 别人。</p></li><li><p>那么，又谈到事业问题。我为什么会有如此多的活呢，因为感情的戒断罢了。上一次感情的破碎对我造成的痛苦是无穷的，所以我用大量的工作来填塞自己的悲痛，虽然完全没解决，但是至少工作中认识的人和事物对我产生了很多积极的影响，而且当我回过头来时，我又把自己的工作填的太满了，以至于几乎左右着我的学习，何况是感情这个奢侈品呢？我当然也有想过是否要舍弃一些工作，自己轻松些，然而我是做不到的。我会想尽一切办法来防止痛苦的再次发生。可能初衷是想不会再因为分手而痛苦，现在变成了不会因为谈恋爱而烦恼。</p></li><li><p>还有，观念上，这点我和大多数人已经根本性不同了。我的理想不是提升自己的阶级，而是迟早有一天推翻全社会的阶级。何况和一帮贵物接触久了，我对这些事情是麻木的，感到生理性的反感。我的布尔什维克，单是说出来就很难得被人理解，何况我对感情的渴求，至少需要对方认可我的想法。谈了这么多，我没能开启一段亲密关系的原因，更现实的还有对方已经有对象，我不想聊了，我觉得烦了，我感觉对方是个贵物，我觉得自己被钓鱼，我觉得很无聊，我想工作了。</p></li><li><p>最后，让我感到无奈的一点，从初中开始，我在任何环境下都几乎是最拼命的人，一方面这确保了我的结局不会太差，然而这也难免会让我对周围人要求太高，无论是朋友还是恋人。到了这一步，我突然开始有些遗憾。A不是个坏人，我也不是，我甚至有几分愧对她，让她的精神压力太大，学业压力太大。听说A 上上个学期绩点不错，无所谓了。</p></li></ol></div><div class="note danger modern"><p>你看，因为我的善良，因为我的热忱，因为我的布尔什维克，我将孤单而度过一生...</p></div></div></div><hr /><p>2022 年 8 月 13 日，来补充一点感情的后续。</p><p>暑假经历了有一次感情的受挫，然而自己感觉并没有什么，我又活蹦乱跳了起来。</p><p>我突然习惯了一件事情，不再去把曹菡雯符号化，她就是一个具体的人，不是抽象概念，更不是一个诅咒，我一定会遇到与我执手度过漫长一生的伴侣。</p><h2 id="未来">未来</h2><h3 id="决定出国的初衷">决定出国的初衷</h3><p>我很难解释自己究竟是如何想清楚了自己追求的事情，而后决定了想要离开中国，先去求学几年，而后再工作。最初的想法是出于感情的碎裂带来的痛苦，如果你读过<ahref="#开端">开端</a>部分的注释中，你可能能够猜到最初的原因：</p><div class="note danger modern"><p>我想要离开这里，摆脱这些可耻的既得利益者，成为更高层的食利阶级…将今天所受到的痛苦百倍奉还！</p></div><p>出于这个本质的归因，再加上我当时对于中国社会根本性的绝望，我下定决心要离开这里，甚至最初的想法就是争取永居权，这是我最早给父母提及的原因，而且是最激烈且直白的归因——我当然能够想到他们看到这个想法后的错愕：父母都是公务员，这么多年在体制内的工作，加之国内一贯的赢麻式内宣，他们很不能理解我所指的社会矛盾，而我当时不免也对社会矛盾的认知极为激烈。虽然我现在仍然认为国内的社会矛盾绝对不比我当时认知的少，但是对社会矛盾的看法没有那般尖锐，而且坚信这些社会矛盾能够软着陆，社会主义一定是人类的未来。至于当时的一些看法，我姑且摘抄一些，写在下方：</p><div class="hide-toggle" style="border: 1px solid  lightblue"><div class="hide-button toggle-title" style="background-color:  lightblue;"><i class="fas fa-caret-right fa-fw"></i><span>2021 年意识到的社会矛盾</span></div>    <div class="hide-content"><p>我说过，在每一个舞台上，我会拼尽全力往上走。当然，你们可能并不觉得出国就是比北京更高的平台，我其实也并不觉得在国外会很好。但是有一个观点我必然可以明确。</p><p>在中国，这个社会太稳定了。北京上海这两座可憎的吃人的城市，住宅的稀缺性阻挡着所有人进入。同时还有严格的户籍、教育制度，这就像是在非洲建起了纽约，富丽堂皇允许你去贡献，但是你永远无法享受他的福利，而他却因为你的奋斗而跻身世界一流城市。</p><p>在这个可憎的城市，无数的人早早挤了进来，他们享受着无比畸形的教育福利。我完全不觉得周围的北京同学比我认识的四川同学优秀，然而他们人数却完全不合理的多。我中学不过尔尔的水平，却能够战胜他们当中的绝大多人，实在是荒唐可笑。</p><p>而我，如果我留在北京。尚且不论程序员不可设想的工作压力，996过劳死等事件时有发生，想必你们也必然有所了解。更让我觉得可恶的是，我将将我青春的大好年华贡献给这座城市，让早已进入这座城市的人得到高额的房租和福利，然后他们的子女享受着不可思议的福利，而我甚至毕业十余年的薪资不足以在这座城市买一套栖息的房子。</p><p>多么的可笑可悲可憎！</p><p>我真的恨透了北京这可恶的社会环境。虽然国内的治安良好、生活便利，但是对我而言，我将来如果进入业界，大概率会待在北京，这是北京的互联网企业众多所导致。然而，我已经叙述过，正是国内社会太过稳定，而让北京这座病态之城和许多的北京本地人得意肆意的践踏我的青春年华。</p><p>我以前也可能觉得，留在北京能够带给子女更好的教育条件，然而可能并不是。首先虽然北京考上清华比四川简单了千倍，但是本地人仍然需要参与教育内卷的洪流才能够读到好的学校。而且，我对中国的教育其实是悲观的，虽然我是教育的受益者，我的的确确通过教育能够走向更广阔的天地，以及大概率会有很好的生活水平，但是我仍然觉得我对中国的教育很悲观。</p><p>事实就是如此，在中国，大多数人奋斗十八年不如有些人出生在北京。以及，哪怕出生在北京，奋斗十八年也比不上有些混蛋赴美生子，他们的后代从小在中国长大，享受着社会的福利和稳定，还有着外国国籍。这样的社会让我觉得很悲哀。当然，这种出生决定的问题肯定不是中国独有。我自己也明白。然而，我只是对此感到非常的痛恶。</p><p>如果我费尽千辛万苦，在北京能够买房生活，让子女有了北京户口。我还得想办法让他进入海淀区的那些学校，还得和几万人拼命从小学习各种离谱的，一生也不会再用到的东西，这样他才能读到较好的大学。做了这么多事情，自己受苦，孩子也会受苦，还不如就让他出生在美国。荒唐、可悲而又可笑至极。</p><p>所以说到底，留在北京固然做互联网收入高，但是行业压力很大，而且高收入也不太可能能够在北京买房。更别提子女教育这悲哀的事情，还不如赴美生子。</p></div></div><p>这些言语固然偏激，但是我还是把它留在了这里。</p><p>总之，起初的抉择，就是因为对于国内社会现状的极度不满，故而产生了润的想法。很多人用润来代指出国，对我而言，这是不一样的。润是为了一些原因离开中国社会定居，而出国就是离开这个国家求学罢了。那么一开始，我是单纯为了润，现在可能是介于润和出国中间的状态。</p><p>这就是决定出国的第一个阶段，我想要离开中国，逃离内卷和被既得利益者剥削的命运，让我的后代成为既得利益者，成为更强的剥削者，将国内的剥削者对我的伤害百倍奉还。</p><p>这一个阶段，我了解过很多地区：沙特，阿联酋，美国，瑞典，瑞士等等，一开始就想去美国做SDE，然后毕业后年入 20w 刀，在加州生活罢。</p><p>这个阶段还有一个尾声——2021 年年底学校出了交换的申请。我兴奋地填了UCSB 和Waterloo，满心以为自己稳了，而且给父母讲了想要去交换这件事情。自然父母并不接受，而且我也没有离开过大陆，不确定性太大了，可是当时自己一心只想润，父母越是反对，我越是尖锐…</p><p>出结果后，我没有拿到 UCSB 的名额，去了自己备选的Waterloo…拿到名额的是 wmj，说实话，我并不知道 wmj比我更优秀的地方，在社工和学业上她并没有很强的存在感，当然我知道她学业能力也很强，可能我心里也觉得并不服气，也许是英语比我强，也许是gender bias，但是无所谓了。至于我选择 Waterloo 的原因，是因为之前听说H1B 三抽不中，很多人会 transfer 到 CA，然后 L1南下，故而我随便选了加拿大 CS 很强的 Waterloo…我填了Waterloo，结果出结果后，我竟然 Waterloo 了，有点离谱，但是 lambda 也去CA，他去多大…</p><h3 id="出国的第二阶段学术">出国的第二阶段——学术</h3><p>偏激的想法持续了一段时间，然后发生了一些变化：</p><p>我阅读了吴军所写的<ahref="https://zhaochenyang20.github.io/pdf/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85.epub">《浪潮之巅》</a>一书，对以硅谷为代表的美国信息产业界产生了无比的向往。另外，周围大多人都在科研的路上，目标是读博，而我也在实验室工作，做着和SDE 全然无关的工作，我也想去考虑下是否做学术的问题。</p><p>于是期末考完后，我去找了邓公讨论，出于对邓公的尊重，不便于展示所有的对话内容，但是我给出如此的概括：</p><div class="note danger modern"><p>有人的地方就有江湖，有江湖的地方就有规矩…</p></div><p>另一方面，国内的硕士教育非常暧昧，博士教育危机重重，再多说会很得罪人，毕竟我也不会接受这样的教育，如果你有兴趣可以联系我获得<ahref="https://zhaochenyang20.github.io/2022/01/14/%E5%87%BA%E5%9B%BD/reasoning/">《一些人生的规划》</a>一文的密码…</p><p>和邓公聊完，邓公告诫我：</p><div class="note info modern"><p>晨阳是个性格耿介的人，不太适合国内的学术氛围…</p></div><p>我思前想后，无论是为了国外舒适的生活，还是为了自己去工业界闯荡的想法，亦或是想要追求学术，都要离开这里。</p><p>从此开始，自己的想法又更加多元，有了更多对于学术上的考量。出国不是目的，而是手段，是实现自我完善这条路上的一个选择罢了。于是我更加坚定了自己要出国且要去交换的想法，甚至好好调研了很久Waterloo周围的环境，住宿等等，还有学术，花费…其实说实在的，我不敢去以及最终放弃了交换，真的是因为费用原因，可是我并不，也没有任何理由为此怪罪父母没给我足够的资金支持，他们已经给予了我他们的一切。</p><p>调研 Waterloo也并非没有收获，因为我对北美的学术圈有了更多认识，而且和 n+e，Michael他们有了 conn…</p><p>第二阶段的尾声是和中介机构相关的，我寒假看了《交大生存手册》，决定去中介碰瓷，结果差点碰出人命…</p><p>自从和再来人碰完瓷后，我陷入了对自我的思考——</p><p>我的初衷本来就是不想和系里的同学一起盲目卷绩点、卷科研而后直博，我并不认为自己是个能够胜任PhD学位的人，而国内的硕士培养不如国外健康，加之国外良好的业界环境和潜力，因而选择了出国。</p><p>然而和这些中介的交流过程中，他们认可了我超乎同龄人的规划，却又不断在激发我内心的贪婪。他们不断给我灌输，我的基本盘很不错，足以申请前10 的 MS 项目和前 20 的 PhD项目。而后我不断的叙述我的认知，却又让我对读名校 PhD这件事产生了无穷大的向往。直到再来人完全点燃了这种颠覆了初衷的贪婪，让我感到了无穷的恐惧和焦虑，才让我回想起了自己的初衷。</p><div class="note info modern"><p>我都是为了不盲目跟风读博才决定出国的，那我出国了还要盲目跟风读博，这不是本末倒置吗？</p></div><p>想到这里，我就很明确了——我的目标是通过学习和人类社会观察这两件事情来认知自我，科研能力、唯物主义价值观等等，而听中介画大饼和贩卖焦虑只能激发超出初心的贪欲和焦虑感…</p><p>我没有选择再来人，但是也陷入了迷茫和焦虑，是否要读硕士，是否要读博士，是否一定要去美国，是否一定要移民，是否会找对象，太多困惑和不确定…</p><h3 id="出国的第三阶段布尔什维克">出国的第三阶段——布尔什维克</h3><p>如果前两个阶段还可以称之为润，那么从第三个阶段以后，发生了本质变化：我要出国，为中华之崛起而读书！</p><p>起因是寒假看了马逆的《钢铁是怎样炼成的·百年纪念》，我突然发现自己儿时的初心——大道之行，天下为公，原来就是布尔什维克的最终目的：富足，自由，平等。而实现这一切只有两种方式，提高生产力与改革生产关系（生产制度）。我坚定了一件事——古典资本主义世界的繁华，完全建立在对内对外广泛的剥削和压迫上，而我就是被国内既得利益集团剥削的数十亿人民的一份子。要打倒既得利益者，一定要拿起唯物主义（布尔什维克主义）的武器。我的敌人发生了改变，在出国的一二阶段，我的敌人是中国的既得利益者，然而到了第三阶段，我的敌人是全世界的既得利益者。</p><p>我要学习最先进的科学技术，极力提升生产力，消除全世界的既得利益者，让全世界都过上富足文明，自由平等的生活。在国内，因为既得利益者的阻碍和既得利益集团的固守，我很难撼动这个体系，决意去世界上其他地区看看，中国和世界应该有怎样的未来。</p><p>我再次坚定了出国，毕业后去塔国读硕士或者去新加坡读博士，然后去工作，学习最先进的生产技术，等待时机成熟后回国。回国一是为了父母亲人，而是为了救国，三是为了中国人独有的叶落归根的浪漫。很多人给我说，先润出去再说，国外真的很不一样，我也相信如此。但是，我坚信我的根和我的魂灵都在东亚大陆上，牵绊着我走到无穷远处。</p><p>为此，我先是想去美国，因为美国的社会生产力发达，想去看看世界上最先进的社会生产力和生产关系制度，是否能够以此为契机，改革国内的生产力。</p><p>当然，后来也觉得新加坡很好，符合我对未来中国的渴望——用国家资本主义来作为社会主义初级阶段到共产主义的过度。</p><p>新加坡是我能想到的中国的未来，或者说，中国就应该是这个样子。首先是规则意识，政府听上去事无巨细的规则虽然限制了闯红灯，随地吐口香糖的自由，然而这又何尝不是华人的习性呢，服从集体，安分守己，只要集体的决策者不至于如越南的一些领导者一般反智，理解经济发展和核酸治国之间的取舍，我反而很喜欢这样的民族习性。而且，新加坡的繁华，并非建立在对内的剥削上，甚至新加坡也没有被金融与房地产绑架，不像京沪地区与被土地财政绑架且积重难返的大陆。另一方面，遍览东西方的文化制度，我仍旧坚持我的观点——西方文明无非是建立在对外对内的剥削和压迫上罢了，我唯独相信发达的生产力和人民的平等才是世界的出路，从此看来，这就是我最欣赏新加坡的地方。最后，坡和大陆的联系密切，回国以及与国内联系都较为轻松，没有文化和地域上的隔阂感。何况本就是华人国家，我哪里是想要出国呢，不过是找寻一个自己喜爱的地域继续发展罢，没有这些繁杂的心理包袱，顿时就好多了。最后，坡的申请还有毕业条件都满让我心水的，科研和绩点有一个即可，以及普遍四年即可博士毕业。对于入籍还有永居的考虑还在以后，但是已经越发开始心水新加坡的博士。</p><div class="note info modern"><p>我是追求个人自由的，但是我不反对规则对个人的约束，毕竟个人自由是建立在尊重他人自由基础上的…</p><p>最大的区别是，一个是公权力由人民的权利根据社会契约让渡出来，而一个是人民的权利是公权力（与可耻的既得利益集团）施舍的，随时可以被收回…</p></div><p>这就是第三个阶段，追求全人类的解放，从自我，到中国，再到全世界。除此之外，我还有另一个考虑：</p><p>按照现在自己的科研进度和想法，可能又会在读博和读硕士之间动摇了，也许到了明年自己又会想去读博士，搞深度学习之类的。我并不了解，这些事情太复杂了，我尚且自己都不够了解自己，我又何谈希望别人了解自己呢？</p><p>而可能读博还有别的执念——政治与国籍。我心中的念想很坚定，如果我有后代，他一定不是大陆籍。尽管这个想法说出来很可笑，甚至有违我的道德初衷，然而实际上，后代和我如果能够直接摆脱国籍的束缚，这会直接是1.5阶级（尽管我的最终目的是消除阶级），让自己的统战价值更大，能够更大程度左右国内的政治决策。我也不希望后代再去以压倒性的优势抢夺国内所剩无几的教育资源，这些机会应该留给后世的他者，而我的后代不必于此，不耻于此，也不必拘泥于此。我的看法很简单，我最痛恨的是从小在国内接受教育的外国人，然后凭借这层身份再得以抢夺国内本就稀缺的教育资源。我的后人，我不希望其再以如此身份和命运活下去。我想提高自己的统战价值，让自己的声音能够左右国内的保守势力，让他们把既得利益和改革的机会吐出来，成为一个世界主义者，赓续百年来布尔什维克的先辈们解放全人类的理想……</p><h3 id="出国的第四阶段学术">出国的第四阶段——学术</h3><p>暑假快结束时，我和高中同学 srx 聊了聊，发现自己的想法又变了很多。</p><p>总之，我的社会理想没有那么激烈了，倒是对学术的看法更近了一步。对于社会的看法改变，来自我的初中好友，具体可以参考如下链接：</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Alexander%20Slattery%20(LI748t0BK8w).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">你又代表谁的利益？</div>  <p>这样的日子是大家一起勒紧裤腰带过的，不是你一个人激烈地吼着改革就改。社会的基础在此，别那么自以为是…</p>  <a href='https://zhaochenyang20.github.io/2022/07/31/%E9%9A%8F%E7%AC%94/%E6%B8%85%E5%8D%8E%E5%9B%AD%E6%97%A5%E8%AE%B0/%E6%B8%85%E5%8D%8E%E5%9B%AD%E6%97%A5%E8%AE%B0--%E7%AC%AC%E4%B8%83%E9%83%A8/#%E5%A4%9C%E9%87%8C-2254'></a>  </figcaption>  </figure>  </div><p>至于未来的学术，我想了挺多——</p><p>之前和朋友聊天，想了想读博的下线和上线——</p><p>下线的话，一直在商汤打工，去香港自然没问题，除此之外，还有NUS；至于上线，我心心念念的 UW…</p><p>总之，因为自己已经坚定地不想写前后端了，考虑到除非我是 n+e 或者Michael 这种念书念了特别久的，否则硕士毕业想要找到 MLE的工作，还是很难，况且不是每个人都能像 n+e 一样抽中H1B，我也不想去加拿大折腾，总归，我坚定了想要读博的心思，就做我喜爱的 AI方向，至于具体是什么，主要还是 NLP 吧。</p><p>变数自然还有很多，但是我心里稳定了许多，也许半年后又会发生很大变故吧；谁知道呢？</p><p>我不知道我要去向哪里，我也不知道我会如何到达，我只知道，我会离开这里…</p><div class="note info modern"><p>他想要成长，他必须蜕变。他不愿意再停留在过去，他想把跟自己的过去相连的东西都抛弃。如果他没有告发麦克，没有离开凯西，生活还会像往日一样继续，但他的心已经不在那里了。他已经要离开了，什么都留不住他了。他的灵魂会飞走，尽管他也不知道自己想飞到何处。他唯一知道的是，不能再在这里停留。</p></div><h1 id="暑假">2022 暑假</h1><p><del>慢慢写吧，祈祷平安无事🙏🏻</del></p><p>开始写 2022 年暑假的事情是在6 月底 7 月初的时候，现在已经到了 9月初了。这几个月自己经历的事情不少，心态和想法也发生了很大变化。那么，总该写些什么吧，记录下暑假以来的生活。</p><p>我大概按照时间线来记叙，希望以此证明我波折不断的生活看上去有一条逻辑线联系起来，虽然我很清楚大多时候每天的生活都过得凌乱而波折不断。</p><p>从哪儿开始呢？就从我的暑假计划开始吧——先谈论完全没有按照计划展开的人生，再谈论中途的变故。</p><h2 id="完全没按照计划的生活">完全没按照计划的生活</h2><p>本来在 5月初，当时因为被旷视挂了，而我自己拒绝了字节后续的面试，就打算暑假不去拧螺丝了，于是做了个如下的假期规划。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph LR;id1{2022 Summer}--&gt;课程 &amp; 科研 &amp; 社工;id1--返校政策出台后--&gt;回家;id1--&gt;读书 &amp; 写作;id4--&quot;语料库(提前爬好)&quot;--&gt;id3;课程--&gt;图形学;id9--&gt;id3;subgraph research    科研--&gt;AIR &amp; 图形学;    图形学 --&gt; 报告 &amp; 原理 &amp; 跑实验;    AIR &#x3D;&#x3D;&gt; DIDL &amp; id6(&quot;what&#39;s next&quot;) endsubgraph lecture    课程--&gt; 英语 &amp; 量子 &amp; id4(SRT);    英语 --&gt; 词力 &amp; 科英;   词力 &amp; 科英 --&gt; 早日背完;   英语 &#x3D;&#x3D;&gt; 托福 --&gt; 早日定考试时段 --&gt; 备考;end  subgraph commitment   社工--准备讲义+讲解+作业--&gt;id3(科协暑培);   社工--&gt;id4 &amp; id2(&quot;实践(线上为主)&quot;)end subgraph enjoyment    写作--&gt;年度总结 &amp; 学期规划 &amp; 读后感;    读书--&gt;民主的细节 &amp; 观念的水位 &amp; id9(&quot;clean python&quot;);    民主的细节 &amp; 观念的水位 &amp; id9(&quot;clean python&quot;) --&gt; 读后感;endsubgraph reunion    回家--&gt;父母亲人 &amp; id10(&quot;寂寞，阿玮&quot;) &amp; 老师 &amp; id8(&quot;付二狗，洪哥，骚鸡，yyb&quot;);     id10--&gt;吉他;end  </pre></div><p>现在看来，自己果然是一个善于根据计划好的生活过得完全 out of control的人。</p><p>从这张图的顶部开始往下说吧。</p><h2 id="回家">回家</h2><p>这个暑假还是仓促回家了一次，毕竟要去见我物理意义的家最后一面。一开始因为疫情波折了许久，直到某天突然下定决心，背上电脑和我的衣物（3kg）和给母亲带的书（44kg）就出发。我和文琦两人非常狼狈才把送我成功登上了去机场的公交。</p><p>回家发生了许多事情。本来想与中学的朋友们多多聚一聚，结果落地当天仓促与Jim一同在金沙吃了夜宵，四川的面条果然甚是治愈我在北京漂泊的心；而决定回北京前两天，我逃回了都江堰，又一次和Crane在灌县的百伦广场聚了一次。我们幻想着下次在世界上的其他地区见面，无论是新加坡还是阿美利卡，然而最后我们还是在百伦相见，估计口口声声说润出去，到头来也离不开从小到大的这些城市罢；最后，走之前见了高中的室友Nick，想着我高一冬天差点和他同归于尽的事情，真是令人发笑。Nick在密院，我在华子。起初他要出国，我想保研。结果两年过去了，事情似乎发生了巨大的反转，真是令人唏嘘。</p><p>倒是回家和小学同学见的很多，非常治愈。你看，小时候大家都想当科学家，我甚至想要成为天文学家。十多年过了，现在我真的要走上职业科学家的路了。我们在故乡聚餐，唱K，划拳斗酒。</p><p>每当我与朋友相聚，似乎总能想起刚刚认识时彼此的模样，心境仿佛也回到了那时。与小学同学相聚，身上多了几分单纯无邪；与中学同学相聚，身上多了几分刻苦与钻研；与大一时的朋友相聚，身上多了几分热忱与希冀。而后呢，现在的我呢？大二的一年，我很长时间刻意避免自己和人类的来往，经过了很长时间内耗和离群索居的生活，然而还是认识了很多新的朋友，也对以前认识的人有了新的认知。我果然是善于社交的，但是和以往不同，我开始竭力对陌生人展示我的恶毒。尤其是对于我所认为的天龙人，更是如此。我会先恶意地攻击他们，如果他们感到不能理解我的想法，那么便不要和我来往，我的人生的确也不缺人际关系，尽管我对我的朋友非常热忱，然而谁离开我也不会如同大一时那般的撕心裂肺。</p><p>或者说，我的人际关系除了感情之外，已经让我得到了充分的幸福感，我需要我的朋友们，他们也需要我；然而，世界没有围绕着我转动，我的世界也没有围绕非我的事物转动，任何人离开我都不会造成大一夏天与大二上学期那般的变故。</p><p>总之，我回家了 9天，陪伴父母长辈，与旧友相聚。我的心灵得到了治愈，我的社会观点也不再如之前一般激烈。和Jim 还有儿时玩伴的沟通，让我开始思考三个新的问题——</p><div class="note info modern"><ol type="1"><li>如果大家都富有了，阶级被消除了，那么人类还会工作和实现人生的价值吗？</li><li>你真的有去基层走过吗，如何才能解决生产力革新导致基层失业的问题呢？</li><li>国外的政治经济经验真的能移植到中国来吗？</li></ol></div><p>出于这些想法，我对出国读博的想法越发单纯，就是探求学术，以及观察他国的社会经验罢了。</p><p>用<ahref="https://zhaochenyang20.github.io/2022/03/31/%E5%87%BA%E5%9B%BD/%E9%A1%B9%E8%84%8A%E8%BD%A9%E5%BF%97/#%E6%B0%B8%E5%88%AB%E9%A1%B9%E8%84%8A%E8%BD%A9">《项脊轩志》</a>的文字来作为这一部分的结尾吧。</p><div class="note success modern"><p>2022 年 8 月 11日，我决意回故乡，一来陪伴父母，二来告别项脊轩。出发前，我却十分悲观——我一向不舍分别，何况是告别幼时养育我的乡土与项脊轩？</p><p>结果 2022 年 8 月 13日，我走下飞机，结束了一年的飘荡，心中的离愁别恨一扫而空。我向朋友们戏称，回村九天，四川治愈了我的精神内耗。</p><p>当然，治愈我精神内耗的不仅仅是故乡，而是亲人、同学与伴我一生的挚友。我仍记得高三时与Crane 重逢，Crane 告诉我人生的羁绊，无论你去向哪里，都不会消散，昨晚我和Crane 在都江堰喝酒，忆起旧时，我竟然眼眶红润。</p><p>至于故乡呢，我的故乡不单单是那座山城，我的故乡还是那些人、那些事、那些绊倒我的田垄、那些埋葬着我先祖也会埋葬我的山林…</p><p>然而，我的故乡其实就是那座山城，她是那么简单，那么单纯，没有高楼大厦，没有灯红酒绿，就那么一条从外改变的街，一些从未忘却的事，还有一些从未走远的人…</p><p>我从十二岁念中学起离开了故乡，此后八年，统共回到故乡驻足不足百日。然而，我却从未离开她。或者说，她从未离开我，她的印记、她的性子、她的魂灵，将伴随我直到永久。直到我垂垂暮年，直到我青春不复，直到我结束一生的漂泊，重回她的怀抱，将我的躯壳埋葬在祖辈长眠的山林，而我的魂灵与她紧紧相拥…</p></div><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Federico%20Bolognini%20(3ieyAVZwZNE).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">临别项脊轩</div>  <p>Let's get out of here</p>  <a href='https://zhaochenyang20.github.io/2022/03/31/%E5%87%BA%E5%9B%BD/%E9%A1%B9%E8%84%8A%E8%BD%A9%E5%BF%97/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Federico%20Bottos%20(8JoQCFbw2tY).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">故土</div>  <p>莫春者，春服既成。冠者五六人，童子六七人，浴乎沂，风乎舞雩，咏而归</p>  <a href='https://zhaochenyang20.github.io/2022/03/31/%E5%87%BA%E5%9B%BD/%E9%A1%B9%E8%84%8A%E8%BD%A9%E5%BF%97/'></a>  </figcaption>  </figure>  </div><h2 id="写作-1">写作</h2><p>除了读后感，我什么都写了。好吧，这个暑假果然没有沉下心思阅读。《CleanPython》还停留在上学期期末的阶段，而《民主的细节》、《观念的水位》直接开摆了，不太喜欢刘瑜的论调，她不是研究政治的，更像是研究文化的。</p><p>至于其他的写作，一来是你现在读到的这份《大二学年总结》，岂止是总结了大二学年，完全是对我本科前两年生活的综述，从中能够读出自己在这两年里的挣扎、不甘、内耗，以及太多太多奋力为之而不可为。</p><p>我还写了两篇其他总结，一是新一年的展望，关于选课、英语、科研实习等等；二是大二学年在AIR 的科研心路。具体的内容，如果你有邀请码，欢迎读一读——</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Daniele%20Franchi%20(cUNADszVGeg).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">大三学年展望</div>  <p>如果已经知道了你即将面对的命运，你还会勇敢前来吗？</p>  <a href='https://zhaochenyang20.github.io/2022/04/24/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E6%80%BB%E7%BB%93/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Jonathan%20Bean%20(5ulmc8IHdLc).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">大二学年的科研心路</div>  <p>说来惭愧，分明什么也没做，却厚颜无耻在此写总结...</p>  <a href='https://zhaochenyang20.github.io/2022/08/16/CS/%E7%A7%91%E7%A0%94/%E5%A4%A7%E4%B8%89%E5%AD%A6%E5%B9%B4/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/'></a>  </figcaption>  </figure>  </div><p>总之，我每天会花费一到两个小时来写作，确实很浪费人生，但是做什么不是浪费人生呢？我还能把写作视为爱好，作为对抗这魔怔华子生活的安乐园。即便世人都觉得我疯癫度日，我却能在写作中享受短暂的安宁。</p><p>此外，不少人读过我的文字，我其实也不知道为什么会有人访问到我的博客。我没有把博客挂载到GoogleMap 和BaiduSearch，也许就是希望看到他的，要么是我主动分享给的朋友，要么是无意间走入了我的天堂岛的冲浪游客。然而，我的博客有了些阅读量，算是欣喜——毕竟我也想成为一个文字具有力量，能够影响我所处社会的伟大作家；然而，我已经察觉到了会为未来埋下某些隐患，出现某些意想不到的不快之事。不过，对我而言，发生任何事情，也不能阻挡我，所以倒也无所谓。</p><p>记得几周前，一位朋友给我说，他们组组会的时候，几个至理信计的哥么，把我的《年度总结》拿出来批判了一番，读完了评价道——这人怎么这么卷？</p><p>我只得苦笑，没人比我清楚我的水平，何况大二学年我的排名也并不光鲜亮丽。</p><div class="note info modern"><p>知我者，谓我心忧</p><p>不知我者，谓我何求</p></div><h2 id="社工-2">社工</h2><h3 id="暑培">暑培</h3><p>首先是科协的暑培吧。</p><p>首先来谈谈联创的小作文吧，不得不感慨联创的同学们非常优秀，做出的成果让我震撼。我想想，是否该写个小作文来纪念下，本来想发到朋友圈的，但是仔细思考了下，不值得。</p><div class="note danger modern"><p>你需要时刻警惕，感动自己都是危险的，何况是渴望感动他人…</p></div><p>那么，话该从何处说起呢？</p><p>回到和 Python见面的那天起吧。大一寒假，我听游导的建议，在廖雪峰的博客上开始自学Python。那学期因为程设期末考试动态规划彻底失败，导致我竟然丧心病狂到一开始就用Python写算法题。我草，那么多优美的库和包，我都不会，就只知道读取输入，而后做算法，何况对list 和 dict这类最基础的数据结构都不熟悉，实在是太过失望。我当然得感谢游导，让我知道我该学习Python，然而我自己误入歧途，侮辱了 Python。</p><p>一年前我参加暑培的时候，不得不说，状态极差，主要是因为和 A的关系问题，那个夏天自己真的是崩溃的难以接受，以至于一个夏天啥都不会，拿着我的Windows 折腾一个夏天，conda 配了也不会用，何况 windows 上的那么多冗杂的bash 环境，让人作呕。小学期的 Python 呢？在 lambda 和 c7w的精准扶贫下，先后完成了 django 和爬虫，那时候还是一个文件写到底，tryexcept 都是高老板教我的。</p><p>那么，Python 究竟是怎么学会的呢——被毒打惯了，就会了。</p><p>开学之后，进实验室之前，我先是冲动消费买了 mac，而后让 xdjj 帮我配了conda 和 git 等等。她在我面前优雅地关闭了vim，简直让那时的我无比佩服。之后学习了很多 conda 指令，而后学习linux，在 SRT 上开始大量使用 Python。我和 Python真正的故事才正式开始——</p><div class="note success modern"><p>我和 C++ 都只是玩一玩，和 Python 才是真感情…</p></div><p>而后，在实验和 SRT 中大量使用Python，加之广泛地阅读经典，学习各种骚操作，而今 Python已经成为了我的母语。甚至还写了很多篇笔记来记录自己的 Python学习。我渐渐地理解到，我在我所存在的社会关系里，就是 Python一样的胶水吧。联结各个部分，联系起很多有趣的人。不过 Python是大家都喜欢的，无论是否学习计算机，我也希望如此。</p><p>新的一年，还是希望暑培能够讲好 Python，在我的工作中学好 Python，做好Python。</p><p>一年前，我很菜，啥都不会，被小学期和 SRT暴打，暑培啥都听不懂。一年后，我还是很菜，不过轮到我来讲暑培了。</p><div class="note info modern"><p>我当以什么来歌颂你，我的 Python？</p><p>许你以热泪，许你以热忱，许你以鲜花，许你以痴狂…</p></div><p>至于暑培的课程——第一三节课是我来讲。第一节课感觉讲的很上心，人也很多，第三节课自己想讲的太多，但是没太讲好。自己对暑培的念想，多少是来自自己对leadership 的渴望。这种广义的 leadership，大概有：</p><div class="note success modern"><ol type="1"><li>带领自己的团队：从四五人的课程小组，到十余人的联创，再到以后数十人的实验室，甚至是自己的团队、企业，希望能够一步步地学习作为团队领袖的素养和能力</li><li>与人沟通，表达自我：从与人一对一的非正式或正式沟通，更大规模的会议上的汇报与沟通，还有面对数百人讲述故事的能力，类似TED，甚至是如同乔布斯那般，开 Apple 发布会的能力</li></ol></div><p>从这点来看，上了大学，自己的 leadership越发好了起来，但是也需要更多的刻意训练。而暑培也算是很成功的一次经历，符合我的预期。美中不足的是，自己在第二周开始压力太大，退了实验室和暑培的活，反手交给了联创两个小朋友。整体上对自己的锻炼很大，很值得，也让我越发爱上了自己的事业。</p><h3 id="联创">联创</h3><p>自己的部门，从搭建，到招人，到运维，到骗新的朋友进来，都是自己亲手做的，很开心。目前工作上没犯什么错误，而且联创小朋友的工作非常好，特别是宣传的推送。</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Samsung%20Memory%20(ml0NvYqpn7Q).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">暑培 3.0</div>  <p>因人而异，授人以渔因人而异，授人以渔</p>  <a href='https://mp.weixin.qq.com/s/fAFB2kOFQLbCrKvcagUnAQ'></a>  </figcaption>  </figure>  </div><p>除了工作，还帮小朋友们解决了些小学期问题。</p><p>希望能带领自己的部门，培养自己的领导力和协作能力，互帮互助。</p><h3 id="实践">实践</h3><p>直接开摆了，<del>真是对不起孤零零的认真负责</del></p><p>其实去了也该是很有收获的，听 Queen 和鲁大师、易多鱼他们谈过收获。</p><p>为了实践，认识了些新朋友。</p><p>这里放两个实践相关的文章，第一个是我写的，第二个是 Queen 写的。</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Fallon%20Michael%20(B_RPtfSiF-A).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Queen 的转述</div>  <p>中通老总竟然毫不客气的说，我们的优势非常显著</p>  <a href='https://zhaochenyang20.github.io/2022/07/31/%E9%9A%8F%E7%AC%94/%E6%B8%85%E5%8D%8E%E5%9B%AD%E6%97%A5%E8%AE%B0/%E6%B8%85%E5%8D%8E%E5%9B%AD%E6%97%A5%E8%AE%B0--%E7%AC%AC%E4%B8%83%E9%83%A8/#%E6%99%9A%E4%B8%8A-2130'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20eberhard%20%F0%9F%96%90%20grossgasteiger%20(TwWmbN3mxzU).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">通衢漫记</div>  <p>我还难得窥见了社会经济这一部庞大机器是如何将人卷入其中，又是如何顺畅无碍地运转，塑造着每一个他者的生活。</p>  <a href='https://penrose819.github.io/2022/08/04/%E9%80%9A%E8%A1%A2/'></a>  </figcaption>  </figure>  </div><h2 id="托福">托福</h2><p>这个暑假，我万万没想到，居然我大多时间在挣扎英语，而非科研与工作，但是无奈发现自己的英语水平显著降低，需要恶补。</p><p>我现在非常羡慕 A，因为她早早考出了令人惊讶的托福和 GRE成绩，然而我下定决心出国并且和家里沟通好都到了大二下学期，直到大三开学都没有语言成绩。</p><p>语言考试哪有那么简单，说什么一个半月110，反正我是比较菜，做不到。但是这玩意就是靠坚持吧，开学后得把这种工作融入到每天的生活中。</p><p>用<ahref="https://jamessand.github.io/2022/09/05/LastWeek2022/">沙总日记</a>里的一句话来自勉：</p><div class="note info modern"><p>贪多是我一直以来的一个问题。我知道做好一件事情最重要的是持之以恒，而我在想，吃饭睡觉是每天持之以恒做到的事情，这说明我们有每天坚持的能力。所以我想我需要将我所想要做的事情，一点一点地加入到我每天持之以恒的部分当中。当我加不进去的时候，这说明到达了我的能力极限。这种方式能保证我所有开始做的事情都能做的很好，而不是将所有事情同时开始，然后一起放弃掉。所以，接下来我将要将GRE 作为加入我生活持之以恒部分的开始。</p></div><p>下个学期如果科研压力大，就不去上科英了，但是托福单词必须滚动学习走。不过，看论文也挺能能锻炼英语的，生草了…</p><h2 id="课程">课程</h2><h3 id="量子-a-">量子 A-</h3><p>很神奇的课，据往年平价有平时小作业，还有大作业。结果今年感觉老师和助教都在摆烂，各种工作到了DDL 才有回声。最后的大作业在此：</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Daniel%20Olah%20(C_4sByaxyn4).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">THU QCS</div>  <p>清华大学计算机夏季小学期 QCS 课程笔记</p>  <a href='https://github.com/zhaochenyang20/Quantum_Project'></a>  </figcaption>  </figure>  </div><p>贴一下朋友圈的文案——</p><div class="note info modern"><p>暑假参与的量子计算课程终于撒花了</p><p>见证了高达 71％ 的退课率，还是在书鸿学长和鲁大师的搀扶下艰难完成</p><p>进行一个工作的分享——</p><p>https://github.com/zhaochenyang20/Quantum_Project</p><p>此外，还熟练地学会了用 n+e 学长的 Beamer 模板来写slides（可惜被季老师指出内容太多了）</p><p>非常棒的合作体验，果然我是资深 Git 工程师</p></div><p>多亏了鲁大师和书鸿学长，带着我一路爬，我负责做美化和用 mathpix抄基础部分，他们负责审核，最后我来答辩。这课没几个人撑到最后…</p><p>最后出分老师也超级摆烂，过了很久才出分。我们组感觉卷的还是很厉害，给了A-，我知道 Nauy 他们做量子算法，给了A。总之，可以不用上高性能了，真好。</p><h3 id="建政">建政</h3><p>《当代世界重大政治议题研讨》，本来没选上，但是我喜欢刘瑜的一些观点，手选上了。结果听说因为疫情和同学们要实习啥的，被橄榄了。子睿也退了，以后有空再多读读书，不一定要选课。反正下学期有《电影与政治》课。</p><h3 id="srt-1">SRT</h3><p>还没立项，<del>我们就提前开卷了</del></p><p>找了三个小朋友，一个软院，俩贵系，带着一起做了项目 +写文档。Quenti、若凡挺强的，我把若凡骗到了我司，下学期白躺 2学分，真香。</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Lucas%20Davies%20(wI1Vfy7t184).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Sino-Japanese-Relations-analysis</div>  <p>日本购岛时间中的中日“网络民族主义”分析</p>  <a href='https://github.com/zhaochenyang20/Sino-Japanese-Relations-analysis/tree/main/docs'></a>  </figcaption>  </figure>  </div><h2 id="人际关系-1">人际关系</h2><p>暑假认识了新的朋友，比较有意思的算是联创的几个小朋友，都挺靠谱，值得栽培。而后是孤零零和Queen，虽然很早就认识了Queen，但是现在才发现我们多么意气相投，而且很有同感。至于孤零零，我甚是热爱她的文字。当然，还有cmh，Quentin，泠邪…</p><p>人际关系，多少和感情沾亲带旧，但是这个假期，任然没有浪漫的事情发生，说来遗憾。不过我似乎告别了过往的诅咒，我不再把过去的人符号化，我感觉很平淡，就是过去的事情罢，我走向了新的人生。退回一年前，你会想象到如今的人生吗？不会，但是人生就是这样，这是你想要的生活吗？我回答不上来，但是我热爱这样的日子。</p><p>新的一年，二十岁了——</p><div class="note info modern"><p><strong>女朋友是不可能找的到的，我只想要我的生活稳定下来。</strong>——<ahref="https://wenqi-wang20.github.io/2022/02/16/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/">《文琦的年度总结》</a></p></div><h2 id="出国的想法">出国的想法</h2><p>见<ahref="https://zhaochenyang20.github.io/2022/04/24/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E6%80%BB%E7%BB%93/#%E6%9C%AA%E6%9D%A5">未来一部分</a>吧。</p><p>或者，可以参考我的<ahref="https://zhaochenyang20.github.io/2022/02/03/%E5%87%BA%E5%9B%BD/Night%20Voyager/">《NightVoyager》</a>。</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Dahee%20Son%20(tV06QVJXVxU).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">未来</div>  <p>有些鸟注定是关不住的</p>  <a href='https://zhaochenyang20.github.io/2022/04/24/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E6%80%BB%E7%BB%93/#%E6%9C%AA%E6%9D%A5'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Andre%20Benz%20(e4xOmzd8vzg).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Night Voyager</div>  <p>永别啊，我曾凝望，视若归途的日出，将梦初醒</p>  <a href='https://zhaochenyang20.github.io/2022/02/03/%E5%87%BA%E5%9B%BD/Night%20Voyager/'></a>  </figcaption>  </figure>  </div><h2 id="科研-2">科研</h2><p>成长就是背叛，没有离开，就没有到达…</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Willian%20Justen%20de%20Vasconcellos%20(PlK0RA-5a0c).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Chain of Thought Working Notes</div>  <p>My research concerning CoT and in-context learning at SenseTime during Fall 2022</p>  <a href='https://zhaochenyang20.github.io/2022/08/20/CS/%E7%A7%91%E7%A0%94/%E5%A4%A7%E4%B8%89%E5%AD%A6%E5%B9%B4/chain_of_thought/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://raw.githubusercontent.com/zhaochenyang20/ivue_wallpaper/main/ivue_desktop/Photo%20by%20Jonathan%20Bean%20(5ulmc8IHdLc).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">大二学年的科研心路</div>  <p>说来惭愧，分明什么也没做，却厚颜无耻在此写总结...</p>  <a href='https://zhaochenyang20.github.io/2022/08/16/CS/%E7%A7%91%E7%A0%94/%E5%A4%A7%E4%B8%89%E5%AD%A6%E5%B9%B4/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/'></a>  </figcaption>  </figure>  </div><h1 id="结语">结语</h1><p>到次，这篇漫长的大二学年总结就结束了。非常感谢你有兴趣点开这份总结，收看Eren 过去一年的挣扎和一事无成。</p><p>对于未知的将来，我不知道我要去向哪里，我也不知道我会如何到达，我只知道，我会离开这里…</p><div class="note info modern"><p>他想要成长，他必须蜕变。他不愿意再停留在过去，他想把跟自己的过去相连的东西都抛弃。如果他没有告发麦克，没有离开凯西，生活还会像往日一样继续，但他的心已经不在那里了。他已经要离开了，什么都留不住他了。他的灵魂会飞走，尽管他也不知道自己想飞到何处。他唯一知道的是，不能再在这里停留。</p></div>]]></content>
    
    
    <summary type="html">成长就是背叛，没有其他的道路。没有离开，就没有到达...</summary>
    
    
    
    <category term="写作" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/"/>
    
    <category term="总结" scheme="http://example.com/categories/%E5%86%99%E4%BD%9C/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="人类社会观察" scheme="http://example.com/tags/%E4%BA%BA%E7%B1%BB%E7%A4%BE%E4%BC%9A%E8%A7%82%E5%AF%9F/"/>
    
    <category term="2022夏季" scheme="http://example.com/tags/2022%E5%A4%8F%E5%AD%A3/"/>
    
  </entry>
  
  <entry>
    <title>我们的伟大与渺小</title>
    <link href="http://example.com/2022/04/13/Lecture/2022%20Spring/%E6%88%91%E4%BB%AC%E7%9A%84%E4%BC%9F%E5%A4%A7%E4%B8%8E%E6%B8%BA%E5%B0%8F/"/>
    <id>http://example.com/2022/04/13/Lecture/2022%20Spring/%E6%88%91%E4%BB%AC%E7%9A%84%E4%BC%9F%E5%A4%A7%E4%B8%8E%E6%B8%BA%E5%B0%8F/</id>
    <published>2022-04-13T10:15:08.391Z</published>
    <updated>2022-08-26T16:20:40.996Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言">前言</h1><p>对苏联最早的记忆始于 2018年的圣诞节。那时还是高二，尚不知人类社会的诸多遗憾。圣诞节那天，我的高中母校（成都外国语学校）发布了通知，成都市政府禁止过圣诞节，似乎全中国上下的地方政府都在发布类似的公告。我先是嘲笑我的母校，堂堂的外国语学校最喜欢宣传自己不过洋节。</p><p>然而，叙述这段外国语学校不过洋节的目的，却只是想为自己接下来的文字增添几分荒诞的幽默。2018年的圣诞节，我记忆最深刻的其实是——我第一次知道，就在 1991年的圣诞节，积重难返的红色巨人彻底解体，留给了加盟国其后数十年无数的动荡与无奈。多少年来，有的人哀婉叹息，感慨巨人的陨落。有的人拍手称快，高呼这是自由民主的胜利…</p><p>在这之前的若干多年里，我不断的接受着各式各样的西方思潮。可是那一天，我第一次意识到世上曾有这样一个由无产阶级劳动人民创造的伟大国家，我第一次发觉，原来初中时所神往的大道之行，天下为公的理想社会曾经真实地存在…</p><p>他的诞生是何其的壮美，而他的陨落又是何等的悲凉。多年以后，重读苏联解体前后无数的史料，我的记忆又回到了2018年年少的冬夜，然而对人类社会的认知却早已不同。趁着毛概课上听陆老师讲解了苏共二十大上赫鲁晓夫的秘密报告，我又一次系统性的重新梳理了我对苏联历史的看法。如今的我坚信“经济基础决定上层建筑”，在充分尊重唯物史观和客观生产力发展水平的基础上，做此文章，纪念百年前的红色巨人。</p><h1 id="唯物史观的伟大胜利">唯物史观的伟大胜利</h1><h2 id="农业社会">农业社会</h2><p>为了证明苏联诞生的伟大，我们需要回望数千年来的人类历史。在工业革命之前，农业社会只有一个本质特征——生产力落后——其他的政治或者文化特征无非是在落后的生产力上所建立的简陋的茅草棚屋。</p><p><imgsrc="https://pic.imgdb.cn/item/61fa97802ab3f51d914ba160.jpg" /></p><p>十八世纪之前，人类社会的经济基础始终是生产效率十分低下的农业与手工业。在这一时期，绝大多数人只能生产略微超过自己需要的产品。一旦社会稍微富裕一点，快速繁衍的人口又会降低人均土地和原材料，让剩余产品回到原来的水平上，导致绝大多数人类长期处于仅仅能够物资自足，甚至粮食歉收的年份忍饥挨饿乃至爆发动乱的贫困状态。</p><p>贫穷不仅仅意味着缺少生活必需品，还意味着缺乏战斗力。在低效率的农作之外，普通人连识字都是稀缺能力，更不存在对整个社会进行深入的思考。同时，穷人身体孱弱，变卖房产也换不到一套武器装备，所以十个农民也难以战胜一个专业武士。故而在古代社会，只要极少量的军事贵族加上专业知识分子，就能在物质和精神上统治众多农民，把他们的剩余产品都抢夺过来。</p><p>反过来说，每个农民所能贡献的剩余产品很少，军事贵族和知识分子必须统治充分多的农业人口，才能养活自己优越的生活。这意味着农业社会的稳定结构注定是多数人依附于少数人，少数人统治多数人，用严格的等级制度限制每个人的生活方式。</p><p>因而，自从人类进入农业社会，尤其是金属工具普及之后，等级制社会结构就基本建立。接下来直到工业革命前的几千年间，统治阶级不断更替，但统治基础和模式却并未产生明显基础。</p><p>这种停滞穷困的社会，历代都有人想打破它。比如说农民起义，比如说宗教领袖或者贵族官僚在内部搞改良，建立一个更理想的社会。但是，正如前言所叙述，经济基础决定上层建筑——农业社会的结构，是经济基础决定的。只要普通人只能生产出略多于基本生存需求的财富，等级制和一定程度的人身依附制度就不会变。暂时打破也肯定很快回到原来的状态。只有通过生产力革命改变生产效率，然后通过社会革命改变社会制度，社会才能现代化。</p><h2 id="双元革命">双元革命</h2><p>阻遏人类社会进步的低下生产力在十八世纪迎来了巨大的改变。从十六世纪发现新大陆开始，新开发的土地给欧洲文明提供了远远超出本土的资源，缓解了欧洲的经济和政治压力，更引导欧洲文明开拓了包围整个地球的商业航线，让欧洲积累了远超出其他农业文明的财富。这些财富可以用来供养更多的技术人员和商人，提升手工业水平和贸易规模。</p><p><imgsrc="https://pic.imgdb.cn/item/61fa97a52ab3f51d914bcbc3.jpg" /></p><p>接下来，西欧的手工作坊首先开始使用煤炭驱动蒸汽机，工业革命爆发了。在这一时期，英国和法国这两个农业基础最好的西欧国家同时站到了现代化的门槛上。为了争夺全球贸易的主导权，十八世纪中期，英国和法国展开了第一场全球争霸战——七年战争。</p><p>七年战争的结果是英国赢了，变成了全球帝国，跨越了工业革命的门槛，法国虽然还是强国，也紧随跟随英国完成了工业化，只能变成次一等的国家。法国随即爆发内部矛盾，出现统治阶级大洗牌——所以法国人先用国民公会夺了国王的权，后来还投票送路易十六上了断头台。</p><p>按照上文所说的农业社会规律，就算造反成功夺权，就算社会改良起初提出了颇具创意的口号，但受限于落后的生产力，造反后的社会还要回归到农业社会的旧制度。但法国在和英国争霸的时候，本来已经是全世界最发达的农业文明了，已经碰触到了农业社会生产力的边界，逐步进入工业社会。</p><p>所以，法国大革命虽然掺杂了很多农业文明历史循环的因素，但是由于生产力已经发生了根本性变革，法国大革命真的和农业社会任何一次造反都不一样，把很多理想主义方案变成了现实，而且产生了长期影响，带动了整个社会进步。现在世界各国基本公认的价值观——自由平等、民主法治，都起源于法国大革命。</p><h2 id="无产阶级">无产阶级</h2><p>双元革命一旦爆发，就开始影响全世界，也让最先掌握这两场革命力量的国家逐渐征服全世界，出现了一个新的既得利益集团——资产阶级。他们有一个共同点，就是重视经济增量，愿意把手上的财富不断投入扩大再生产，开发新科技。</p><p>这个特征在今天看起来天经地义，在农业社会末期看来，是不可思议的行为，因为农业社会的经济基础是肌肉劳动，人类的肌肉劳作是存在明显上限的，投资在其上并不能提社会高生产力。</p><p><imgsrc="https://pic.imgdb.cn/item/61fa97be2ab3f51d914be97a.jpg" /></p><p>但是工业革命改变了经济基础，用煤矿和蒸汽驱动的机器生产效率不再受肌肉限制。持续投资能够优化机器的结构和功能，进一步提高生产力。所以资产阶级越来越兴旺，财富越来越多，对生产力的投资越来越大。最后资产阶级主导了国家政权，建立了资产者主导的资本主义社会。</p><p>有资产者，就有无产者。英国工业革命提供了新的工作机会，法国大革命打碎了封建身份制度。当不成资产者的人，可以进工厂，给资本家干活，从事更高效率的生产劳动。不过，虽然工人的生产效率比农民高，但是他们的工资并不取决于生产效率，而是只是略微高于农作。在革命打散封建体制之后，只要工业化还没有覆盖整个国家，总有农民不断从农村出来和城里工人竞争工作。工资一定会停在比农民高不了多少的水平上，工人很难积累财富，这就是产生了最初的无产者——掌握了先进生产技术却没有原始财富积累的工人阶级。</p><p>无产者拿着比农民高一点的收入，却失去了农村熟人社会互助的保障。而且工商业经济的波动要大于农业，经济形势不好的时候，工人容易失业，不像农民那样还有一点基本口粮，饿死的风险更高。所以无产者对双元革命后的现代社会并不满意，只能在经济持续增长的时候才能和资产阶级妥协，一起搞生产。</p><p><imgsrc="https://pic.imgdb.cn/item/61fa97cc2ab3f51d914bf976.jpg" /></p><h2 id="生产过剩">生产过剩</h2><p>虽然资本主义制相较农业社会的封建与奴隶制度已有了巨大进步，但其本身仍然有问题。正如前文所说，工人的生产率远超出农民，但工人的消费能力却无法摆脱自己的收入水平，仍然停留在农民水平。工人阶级不可能把自己制造的商品都买下来，因而资本主义只有在两种情况下才能运转。</p><ol type="1"><li>更新生产技术，让一部分工人去造新设备，暂时不生产商品，这样工资可以覆盖商品。</li><li>寻求外部市场，把商品倾销到其他地区。</li></ol><p>类似工业革命这样更新生产技术的机会不常有，但英国出动数千人的军队就能战胜最为强大的传统农业国家——清朝，因此寻求外部市场往往更为方便。为了寻求外部市场，达到对外掠夺和剥削的目的，资本主义社会需要不断限制他国的发展，只允许自己搞高效率生产，迫使他国仅仅只能提供稳定的市场。具体而言，英国人逼中国签《南京条约》的第二年，又规定了中国关税税率，且禁止中国自己调整关税。相对物美价廉的资本主义工业产品在中国国内倾销，目的便是彻底让中国放弃搞高效率生产，只能接受资本主义世界的商品或者投资。</p><p><imgsrc="https://pic.imgdb.cn/item/61fa97e42ab3f51d914c14a7.jpg" /></p><p>但其他国家地区绝不会心甘情愿被资本主义国家搞经济侵略。何况英法双元革命之后，全世界都目睹着西欧和美国的社会繁荣，国家强盛。资本主义制度下，虽然底层人民生活仍然清苦，但是也或多或少能分一些好处，所以还处于农业社会的世界主流国家都想打破本国的传统社会，进行本土的双元革命。</p><p>到了 1848年，资本主义的外部市场扩充进入瓶颈，欧洲内部倒是不少国家积极地推翻着旧秩序。革命很快蔓延到整个欧洲，甚至还扩散到欧洲之外。这个时候，马克思和恩格斯合作写著了广为流传的战斗宣言——《共产党宣言》。</p><p>马克思首先承认了资本主义客观上的进步，在工业革命结束后的几十年里推动了整体社会发展，体现了资本主义制度相对封建或是奴隶制的先进性。然而资本主义制度周期性的经济危机与随即触发的社会动荡是其不可否认的缺点。</p><p>接下来，他指出当前的社会格局已然改变——以往的革命和造反，都是因为财富太少。但是现在资本主义社会却荒唐的因为生产的商品过多而周期性爆发经济危机，影响无产者的就业，最终引发了社会动荡。马克思认为生产力发展已经到达了资产阶级需要反过来要限制生产力发展的地步了，所以人类应该超越资产阶级社会，建设一个能更能充分发挥工业力量的美好社会。</p><p>至于谁来取代资产阶级，马克思认为是无产者。当时的欧洲资产阶级作为既得利益者，不允许底层掌握技术的工人技师加入资产阶级，费尽心力要将他们禁锢在无产阶级。所以当时的无产阶级既对资本主义社会不满，又掌握最先进的生产技术，看起来的确适合取代资产阶级，控制工业社会。</p><p><imgsrc="https://pic.imgdb.cn/item/61fa97f52ab3f51d914c292a.jpg" /></p><p>在马克思主义和其他相似的观点指导下，各国都出现了依靠无产阶级的革命党。这些人虽然也发动农民，甚至也广泛的来自农民，但和农业时代活不下去而造反的造反者有根本不同。他们坚信自己夺取政权之后，能建设一个更富裕进步而自由的社会。在俄国，这就是列宁领导的布尔什维克党。</p><h2 id="世界大战">世界大战</h2><p>虽然资产阶级内部矛盾不断，然而客观上仍然存在并未被资本主义国家倾销的新的外部市场，因此虽然马克思在十九世纪初叶就发表了无产阶级的斗争纲领，但是资本主义国家的内部矛盾还未激化到非革命不可的地步。</p><p>然而，到了二十世纪，全世界都被欧美资产阶级征服了。从澳大利亚到拉丁美洲，从中国印度到整个非洲，再无法寻得新增的外部市场来提供购买力。从蒸汽机到内燃机的科技进步还尚不成熟。资本主义维持稳定的两个情况都不符合。所以几个资本主义强国爆发内部冲突，准备把对方的生产力击碎，让对方沦为自己的市场，只能出售原材料，买自己的商品。塞尔维亚一声枪响，结果就是第一次世界大战。在一战以前的战争是因为财富的匮乏，然而一战却是因为财富过于盈余，这就是六十年前马克思预言的因生产过剩而产生的荒谬战争。</p><p><imgsrc="https://pic.imgdb.cn/item/61fa98002ab3f51d914c36ec.jpg" /></p><p>第一次世界大战爆发的时候，军事技术恰好发展到一个不利于进攻的阶段——机关枪这样的重型武器的出现极大提高了军队的防御能力。但是内燃机不够发达，早期的汽车拉不动这些机枪大炮。一旦离开铁路，机枪大炮只能靠人和马拖着走，行动非常慢。就算强势一方打了胜仗，也只能缓慢前进到地方的下一个据点，和下一波机枪大炮相互厮杀。</p><p>资本主义国家间的战争持续了三四年，互有胜负，每个强国却都因为对方的机枪大炮损失了上百万人的职业军人，又动员几百万的成年男性劳动力充当炮灰。直到1917年，整个欧洲的青年男性几乎都去当兵了。他们逐渐意识到，如果战争不停下来，整个欧洲的无产阶级都会被征兵，都会死在前线。而马克思主义的宣传又让普通士兵认识到，资产阶级国家不是自己的国家，资产阶级战争不是自己的战争。敌人的士兵和他们没有矛盾。仅仅是因为资产阶级无法处理过剩的商品，资产阶级国家才彼此打仗。</p><p>接下来，兵变席卷了欧洲乃至全世界。列车从前线开回，普通士兵拒绝打仗，纷纷将枪口对准欺骗自己走向前线的军官。就在这一阶段，列宁组织起沙俄的无产阶级士兵们。在这一片混乱之中，他号召士兵们不仅要离开战场，还要回头去推翻资产阶级政府和军官，和工人一起建立新型国家。</p><p>他庄严的向士兵们宣誓，这个前所未有的政权将会给无产阶级人民带来平等和富裕。还一定能比资产阶级更擅长搞工业，利用双元革命带来的发展机会，给所有人带来富裕和自由。</p><p>第一次世界大战就这样戏剧性地结束了。沙皇退位，政权传递给资产阶级，然后无产阶级士兵在布尔什维克带领下夺取政权。1922年，镰刀与锄头象征的工农阶级国家在东欧呼啸而起。建立起了人类历史上第一个伟大的社会主义国家。<imgsrc="https://pic.imgdb.cn/item/61fa98102ab3f51d914c4a34.jpg" /></p><h1 id="我们的伟大与渺小">我们的伟大与渺小</h1><h2 id="建立偶然而解体必然">建立偶然而解体必然</h2><p>成也萧何，败也萧何。在红色巨人解体后的三十余载，无数东西方的学者激烈的讨论着苏联解体的方方面面。有人认为，苏联解体是由于斯大林体制长久的弊病，有人认为是戈尔巴乔夫激进的经济改革，也有人归因为西方世界的和平演变。然而，我自己认为，苏联解体或许存在上述的所有原因，但是这些都不本质。</p><p>我认为，苏联解体的本质原因和苏联存在的原因完全一致——生产力发展水平不足。</p><p>首先，唯物史观指出，生产力发展水平是决定社会制度与意识形态的根本，或者说，经济发展水平是最本质的决定因素，也即经济基础决定上层建筑。在尊重唯物史观的基础上，社会主义制度所需要的生产力发展水平远远超出了苏联任一时期的生产力发展水平，基于一战结束后沙俄落后的生产水平，苏联得以偶然建立，然而必然解体。</p><h2 id="偶然的建立">偶然的建立</h2><p>在苏联建立之前，沙俄遗留的生产力水平即便在资本主义世界也达不到顶级水平，尚未触及到资本主义不得不迈向社会主义的瓶颈。然而在一战结束之后，参战的欧陆国家普遍爆发了社会动荡。正如前文所述，在俄国，列车从前线开回来，倒逼沙皇退位，最终权利辗转到了布尔什维克党。而德国士兵集体兵变，赶走了皇帝和资产阶级政府。法国军队也一度有几十个师放弃战线，准备回去收拾那些送他们去死的军官。</p><p>但是，最终只有俄国建立了稳定的苏维埃政权。原因是各国的生产力发展水平和资本阶级发展水平各不相同。西欧率先完成了工业化，资产阶级掌握资源比较多，而且经过长时间的发展，已经丢掉了贵族范，允许优秀的无产阶级通过学技术，加入自己的行列。所以在战争结束后还能稳定局势，勉强维持原来的政权。而工业革命从西向东，最晚传入俄国，俄国的资产阶级比较弱，还偏偏喜欢和贵族阶层结合，不允许技术工人加入自己，结果就被布尔什维克打垮。</p><h2 id="必然的解体">必然的解体</h2><p>苏联建立是因为资本主义生产力足够落后——沙俄资产阶级还带着大量的农业社会残留，在一战结束的历史节点上更容易被推翻。苏联的解体也是因为生产力的落后——即便是2022 年的中国也只能勉强迈入社会主义初级阶段，何谈 1922 年的苏俄？</p><p>按照马克思的观点，他认为生产力发展已经到达了资产阶级需要反过来要限制生产力发展的地步了，所以人类应该超越资产阶级社会，建设一个能更能充分发挥工业力量的美好社会。</p><p>然而，在巴黎公社建立 150年后的历史看来，人类社会的生产力远没有整体达到马克思认为不得不建设社会主义的地步。按照唯物史观，人类社会分为五个阶段：原始社会，农业社会，资本主义社会，社会主义社会，共产主义社会。五个阶段最本质的推动力是生产力水平，而且从原始社会到农业社会再到资本主义社会，所需的仅仅是部分地区的生产力发展，古代农业大国中国的繁荣与英国成为资本主义社会即为典例。然而，从资本主义社会过度到社会主义社会，需要的是整体人类社会的共同发展。</p><p>正如前文所述，只要还不断有农民进入城市，无产阶级的收入就会被拉低。同样的，只要世界上还有生产力绝对落后的地区，资本主义就会寻求外部市场，对外进行掠夺和剥削。资本主义社会不断限制他国的发展，只允许自己搞高效率生产，迫使他国仅仅只能提供稳定的市场。</p><p>从这一角度，如今的资本主义世界仍然可以广泛的剥削外部世界，缓解因为生产力过剩产生的矛盾。只要还有国家的生产力绝对落后，沦为了资本主义世界剥削的原料市场，资本主义世界就不会爆发根本性的矛盾。</p><p>反而，如果一个相对生产力落后的国家，偶然间建立了社会主义政权，反抗被资本主义国家强迫沦为市场的命运，就会被生产力水平更强的资本主义世界联合打压。这样的国家，要么是动荡而后艰难的发展——中国，要么是彻底地闭关锁国，对内制造愚民政策——北朝鲜，最后，也有可能短暂地在机缘巧合下利用社会主义的部分优越性建立强大的政权，然而最终会因为生产力水平无法支持社会主义且和顽固的资本主义社会发生激烈的冲突而陷入内部矛盾导致灭亡——苏联。</p><h2 id="何为社会主义">何为社会主义</h2><p>讨论了苏联建立的伟大与唯物史观之后，我希望能够定义我认为的社会主义。</p><p>回到马克思理论本身，马克思指出了社会主义不是什么。他认为社会主义不是压迫，不是暴力，不是不平等，然而马克思没能指出社会主义是什么。或者说，马克思所处时代的社会生产力水平不足给予马克思充分的想象力，让他定义什么是社会主义乃至共产主义。</p><p>我认为，高水平社会主义国家具有如下特点：</p><ol type="1"><li>自身实体工业的生产力足够发达。且全世界的生产力都能够和当下生产力最强的国家——美国的现有水平媲美，乃至超出。或者说，全世界的每个国家的人均GDP 超过 6.5 万美元。</li><li>不存在任何意义上的剥削，无论是对内还是对外剥削，无论是直接还是间接。</li><li>人民足够富足，即便存在客观的收入差距，然而收入最低的人仍然具有能够丰衣足食的收入。更具体地说，可以定义为，收入最低的人仍然能够依靠十年内积攒的积蓄在国内任意一座人口超过十万的城市购买下三十平米（不包含公摊面积）的住房。</li><li>充分尊重人权与各个种族，各个少数群体。</li><li>具有强大的中央政府，能够集中国家机器完成艰巨的社会建设任务。</li><li>政府允许在学术范围内对社会制度的激烈讨论，也能够合理控制会对整体社会造成极大动荡和不良影响的舆论。</li></ol><p>从这一角度出发，我认为，现阶段没有任何一个国家达到了社会主义国家的水平。</p><p>首先，美国的生产力目前仍是世界最强水平。注意到我定义的是全世界能够超过美国的现有水平。暂不考虑生产力的发展具有加速度，即便是美国的生产力绝对静止，整体人类社会超过美国仍然需要极长的时间。</p><p>第二，国内舆论鼓吹北欧或者部分西欧国家已经达到了高水平社会主义国家，然而这些国家应该是达到了资本主义高度发达的水平，而绝不是社会主义。这些国家，诸如荷兰和丹麦，虽然通过极其高的税收强行将国家总统和清洁工人的收入拉平，实现了收入平等，基于此实现了社会的内部平等，几乎消除了内部剥削，然而他们并没能消除对外的间接剥削。比如，列支敦士登和瑞士这样的国家，他们的经济基础是银行业，而非实体工业，且银行业本就带有强烈的资本吃人的特性。而荷兰丹麦等国家，经济基础完全是美国的产业溢出。美国本土的购买力和生产力足够强大，只要稍微一些产业溢出到其他资本主义国家，供养几百万人的富足绰绰有余。或者说，这些国家的经济基础是美国的经济发达，而美国的经济发达无疑建立在对内的剥削和对外的掠夺上。对内剥削自然不必言说，而美国仅仅通过swift交易系统加上美元霸权就能从全世界的交易中榨取无穷的油水，对外掠夺暴露无遗。当然，也有的发达国家不依靠美国的产业溢出，却有着自己的产业。英国的支柱是银行业，本身就是一定程度的剥削。法国经济繁荣背后还是让所有北非人民付出了巨大的代价。综上所述，已有的发达国家，没有一个可以称得上是社会主义，连社会主义初级阶段都不行。他们能处于，也将长期处于资本主义的高水平阶段。当然，代价仍然是长期对内或者对外的残酷剥削。</p><p>第三，中国也没有达到高水平社会主义，客观上，政府也承认我们处于也将长期处于社会主义初级阶段。我国的生产力大而不强，人均GDP 突破一万美元还不到三年，即便最近人均 GDP暴涨，很大程度也是因为美国政府的社会救济计划导致的世界范围内的剧烈通货膨胀。其次，国内还存在着强烈的对内剥削，比如企业家（中国的资本家）对企业工人剩余价值的榨取。接着，国内的收入水平远远达不到人人都能获得城市生活居住权的地步。而我个人相对悲观，如果我国不能解决产业升级问题，没法在生产力水平上产生突破，那么国内的土地矛盾，教育矛盾等等社会问题很可能会产生社会动荡，加之资本主义世界必然希望让中国退回到原始市场的时代，国家稳定岌岌可危。</p><p>讨论完了我的社会主义观点，我想对一些观点进行回击。</p><h2 id="和平演变不是苏联解体根本原因">和平演变不是苏联解体根本原因</h2><p>意识形态输出是生产力水平客观决定的，不以人的主观意志为转移。舆论认为苏联输给了美国的和平演变，中国更应该管控社会舆论，避免重蹈覆辙。我认可中国应该管控社会舆论，然而原因并不如此。</p><p>物质水平发达地区必定会向物质水平落后地区输出自己的社会文化，或者说意识形态。而输出的结果必然是物质落后的一方在长期的相互输入中败下阵来。即便物质落后的一方暂时取得了政权意义的胜利，长期以来，自己的社会文化也会被物质先进的一方同化。古代，中国的北方少数民族若干多次取得了整个中国的政权，最后无不是自命为真龙天子，文化汉化。而苏联和美国相互输出意识形态，苏联也多次取得过不少胜利，比如连杜鲁门都不知晓曼哈顿计划的时候，斯大林早就对美国建造原子弹一清二楚，自然是苏联的意识形态成功输出给了曼哈顿计划的二号人物。然而，长期看来，就算无数西方知识分子认可了苏联的意识形态，认可了唯物史观，共产主义，也没能避免苏联因生产力水平落后而物质水平相对落后的局面。正因物质文化的落后，导致了苏联最后被美国和平演变，而非美国被苏联和平演变。在国内也是如此。尽管并不广为人知，但是越南和中国长期在中越边境相互输出意识形态。在九十年代，越南政府甚至拨款给中越边境的学校，让他们免费招收中国学生入学，学费远低于中国境内的学校。然而，那一时期，越南人均GDP 400 美元，中国人均 GDP 2400美元，即便越南一度在中越边境的意识形态战争中处于上风，最终也完全不可能培养出中国普遍的亲越南的意识形态。反而是到了这几年，中越边境人民普遍能够直观看到中国人民的物质水平远远超出越南，意识形态战争的结果不言而喻。同样的事情发生在世界各个角落，比如南北朝鲜边界，北朝鲜不得不对每个脱北者处以极刑。还有美墨边境，一墙之隔的加州发展水平碾压墨西哥，我不知道美国人是否亲墨西哥，但是至少边境的墨西哥人都拼了命的想翻过边境墙，即便在美国国内受到无数的压迫也要偷渡成为美国人。</p><p>从这一角度出发，无论中国如何加大外宣，如何强调统战价值，也没法改变当下国内有大量的高级知识分子亲美的事实。生产力落后，物质水平落后，即便能短暂胜利，长期来看也必将在意识形态的战争中失败。</p><p>当然，我能够理解国内的高级知识分子亲美，亲西方的言论，但是某些极端人士高呼逃离布尔什维克就是胜利，他们宁可去阿富汗，去墨西哥，去古巴。对于这样的人，我不否认真世界各国都有极端的反政府人士。但是口头这么说的绝大多数人，真的去了墨西哥会是什么样，我不想再叙述了，结果可想而知。</p><p>还有一些小布尔乔亚，自以为西方世界的民主自由就是臻宝，认为自己对美国的向往完全不是物质的，就是精神的，甚至为美国冠以灯塔这样虚伪的称呼，自己也为自己冠以灯塔的名号。我只能感叹其对生产力发展毫无认知，何其盲目而愚蠢。既然他们认为自己的追求不是物质的，那么我简要概括下美国的特点，自然其中剔除了所有的物质部分。</p><ol type="1"><li>小政府，基本不干预经济。</li><li>总统是选举出来的，国内有超过一个党派可能产生总统。</li><li>自由，很自由，言论自由，新闻自由，持枪自由，远比国内自由，满足他们渴望的一切自由。</li></ol><p>如果一个国家符合以上的特点，符合这些愚蠢的消极自由主义者们热爱的一切，他们就会前赴后继的想尽一切办法逃离中国所代表的布尔什维克世界，逃离社会主义初级阶段，而奔向这个国家。那么显然，这个国家不必是美国。我想说的是，这样的国家可到处都是呢！</p><p>我就知道一个国家，他坐落于非洲之角，亚丁湾旁，航运业发达，自古就是商业文明的必经之地。他符合以上的所有特点，不过就是比美国穷了一点。当然，之所以穷，可能也很大程度得益于美国的对外剥削。希望这些小布尔乔亚可以去这个国家，追求这个国家的自由民主，把他称为灯塔，而不是美国。</p><p>对了，这个国家叫做索马里…</p><h2 id="人类社会的根本矛盾是利益">人类社会的根本矛盾是利益</h2><p>国内部分人认为，以往的冷战和当下的中美矛盾是意识形态问题，只要我国也实行资本主义，我们不姓社了，我们姓资就好了，美国就不会再和中国有矛盾。</p><p>那么，我想反问这些人，苏联解体了，那么美国和俄罗斯的矛盾是为何？</p><p>本质上，美国和任何一个国家的矛盾都是为了把这个国家变为自己的外部市场，达到我前文所述的对外经济掠夺。苏联和中国生产力落后于美国，却坚持反抗沦为美国的外部市场，必然会遭到美国的打压，甚至美国会宣称自己是自由民主的西方国家的灯塔，带领自由民主去解放全人类。何其虚伪！</p><p>解放后的结果是什么？乌克兰完全倒向西方，很快就成为了欧洲子宫，也产生了全欧洲五成以上的妓女。俄罗斯改姓资，却仍不想沦为美国的外部市场，和美国产生无数的矛盾。</p><p>这些宣称美国自由民主解放集权主义中国的人，他们真的有思考过中国的客观生产力和资本主义必然的对外剥削吗？当然，如果他们认知到了这一步，却仍然认为中国政府一无是处，埋怨自己出生在了中国。我的看法是，他们最好将一切怪罪于他们的父母，让他们没能出生在世界上物质最繁华的国家的统治阶级，而是出生在了一个欣欣向荣的初级社会主义国家，还需要进行广泛的生产力革命才能走向更高水平的社会繁荣。</p><p>人类社会的根本矛盾是经济利益，所谓的民族主义战争，所谓的意识形态战争，不过是经济利益战争的虚伪面具罢了。正如前文所述，一战是资本主义国家间互相想把对方变为自己的外部市场的战争，纯粹的经济利益战争。二战冠以了民族主义的旗号，冷战冠以了意识形态的旗号。结果一场俄乌冲突，赤裸裸的经济利益冲突，直接把人类的发展水平倒退回了一战水平。而冷战后的俄美矛盾，赤裸裸的揭露了人类社会的利益冲突，无疑是对东西方的共同背叛。原苏联人民认为，以前美苏矛盾是因为意识形态，如今我们都是资本主义，为什么压迫变本加厉。美国人民也受到了欺骗，以往压迫苏联是因为他们是集权主义，我们要对外输出自由民主。如今都输出成功了，为什么还有如此矛盾。普京认为，如果有人不怀念苏联，就是没有良心；如果有人想回到苏联，就是愚蠢。中文互联网上，人们怀恋苏联是敬畏布尔什维克伟大的共产主义理想，然而很多时候，前苏联国家怀念苏联，却仅仅是怀念苏联强横的国力，再没对布尔什维克的一丝敬意。伟大的布尔什维克，已经在生产力落后的东欧地区被判处了死刑。</p><p>而那些认为意识形态才是社会本质的小布尔乔亚，我只能为其叹息。</p><h2 id="有限度的自由才是宝贵的">有限度的自由才是宝贵的</h2><p>如我所述，前文的这些布尔乔亚非常喜欢攻击中国政府的言论暴政，不给人言论自由。然而我认为，政府的问题可能是过度紧绷的言论管制，但是我们绝对不能有完全的言论自由。苏联到了1989年后，完全言论自由，彻底击碎了国家的布尔什维克信仰。就连《真理报》也在抨击社会主义，加速了国家的崩溃。中国不限制极端言论，结局只有沦为资本主义的外部市场。</p><p>这些人仅仅看到了社会舆论的控制，可是他们完全没能看到我国的学术界对社会主义和资本主义有着极其激烈的争论，各种观点都有人提出并且严谨的讨论。这些人认为，资本主义的自由民主就是完美的，殊不知西方学界对资本主义的批判激烈程度远远超出国内。如果小布尔乔亚们有观点，请严谨地讨论。提出这种不基于生产力现状的盲目自由的人，真是让人觉得可悲至极。</p><h1 id="唯物史观的武器">唯物史观的武器</h1><p>经过了对于唯物史观的详细论述，我完整的叙述了我的社会观点。结尾处，我激烈的批评了不顾生产力发展水平，盲目追求自由民主的小布尔乔亚。我理解他们立场的来源，但会竭力地认真批判。他们的问题是享受到了太多中国革命的成果，却距离中国革命太过遥远。在他们看来，共产主义革命是一个历史事件，是历史教科书上枯燥的记录，不是现实中能体会到的东西。</p><p>但是，广义的解放和革命还没有结束，主动的社会变革还必须继续推进。只要世界上还有国家地区生产力绝对落后，只要还有的国家地区是资本主义世界的外部市场，那么资本主义对全世界的剥削就会永远持续，伟大的社会主义世界就无法建立。</p><p>中国年轻人必须主动拿起唯物主义武器，积极地发展社会生产力，为全人类的福祉做出贡献，才能够建立真正伟大的社会主义国家！</p>]]></content>
    
    
    <summary type="html">在宇宙中，最高的敬意是赶尽杀绝...</summary>
    
    
    
    <category term="课程" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    <category term="思政" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/%E6%80%9D%E6%94%BF/"/>
    
    
    <category term="人类社会观察" scheme="http://example.com/tags/%E4%BA%BA%E7%B1%BB%E7%A4%BE%E4%BC%9A%E8%A7%82%E5%AF%9F/"/>
    
    <category term="2022春季" scheme="http://example.com/tags/2022%E6%98%A5%E5%AD%A3/"/>
    
  </entry>
  
</feed>
